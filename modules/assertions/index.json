[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Serenity",
    "externalLink": "/modules/core/class/src/Serenity.ts~Serenity.html",
    "longname": "@serenity-js/core~Serenity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "SerenityConfig",
    "externalLink": "/modules/core/class/src/SerenityConfig.ts~SerenityConfig.html",
    "longname": "@serenity-js/core~SerenityConfig",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "AssertionError",
    "externalLink": "/modules/core/class/src/errors/AssertionError.ts~AssertionError.html",
    "longname": "@serenity-js/core/lib/errors~AssertionError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "ConfigurationError",
    "externalLink": "/modules/core/class/src/errors/ConfigurationError.ts~ConfigurationError.html",
    "longname": "@serenity-js/core/lib/errors~ConfigurationError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "ImplementationPendingError",
    "externalLink": "/modules/core/class/src/errors/ImplementationPendingError.ts~ImplementationPendingError.html",
    "longname": "@serenity-js/core/lib/errors~ImplementationPendingError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "LogicError",
    "externalLink": "/modules/core/class/src/errors/LogicError.ts~LogicError.html",
    "longname": "@serenity-js/core/lib/errors~LogicError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "RuntimeError",
    "externalLink": "/modules/core/class/src/errors/RuntimeError.ts~RuntimeError.html",
    "longname": "@serenity-js/core/lib/errors~RuntimeError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "TestCompromisedError",
    "externalLink": "/modules/core/class/src/errors/TestCompromisedError.ts~TestCompromisedError.html",
    "longname": "@serenity-js/core/lib/errors~TestCompromisedError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "UnknownError",
    "externalLink": "/modules/core/class/src/errors/UnknownError.ts~UnknownError.html",
    "longname": "@serenity-js/core/lib/errors~UnknownError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "ActivityFinished",
    "externalLink": "/modules/core/class/src/events/ActivityFinished.ts~ActivityFinished.html",
    "longname": "@serenity-js/core/lib/events~ActivityFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "ActivityRelatedArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactArchived",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "ActivityRelatedArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactGenerated",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "ActivityStarts",
    "externalLink": "/modules/core/class/src/events/ActivityStarts.ts~ActivityStarts.html",
    "longname": "@serenity-js/core/lib/events~ActivityStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "ArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ArtifactArchived.ts~ArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ArtifactArchived",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "ArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ArtifactGenerated.ts~ArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ArtifactGenerated",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "AsyncOperationAttempted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationAttempted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "AsyncOperationCompleted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationCompleted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "AsyncOperationFailed",
    "externalLink": "/modules/core/class/src/events/AsyncOperationFailed.ts~AsyncOperationFailed.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationFailed",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "DomainEvent",
    "externalLink": "/modules/core/class/src/events/DomainEvent.ts~DomainEvent.html",
    "longname": "@serenity-js/core/lib/events~DomainEvent",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "FeatureNarrativeDetected",
    "externalLink": "/modules/core/class/src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.html",
    "longname": "@serenity-js/core/lib/events~FeatureNarrativeDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "InteractionFinished",
    "externalLink": "/modules/core/class/src/events/InteractionFinished.ts~InteractionFinished.html",
    "longname": "@serenity-js/core/lib/events~InteractionFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "InteractionStarts",
    "externalLink": "/modules/core/class/src/events/InteractionStarts.ts~InteractionStarts.html",
    "longname": "@serenity-js/core/lib/events~InteractionStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "SceneBackgroundDetected",
    "externalLink": "/modules/core/class/src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneBackgroundDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "SceneDescriptionDetected",
    "externalLink": "/modules/core/class/src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneDescriptionDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "SceneFinished",
    "externalLink": "/modules/core/class/src/events/SceneFinished.ts~SceneFinished.html",
    "longname": "@serenity-js/core/lib/events~SceneFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "SceneFinishes",
    "externalLink": "/modules/core/class/src/events/SceneFinishes.ts~SceneFinishes.html",
    "longname": "@serenity-js/core/lib/events~SceneFinishes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "SceneParametersDetected",
    "externalLink": "/modules/core/class/src/events/SceneParametersDetected.ts~SceneParametersDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneParametersDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "SceneSequenceDetected",
    "externalLink": "/modules/core/class/src/events/SceneSequenceDetected.ts~SceneSequenceDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneSequenceDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "SceneStarts",
    "externalLink": "/modules/core/class/src/events/SceneStarts.ts~SceneStarts.html",
    "longname": "@serenity-js/core/lib/events~SceneStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "SceneTagged",
    "externalLink": "/modules/core/class/src/events/SceneTagged.ts~SceneTagged.html",
    "longname": "@serenity-js/core/lib/events~SceneTagged",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "SceneTemplateDetected",
    "externalLink": "/modules/core/class/src/events/SceneTemplateDetected.ts~SceneTemplateDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneTemplateDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "TaskFinished",
    "externalLink": "/modules/core/class/src/events/TaskFinished.ts~TaskFinished.html",
    "longname": "@serenity-js/core/lib/events~TaskFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "TaskStarts",
    "externalLink": "/modules/core/class/src/events/TaskStarts.ts~TaskStarts.html",
    "longname": "@serenity-js/core/lib/events~TaskStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "TestRunFinished",
    "externalLink": "/modules/core/class/src/events/TestRunFinished.ts~TestRunFinished.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "TestRunFinishes",
    "externalLink": "/modules/core/class/src/events/TestRunFinishes.ts~TestRunFinishes.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinishes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "TestRunnerDetected",
    "externalLink": "/modules/core/class/src/events/TestRunnerDetected.ts~TestRunnerDetected.html",
    "longname": "@serenity-js/core/lib/events~TestRunnerDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "TestSuiteFinished",
    "externalLink": "/modules/core/class/src/events/TestSuiteFinished.ts~TestSuiteFinished.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "TestSuiteStarts",
    "externalLink": "/modules/core/class/src/events/TestSuiteStarts.ts~TestSuiteStarts.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "serenity",
    "externalLink": "/modules/core/variable/src/instance.ts~serenity.html",
    "longname": "@serenity-js/core~serenity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "configure",
    "externalLink": "/modules/core/function/src/instance.ts~configure.html",
    "longname": "@serenity-js/core~configure",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "engage",
    "externalLink": "/modules/core/function/src/instance.ts~engage.html",
    "longname": "@serenity-js/core~engage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "actorCalled",
    "externalLink": "/modules/core/function/src/instance.ts~actorCalled.html",
    "longname": "@serenity-js/core~actorCalled",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "actorInTheSpotlight",
    "externalLink": "/modules/core/function/src/instance.ts~actorInTheSpotlight.html",
    "longname": "@serenity-js/core~actorInTheSpotlight",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "AssertionReportDiffer",
    "externalLink": "/modules/core/class/src/io/AssertionReportDiffer.ts~AssertionReportDiffer.html",
    "longname": "@serenity-js/core/lib/io~AssertionReportDiffer",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "SerialisedError",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~SerialisedError.html",
    "longname": "@serenity-js/core/lib/io~SerialisedError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "ErrorSerialiser",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~ErrorSerialiser.html",
    "longname": "@serenity-js/core/lib/io~ErrorSerialiser",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "/modules/core/class/src/io/FileSystem.ts~FileSystem.html",
    "longname": "@serenity-js/core/lib/io~FileSystem",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "FileSystemLocation",
    "externalLink": "/modules/core/class/src/io/FileSystemLocation.ts~FileSystemLocation.html",
    "longname": "@serenity-js/core/lib/io~FileSystemLocation",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "ModuleLoader",
    "externalLink": "/modules/core/class/src/io/ModuleLoader.ts~ModuleLoader.html",
    "longname": "@serenity-js/core/lib/io~ModuleLoader",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "Path",
    "externalLink": "/modules/core/class/src/io/Path.ts~Path.html",
    "longname": "@serenity-js/core/lib/io~Path",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "Version",
    "externalLink": "/modules/core/class/src/io/Version.ts~Version.html",
    "longname": "@serenity-js/core/lib/io~Version",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "formatted",
    "externalLink": "/modules/core/function/src/io/formatted.ts~formatted.html",
    "longname": "@serenity-js/core/lib/io~formatted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "inspected",
    "externalLink": "/modules/core/function/src/io/inspected.ts~inspected.html",
    "longname": "@serenity-js/core/lib/io~inspected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "trimmed",
    "externalLink": "/modules/core/function/src/io/trimmed.ts~trimmed.html",
    "longname": "@serenity-js/core/lib/io~trimmed",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "ActivityDetails",
    "externalLink": "/modules/core/class/src/model/ActivityDetails.ts~ActivityDetails.html",
    "longname": "@serenity-js/core/lib/model~ActivityDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "Artifact",
    "externalLink": "/modules/core/class/src/model/Artifact.ts~Artifact.html",
    "longname": "@serenity-js/core/lib/model~Artifact",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "Category",
    "externalLink": "/modules/core/class/src/model/Category.ts~Category.html",
    "longname": "@serenity-js/core/lib/model~Category",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "CorrelationId",
    "externalLink": "/modules/core/class/src/model/CorrelationId.ts~CorrelationId.html",
    "longname": "@serenity-js/core/lib/model~CorrelationId",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "Description",
    "externalLink": "/modules/core/class/src/model/Description.ts~Description.html",
    "longname": "@serenity-js/core/lib/model~Description",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "Duration",
    "externalLink": "/modules/core/class/src/model/Duration.ts~Duration.html",
    "longname": "@serenity-js/core/lib/model~Duration",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "Name",
    "externalLink": "/modules/core/class/src/model/Name.ts~Name.html",
    "longname": "@serenity-js/core/lib/model~Name",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "ScenarioDetails",
    "externalLink": "/modules/core/class/src/model/ScenarioDetails.ts~ScenarioDetails.html",
    "longname": "@serenity-js/core/lib/model~ScenarioDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "ScenarioParameters",
    "externalLink": "/modules/core/class/src/model/ScenarioParameters.ts~ScenarioParameters.html",
    "longname": "@serenity-js/core/lib/model~ScenarioParameters",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "TestSuiteDetails",
    "externalLink": "/modules/core/class/src/model/TestSuiteDetails.ts~TestSuiteDetails.html",
    "longname": "@serenity-js/core/lib/model~TestSuiteDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Timestamp",
    "externalLink": "/modules/core/class/src/model/Timestamp.ts~Timestamp.html",
    "longname": "@serenity-js/core/lib/model~Timestamp",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "AssertionReport",
    "externalLink": "/modules/core/class/src/model/artifacts/AssertionReport.ts~AssertionReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~AssertionReport",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "RequestAndResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~RequestAndResponse",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "HTTPRequestResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~HTTPRequestResponse",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "JSONData",
    "externalLink": "/modules/core/class/src/model/artifacts/JSONData.ts~JSONData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~JSONData",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "LogEntry",
    "externalLink": "/modules/core/class/src/model/artifacts/LogEntry.ts~LogEntry.html",
    "longname": "@serenity-js/core/lib/model/artifacts~LogEntry",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "Photo",
    "externalLink": "/modules/core/class/src/model/artifacts/Photo.ts~Photo.html",
    "longname": "@serenity-js/core/lib/model/artifacts~Photo",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "TestReport",
    "externalLink": "/modules/core/class/src/model/artifacts/TestReport.ts~TestReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TestReport",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "TextData",
    "externalLink": "/modules/core/class/src/model/artifacts/TextData.ts~TextData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TextData",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/core/lib/model~Outcome",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "ProblemIndication",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ProblemIndication.html",
    "longname": "@serenity-js/core/lib/model~ProblemIndication",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "ExecutionCompromised",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionCompromised.html",
    "longname": "@serenity-js/core/lib/model~ExecutionCompromised",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "ExecutionFailedWithError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "ExecutionFailedWithAssertionError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithAssertionError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithAssertionError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "ImplementationPending",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ImplementationPending.html",
    "longname": "@serenity-js/core/lib/model~ImplementationPending",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "ExecutionSkipped",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSkipped.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSkipped",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "ExecutionIgnored",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionIgnored.html",
    "longname": "@serenity-js/core/lib/model~ExecutionIgnored",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "ExecutionSuccessful",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSuccessful.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSuccessful",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "ArbitraryTag",
    "externalLink": "/modules/core/class/src/model/tags/ArbitraryTag.ts~ArbitraryTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ArbitraryTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "BrowserTag",
    "externalLink": "/modules/core/class/src/model/tags/BrowserTag.ts~BrowserTag.html",
    "longname": "@serenity-js/core/lib/model/tags~BrowserTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "CapabilityTag",
    "externalLink": "/modules/core/class/src/model/tags/CapabilityTag.ts~CapabilityTag.html",
    "longname": "@serenity-js/core/lib/model/tags~CapabilityTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "ContextTag",
    "externalLink": "/modules/core/class/src/model/tags/ContextTag.ts~ContextTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ContextTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "FeatureTag",
    "externalLink": "/modules/core/class/src/model/tags/FeatureTag.ts~FeatureTag.html",
    "longname": "@serenity-js/core/lib/model/tags~FeatureTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "IssueTag",
    "externalLink": "/modules/core/class/src/model/tags/IssueTag.ts~IssueTag.html",
    "longname": "@serenity-js/core/lib/model/tags~IssueTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "ManualTag",
    "externalLink": "/modules/core/class/src/model/tags/ManualTag.ts~ManualTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ManualTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "PlatformTag",
    "externalLink": "/modules/core/class/src/model/tags/PlatformTag.ts~PlatformTag.html",
    "longname": "@serenity-js/core/lib/model/tags~PlatformTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/core/class/src/model/tags/Tag.ts~Tag.html",
    "longname": "@serenity-js/core/lib/model/tags~Tag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "ThemeTag",
    "externalLink": "/modules/core/class/src/model/tags/ThemeTag.ts~ThemeTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ThemeTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "Ability",
    "externalLink": "/modules/core/class/src/screenplay/Ability.ts~Ability.html",
    "longname": "@serenity-js/core/lib/screenplay~Ability",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "AbilityType",
    "externalLink": "/modules/core/class/src/screenplay/AbilityType.ts~AbilityType.html",
    "longname": "@serenity-js/core/lib/screenplay~AbilityType",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "Activity",
    "externalLink": "/modules/core/class/src/screenplay/Activity.ts~Activity.html",
    "longname": "@serenity-js/core/lib/screenplay~Activity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "Interaction",
    "externalLink": "/modules/core/class/src/screenplay/Interaction.ts~Interaction.html",
    "longname": "@serenity-js/core/lib/screenplay~Interaction",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "Question",
    "externalLink": "/modules/core/class/src/screenplay/Question.ts~Question.html",
    "longname": "@serenity-js/core/lib/screenplay~Question",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "Task",
    "externalLink": "/modules/core/class/src/screenplay/Task.ts~Task.html",
    "longname": "@serenity-js/core/lib/screenplay~Task",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "TakeNotes",
    "externalLink": "/modules/core/class/src/screenplay/abilities/TakeNotes.ts~TakeNotes.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~TakeNotes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "Actor",
    "externalLink": "/modules/core/class/src/screenplay/actor/Actor.ts~Actor.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~Actor",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "AnswersQuestions",
    "externalLink": "/modules/core/class/src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~AnswersQuestions",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "CanHaveAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CanHaveAbilities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "CollectsArtifacts",
    "externalLink": "/modules/core/class/src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CollectsArtifacts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "PerformsActivities",
    "externalLink": "/modules/core/class/src/screenplay/actor/PerformsActivities.ts~PerformsActivities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~PerformsActivities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "UsesAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/UsesAbilities.ts~UsesAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~UsesAbilities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "Log",
    "externalLink": "/modules/core/class/src/screenplay/interactions/Log.ts~Log.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~Log",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "See",
    "externalLink": "/modules/core/class/src/screenplay/interactions/See.ts~See.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~See",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "TakeNote",
    "externalLink": "/modules/core/class/src/screenplay/interactions/TakeNote.ts~TakeNote.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~TakeNote",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Note",
    "externalLink": "/modules/core/class/src/screenplay/questions/Note.ts~Note.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Note",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Transform",
    "externalLink": "/modules/core/class/src/screenplay/questions/Transform.ts~Transform.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Transform",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "Cast",
    "externalLink": "/modules/core/class/src/stage/Cast.ts~Cast.html",
    "longname": "@serenity-js/core/lib/stage~Cast",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Clock",
    "externalLink": "/modules/core/class/src/stage/Clock.ts~Clock.html",
    "longname": "@serenity-js/core/lib/stage~Clock",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "DressingRoom",
    "externalLink": "/modules/core/class/src/stage/DressingRoom.ts~DressingRoom.html",
    "longname": "@serenity-js/core/lib/stage~DressingRoom",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "Stage",
    "externalLink": "/modules/core/class/src/stage/Stage.ts~Stage.html",
    "longname": "@serenity-js/core/lib/stage~Stage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "StageCrewMember",
    "externalLink": "/modules/core/class/src/stage/StageCrewMember.ts~StageCrewMember.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMember",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "StageManager",
    "externalLink": "/modules/core/class/src/stage/StageManager.ts~StageManager.html",
    "longname": "@serenity-js/core/lib/stage~StageManager",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "WithStage",
    "externalLink": "/modules/core/class/src/stage/WithStage.ts~WithStage.html",
    "longname": "@serenity-js/core/lib/stage~WithStage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "ArtifactArchiver",
    "externalLink": "/modules/core/class/src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.html",
    "longname": "@serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "StreamReporter",
    "externalLink": "/modules/core/class/src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter.html",
    "longname": "@serenity-js/core/lib/stage/crew/stream-reporter~StreamReporter",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/Check.ts",
    "content": "import { Activity, Answerable, AnswersQuestions, PerformsActivities, Task } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Expectation } from './Expectation';\nimport { ExpectationMet } from './outcomes';\n\n/**\n * @desc\n *  A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n *  either to choose whether or not to perform a series of activities,\n *  or to choose which of the two provided series of activities to perform.\n *\n * @example <caption>Choose from two alternatives</caption>\n *  import { Check, equals } from '@serenity-js/assertions';\n *\n *  actor.attemptsTo(\n *      Check.whether(process.env.MODE, equals('prod'))\n *          .andIfSo(\n *              LogInAsProdUser(),\n *          )\n *          .otherwise(\n *              LogInAsTestUser(),\n *          )\n *  );\n *\n * @example <caption>Choose whether or not to perform an activity</caption>\n *  import { Check, equals } from '@serenity-js/assertions';\n *  import { isDiplayed } from '@serenity-js/protractor';\n *\n *  actor.attemptsTo(\n *      Check.whether(NewsletterModal(), isDisplayed())\n *          .andIfSo(\n *              DismissModal(),\n *          )\n *  );\n *\n * @extends {@serenity-js/core/lib/screenplay~Task}\n *\n * @see https://en.wikipedia.org/wiki/Control_flow\n */\nexport class Check<Actual> extends Task {\n    static whether<A>(actual: Answerable<A>, expectation: Expectation<any, A>) {\n        return {\n            andIfSo: (...activities: Activity[]) => new Check(actual, expectation, activities),\n        };\n    }\n\n    /**\n     *\n     * @param actual\n     * @param expectation\n     * @param activities\n     * @param alternativeActivities\n     */\n    constructor(\n        private readonly actual: Answerable<Actual>,\n        private readonly expectation: Expectation<any, Actual>,\n        private readonly activities: Activity[],\n        private readonly alternativeActivities: Activity[] = [],\n    ) {\n        super();\n    }\n\n    /**\n     * @param {...@serenity-js/core/lib/screenplay~Activity[]} alternativeActivities\n     * @return {@serenity-js/core/lib/screenplay~Task}\n     */\n    otherwise(...alternativeActivities: Activity[]): Task {\n        return new Check<Actual>(this.actual, this.expectation, this.activities, alternativeActivities);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Task}.\n     *\n     * @param {AnswersQuestions & PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}\n     */\n    performAs(actor: AnswersQuestions & PerformsActivities): PromiseLike<void> {\n        return Promise.all([\n            actor.answer(this.actual),\n            actor.answer(this.expectation),\n        ]).then(([actual, expectation]) =>\n            expectation(actual).then(outcome =>\n                    outcome instanceof ExpectationMet\n                        ? actor.attemptsTo(...this.activities)\n                        : actor.attemptsTo(...this.alternativeActivities),\n            ),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor ensures that ${ this.actual } does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/Check.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "Check",
    "memberof": "src/Check.ts",
    "static": true,
    "longname": "src/Check.ts~Check",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{Check}",
    "description": " A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n either to choose whether or not to perform a series of activities,\n or to choose which of the two provided series of activities to perform.",
    "examples": [
      "<caption>Choose from two alternatives</caption>\n import { Check, equals } from '@serenity-js/assertions';\n\n actor.attemptsTo(\n     Check.whether(process.env.MODE, equals('prod'))\n         .andIfSo(\n             LogInAsProdUser(),\n         )\n         .otherwise(\n             LogInAsTestUser(),\n         )\n );",
      "<caption>Choose whether or not to perform an activity</caption>\n import { Check, equals } from '@serenity-js/assertions';\n import { isDiplayed } from '@serenity-js/protractor';\n\n actor.attemptsTo(\n     Check.whether(NewsletterModal(), isDisplayed())\n         .andIfSo(\n             DismissModal(),\n         )\n );"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/Control_flow"
    ],
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "Task"
    ]
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "whether",
    "memberof": "src/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Check.ts~Check.whether",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"andIfSo\": *}"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Check.ts~Check#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alternativeActivities",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "otherwise",
    "memberof": "src/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Check.ts~Check#otherwise",
    "access": "public",
    "description": "",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Activity[]"
        ],
        "spread": false,
        "optional": false,
        "name": "alternativeActivities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Check.ts~Check#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Task}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}"
    ],
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Check.ts~Check#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/Ensure.ts",
    "content": "import { Answerable, AnswersQuestions, AssertionError, CollectsArtifacts, Interaction, LogicError, RuntimeError, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { inspected } from '@serenity-js/core/lib/io/inspected';\nimport { Artifact, AssertionReport, Name } from '@serenity-js/core/lib/model';\nimport { match } from 'tiny-types';\n\nimport { Expectation } from './Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from './outcomes';\n\n/**\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Ensure<Actual> extends Interaction {\n    static that<A>(actual: Answerable<A>, expectation: Expectation<any, A>): Ensure<A> {\n        return new Ensure(actual, expectation);\n    }\n\n    constructor(\n        protected readonly actual: Answerable<Actual>,\n        protected readonly expectation: Expectation<Actual>,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & CollectsArtifacts & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions & CollectsArtifacts): PromiseLike<void> {\n        return Promise.all([\n            actor.answer(this.actual),\n            actor.answer(this.expectation),\n        ]).\n        then(([ actual, expectation ]) =>\n            expectation(actual).then(outcome =>\n                match<Outcome<any, Actual>, void>(outcome)\n                    .when(ExpectationNotMet, o => {\n                        actor.collect(this.artifactFrom(o.expected, o.actual), new Name(`Assertion Report`));\n\n                        throw this.errorForOutcome(o);\n                    })\n                    .when(ExpectationMet, _ => void 0)\n                    .else(o => {\n                        throw new LogicError(formatted `An Expectation should return an instance of an Outcome, not ${ o }`);\n                    }),\n                ),\n            );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor ensures that ${ this.actual } does ${ this.expectation }`;\n    }\n\n    otherwiseFailWith(typeOfRuntimeError: new (message: string, cause?: Error) => RuntimeError, message?: string): Interaction {\n        return new EnsureOrFailWithCustomError(this.actual, this.expectation, typeOfRuntimeError, message);\n    }\n\n    protected errorForOutcome(outcome: Outcome<any, Actual>): RuntimeError {\n        return this.asAssertionError(outcome);\n    }\n\n    protected asAssertionError(outcome: Outcome<any, Actual>) {\n        return new AssertionError(\n            `Expected ${ formatted`${ this.actual }` } to ${ outcome.message }`,\n            outcome.expected,\n            outcome.actual,\n        );\n    }\n\n    private artifactFrom(expected: any, actual: Actual): Artifact {\n        return AssertionReport.fromJSON({\n            expected: inspected(expected),\n            actual: inspected(actual),\n        });\n    }\n}\n\n/**\n * @package\n */\nclass EnsureOrFailWithCustomError<Actual> extends Ensure<Actual> {\n    constructor(\n        actual: Answerable<Actual>,\n        expectation: Expectation<Actual>,\n        private readonly typeOfRuntimeError: new (message: string, cause?: Error) => RuntimeError,\n        private readonly message?: string,\n    ) {\n        super(actual, expectation);\n    }\n\n    protected errorForOutcome(outcome: Outcome<any, Actual>): RuntimeError {\n        const assertionError = this.asAssertionError(outcome);\n\n        return new this.typeOfRuntimeError(this.message || assertionError.message, assertionError);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/Ensure.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "Ensure",
    "memberof": "src/Ensure.ts",
    "static": true,
    "longname": "src/Ensure.ts~Ensure",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{Ensure}",
    "description": "",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "that",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Ensure.ts~Ensure.that",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Ensure"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & CollectsArtifacts & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "otherwiseFailWith",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#otherwiseFailWith",
    "access": "public",
    "description": " ",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "typeOfRuntimeError",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "errorForOutcome",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#errorForOutcome",
    "access": "protected",
    "description": " ",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RuntimeError"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "asAssertionError",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#asAssertionError",
    "access": "protected",
    "description": " ",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "artifactFrom",
    "memberof": "src/Ensure.ts~Ensure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~Ensure#artifactFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Actual"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Artifact"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "EnsureOrFailWithCustomError",
    "memberof": "src/Ensure.ts",
    "static": true,
    "longname": "src/Ensure.ts~EnsureOrFailWithCustomError",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/Ensure.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 205,
    "interface": false,
    "extends": [
      "Ensure"
    ],
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Ensure.ts~EnsureOrFailWithCustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~EnsureOrFailWithCustomError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "errorForOutcome",
    "memberof": "src/Ensure.ts~EnsureOrFailWithCustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Ensure.ts~EnsureOrFailWithCustomError#errorForOutcome",
    "access": "protected",
    "description": " ",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RuntimeError"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/Expectation.ts",
    "content": "import { Answerable, AnswersQuestions, Question } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from './outcomes';\n\n/**\n * @public\n *\n * @typedef {function(actual: A, expected: E) => boolean} Predicate<A,E>\n */\nexport type Predicate<A, E> = (actual: A, expected: E) => boolean;\n\n/**\n * @desc\n *  Defines an expectation to be used with:\n *  - {@link Ensure} - to perform a verification\n *  - {@link Check} - to control the execution flow\n *\n * @implements {@serenity-js/core/lib/screenplay~Question}\n *\n * @see {@link Ensure}\n * @see {@link Check}\n */\nexport abstract class Expectation<Expected, Actual = Expected>\n    implements Question<(actual: Actual) => Promise<Outcome<Expected, Actual>>>\n{\n\n    /**\n     * @desc\n     *  Used to define a simple {@link Expectation}\n     *\n     * @example\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Expectation, Ensure } from '@serenity-js/assertions';\n     *\n     *  function isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n     *      return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n     *          .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n     *  }\n     *\n     *  actorCalled('Erica').attemptsTo(\n     *      Ensure.that(4, isDivisibleBy(2)),\n     *  );\n     *\n     * @param {string} relationshipName\n     * @param {@serenity-js/core/lib/screenplay~Answerable<E>} expectedValue\n     *\n     * @returns {\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>}\n     */\n    static thatActualShould<E, A>(relationshipName: string, expectedValue: Answerable<E>): {\n        soThat: (predicate: Predicate<A, E>) => Expectation<E, A>,\n    } {\n        return ({\n            soThat: (predicate: Predicate<A, E>): Expectation<E, A> => {\n                return new DynamicallyGeneratedExpectation<E, A>(relationshipName, predicate, expectedValue);\n            },\n        });\n    }\n\n    /**\n     * @desc\n     *  Used to compose {@link Expectation}s.\n     *\n     * @example\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Expectation, Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n     *\n     *  function isWithin(lowerBound: number, upperBound: number) {\n     *      return Expectation\n     *          .to(`have value within ${ lowerBound } and ${ upperBound }`)\n     *          .soThatActual(and(\n     *              or(isGreaterThan(lowerBound), equals(lowerBound)),\n     *              or(isLessThan(upperBound), equals(upperBound)),\n     *          ));\n     *  }\n     *\n     *  actorCalled('Erica').attemptsTo(\n     *      Ensure.that(5, isWithin(3, 6)),\n     *  );\n     *\n     * @param {string} relationshipName\n     *\n     * @returns {\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}\n     */\n    static to<A>(relationshipName: string): {\n        soThatActual: (...expectations: Array<Expectation<any, A>>) => Expectation<any, A>,\n    } {\n        return {\n            soThatActual: (expectation: Expectation<any, A>): Expectation<any, A> => {\n                return new ExpectationAlias<A>(relationshipName, expectation);\n            },\n        };\n    }\n\n    abstract answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<Expected, Actual>>;\n\n    abstract toString(): string;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedExpectation<Expected, Actual> implements Expectation<Expected, Actual> {\n\n    constructor(\n        private readonly description: string,\n        private readonly predicate: Predicate<Actual, Expected>,\n        private readonly expectedValue: Answerable<Expected>,\n    ) {\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<Expected, Actual>> {\n\n        return (actual: Actual) => actor.answer(this.expectedValue)\n            .then(expected => {\n                return this.predicate(actual, expected)\n                    ? new ExpectationMet(this.toString(), expected, actual)\n                    : new ExpectationNotMet(this.toString(), expected, actual);\n            });\n    }\n\n    toString(): string {\n        return `${ this.description } ${ formatted `${this.expectedValue}` }`;\n    }\n}\n\n/**\n * @package\n */\nclass ExpectationAlias<Actual> implements Expectation<any, Actual> {\n\n    constructor(\n        private readonly description: string,\n        private readonly expectation: Expectation<any, Actual>,\n    ) {\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<any, Actual>> {\n\n        return (actual: Actual) =>\n            this.expectation.answeredBy(actor)(actual).then(_ => _ instanceof ExpectationMet\n                ? new ExpectationMet(this.description, _.expected, _.actual)\n                : new ExpectationNotMet(_.message, _.expected, _.actual));\n    }\n\n    toString(): string {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/Expectation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "typedef",
    "name": "Predicate<A,E>",
    "memberof": "src/Expectation.ts",
    "static": true,
    "longname": "src/Expectation.ts~Predicate<A,E>",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "type": {
      "types": [
        "function(actual: A, expected: E) => boolean"
      ],
      "optional": false,
      "name": "Predicate<A,E>"
    }
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Expectation",
    "memberof": "src/Expectation.ts",
    "static": true,
    "longname": "src/Expectation.ts~Expectation",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{Expectation}",
    "description": " Defines an expectation to be used with:\n - {@link Ensure} - to perform a verification\n - {@link Check} - to control the execution flow",
    "see": [
      "{@link Ensure}",
      "{@link Check}"
    ],
    "lineNumber": 37,
    "interface": false,
    "implements": [
      "Question"
    ]
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "thatActualShould",
    "memberof": "src/Expectation.ts~Expectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Expectation.ts~Expectation.thatActualShould",
    "access": "public",
    "description": " Used to define a simple {@link Expectation}",
    "examples": [
      " import { actorCalled } from '@serenity-js/core';\n import { Expectation, Ensure } from '@serenity-js/assertions';\n\n function isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n     return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n         .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n }\n\n actorCalled('Erica').attemptsTo(\n     Ensure.that(4, isDivisibleBy(2)),\n );"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "relationshipName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Answerable<E>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "to",
    "memberof": "src/Expectation.ts~Expectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Expectation.ts~Expectation.to",
    "access": "public",
    "description": " Used to compose {@link Expectation}s.",
    "examples": [
      " import { actorCalled } from '@serenity-js/core';\n import { Expectation, Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n\n function isWithin(lowerBound: number, upperBound: number) {\n     return Expectation\n         .to(`have value within ${ lowerBound } and ${ upperBound }`)\n         .soThatActual(and(\n             or(isGreaterThan(lowerBound), equals(lowerBound)),\n             or(isLessThan(upperBound), equals(upperBound)),\n         ));\n }\n\n actorCalled('Erica').attemptsTo(\n     Ensure.that(5, isWithin(3, 6)),\n );"
    ],
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "relationshipName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "DynamicallyGeneratedExpectation",
    "memberof": "src/Expectation.ts",
    "static": true,
    "longname": "src/Expectation.ts~DynamicallyGeneratedExpectation",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/Expectation.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 205,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Expectation.ts~DynamicallyGeneratedExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~DynamicallyGeneratedExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/Expectation.ts~DynamicallyGeneratedExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~DynamicallyGeneratedExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Expectation.ts~DynamicallyGeneratedExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~DynamicallyGeneratedExpectation#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "ExpectationAlias",
    "memberof": "src/Expectation.ts",
    "static": true,
    "longname": "src/Expectation.ts~ExpectationAlias",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/Expectation.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 263,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Expectation.ts~ExpectationAlias",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~ExpectationAlias#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/Expectation.ts~ExpectationAlias",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~ExpectationAlias#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Expectation.ts~ExpectationAlias",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Expectation.ts~ExpectationAlias#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 145,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/expectations/and.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\nimport { match } from 'tiny-types';\nimport { Expectation } from '../Expectation';\nimport { ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function and<Actual>(...expectations: Array<Expectation<any, Actual>>): Expectation<any, Actual> {\n    return new And(expectations);\n}\n\n/**\n * @package\n */\nclass And<Actual> extends Expectation<any, Actual> {\n    constructor(private readonly expectations: Array<Expectation<any, Actual>>) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<any, Actual>> {\n\n        return (actual: any) =>\n            this.expectations.reduce(\n                (previous, current) =>\n                    previous.then(outcome =>\n                        match(outcome)\n                            .when(ExpectationNotMet, o => o)\n                            .else(_ => current.answeredBy(actor)(actual)),\n                ),\n                Promise.resolve(void 0),\n            );\n    }\n\n    toString(): string {\n        return this.expectations.map(assertion => assertion.toString()).join(' and ');\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/and.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "and",
    "memberof": "src/expectations/and.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/and.ts~and",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{and}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "expectations",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "And",
    "memberof": "src/expectations/and.ts",
    "static": true,
    "longname": "src/expectations/and.ts~And",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/and.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/and.ts~And",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/and.ts~And#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/and.ts~And",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/and.ts~And#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/and.ts~And",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/and.ts~And#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/expectations/contain.ts",
    "content": "import { Answerable } from '@serenity-js/core';\nimport { equal } from 'tiny-types/lib/objects'; // tslint:disable-line:no-submodule-imports\n\nimport { Expectation } from '../Expectation';\n\nexport function contain<Item>(expected: Answerable<Item>): Expectation<Item, Item[]> {\n    return Expectation.thatActualShould<Item, Item[]>('contain', expected)\n        .soThat((actualValue, expectedValue) => !! ~ actualValue.findIndex(av => equal(av, expectedValue)));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/contain.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "contain",
    "memberof": "src/expectations/contain.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/contain.ts~contain",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{contain}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/expectations/containAtLeastOneItemThat.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function containAtLeastOneItemThat<Actual>(expectation: Expectation<any, Actual>): Expectation<any, Actual[]> {\n    return new ContainAtLeastOneItemThatMeetsExpectation(expectation);\n}\n\n/**\n * @package\n */\nclass ContainAtLeastOneItemThatMeetsExpectation<Expected, Actual> extends Expectation<Expected, Actual[]> {\n    constructor(private readonly expectation: Expectation<Expected, Actual>) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual[]) => Promise<Outcome<Expected, Actual[]>> {\n        return (actual: Actual[]) =>\n            actual.length === 0\n                ? Promise.resolve(new ExpectationNotMet(this.toString(), null, actual))\n                : Promise.all(actual.map(item => this.expectation.answeredBy(actor)(item)))\n                    .then(results => results.some(result => result instanceof ExpectationMet)\n                        ? new ExpectationMet(this.toString(), results[0].expected, actual)\n                        : new ExpectationNotMet(this.toString(), results[0].expected, actual),\n                    );\n    }\n\n    toString(): string {\n        return formatted `contain at least one item that does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/containAtLeastOneItemThat.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "containAtLeastOneItemThat",
    "memberof": "src/expectations/containAtLeastOneItemThat.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/containAtLeastOneItemThat.ts~containAtLeastOneItemThat",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{containAtLeastOneItemThat}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "ContainAtLeastOneItemThatMeetsExpectation",
    "memberof": "src/expectations/containAtLeastOneItemThat.ts",
    "static": true,
    "longname": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/containAtLeastOneItemThat.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containAtLeastOneItemThat.ts~ContainAtLeastOneItemThatMeetsExpectation#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/expectations/containItemsWhereEachItem.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function containItemsWhereEachItem<Actual>(expectation: Expectation<any, Actual>): Expectation<any, Actual[]> {\n    return new ContainItemsWhereEachItemMeetsExpectation(expectation);\n}\n\n/**\n * @package\n */\nclass ContainItemsWhereEachItemMeetsExpectation<Expected, Actual> extends Expectation<Expected, Actual[]> {\n    constructor(private readonly expectation: Expectation<Expected, Actual>) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual[]) => Promise<Outcome<Expected, Actual[]>> {\n        return (actual: Actual[]) =>\n            actual.length === 0\n                ? Promise.resolve(new ExpectationNotMet(this.toString(), null, actual))\n                : Promise.all(actual.map(item => this.expectation.answeredBy(actor)(item)))\n                    .then(results => results.every(result => result instanceof ExpectationMet)\n                        ? new ExpectationMet(this.toString(), results[0].expected, actual)\n                        : new ExpectationNotMet(this.toString(), results[0].expected, actual),\n                    );\n    }\n\n    toString(): string {\n        return formatted `contain items where each item does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/containItemsWhereEachItem.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "containItemsWhereEachItem",
    "memberof": "src/expectations/containItemsWhereEachItem.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/containItemsWhereEachItem.ts~containItemsWhereEachItem",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{containItemsWhereEachItem}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "ContainItemsWhereEachItemMeetsExpectation",
    "memberof": "src/expectations/containItemsWhereEachItem.ts",
    "static": true,
    "longname": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/containItemsWhereEachItem.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/containItemsWhereEachItem.ts~ContainItemsWhereEachItemMeetsExpectation#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/expectations/endsWith.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function endsWith(expected: Answerable<string>): Expectation<string> {\n    return Expectation.thatActualShould<string, string>('end with', expected)\n        .soThat((actualValue, expectedValue) => actualValue.endsWith(expectedValue));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/endsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "endsWith",
    "memberof": "src/expectations/endsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/endsWith.ts~endsWith",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{endsWith}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/expectations/equals.ts",
    "content": "import { Answerable } from '@serenity-js/core';\nimport { equal } from 'tiny-types/lib/objects'; // tslint:disable-line:no-submodule-imports\n\nimport { Expectation } from '../Expectation';\n\nexport function equals<Expected>(expectedValue: Answerable<Expected>): Expectation<Expected> {\n    return Expectation.thatActualShould<Expected, Expected>('equal', expectedValue)\n        .soThat((actual, expected) => equal(actual, expected));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/equals.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "equals",
    "memberof": "src/expectations/equals.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/equals.ts~equals",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{equals}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/expectations/includes.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function includes(expected: Answerable<string>): Expectation<string> {\n    return Expectation.thatActualShould<string, string>('include', expected)\n        .soThat((actualValue, expectedValue) => actualValue.includes(expectedValue));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/includes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "includes",
    "memberof": "src/expectations/includes.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/includes.ts~includes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{includes}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/expectations/index.ts",
    "content": "export * from './and';\nexport * from './contain';\nexport * from './containAtLeastOneItemThat';\nexport * from './containItemsWhereEachItem';\nexport * from './endsWith';\nexport * from './equals';\nexport * from './includes';\nexport * from './isAfter';\nexport * from './isBefore';\nexport * from './isGreaterThan';\nexport * from './isLessThan';\nexport * from './matches';\nexport * from './not';\nexport * from './or';\nexport * from './property';\nexport * from './startsWith';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/expectations/isAfter.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function isAfter(expected: Answerable<Date>): Expectation<Date> {\n    return Expectation.thatActualShould<Date, Date>('have value that is after', expected)\n        .soThat((actualValue, expectedValue) => actualValue.getTime() > expectedValue.getTime());\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/isAfter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "isAfter",
    "memberof": "src/expectations/isAfter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isAfter.ts~isAfter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{isAfter}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/expectations/isBefore.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function isBefore(expected: Answerable<Date>): Expectation<Date> {\n    return Expectation.thatActualShould<Date, Date>('have value that is before', expected)\n        .soThat((actualValue, expectedValue) => actualValue.getTime() < expectedValue.getTime());\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/isBefore.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "isBefore",
    "memberof": "src/expectations/isBefore.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isBefore.ts~isBefore",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{isBefore}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/expectations/isGreaterThan.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function isGreaterThan(expected: Answerable<number>): Expectation<number> {\n    return Expectation.thatActualShould<number, number>('have value greater than', expected)\n        .soThat((actualValue, expectedValue) => actualValue > expectedValue);\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/isGreaterThan.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "isGreaterThan",
    "memberof": "src/expectations/isGreaterThan.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isGreaterThan.ts~isGreaterThan",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{isGreaterThan}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/expectations/isLessThan.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function isLessThan(expected: Answerable<number>): Expectation<number> {\n    return Expectation.thatActualShould<number, number>(`have value that's less than`, expected)\n        .soThat((actualValue, expectedValue) => actualValue < expectedValue);\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/isLessThan.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "isLessThan",
    "memberof": "src/expectations/isLessThan.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isLessThan.ts~isLessThan",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{isLessThan}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/expectations/matches.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function matches(expected: Answerable<RegExp>): Expectation<RegExp, string> {\n    return Expectation.thatActualShould<RegExp, string>('match', expected)\n        .soThat((actualValue, expectedValue) => expectedValue.test(actualValue));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/matches.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "matches",
    "memberof": "src/expectations/matches.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/matches.ts~matches",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{matches}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/expectations/not.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\nimport { match } from 'tiny-types';\n\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function not<Expected, Actual>(assertion: Expectation<Expected, Actual>): Expectation<Expected, Actual> {\n    return new Not<Expected, Actual>(assertion);\n}\n\n/**\n * @package\n */\nclass Not<Expected, Actual> extends Expectation<Expected, Actual> {\n    constructor(private readonly expectation: Expectation<Expected, Actual>) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<Expected, Actual>> {\n\n        return (actual: any) =>\n            this.expectation.answeredBy(actor)(actual)\n                .then((outcome: Outcome<Expected, Actual>) =>\n                    match<Outcome<Expected, Actual>, Outcome<Expected, Actual>>(outcome)\n                        .when(ExpectationMet, o => new ExpectationNotMet(this.flipped(this.expectation.toString()), o.expected, o.actual))\n                        .else(o => new ExpectationMet(this.flipped(this.expectation.toString()), o.expected, o.actual)));\n    }\n\n    toString(): string {\n        return this.flipped(this.expectation.toString());\n    }\n\n    private flipped(message: string): string {\n        return message.startsWith('not ')\n            ? message.substring(4)\n            : `not ${ message }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/not.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "not",
    "memberof": "src/expectations/not.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/not.ts~not",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{not}",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "assertion",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "Not",
    "memberof": "src/expectations/not.ts",
    "static": true,
    "longname": "src/expectations/not.ts~Not",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/not.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/not.ts~Not",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/not.ts~Not#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/not.ts~Not",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/not.ts~Not#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/not.ts~Not",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/not.ts~Not#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "flipped",
    "memberof": "src/expectations/not.ts~Not",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/not.ts~Not#flipped",
    "access": "private",
    "description": " ",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/expectations/or.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function or<Actual>(...assertions: Array<Expectation<any, Actual>>): Expectation<any, Actual> {\n    return new Or(assertions);\n}\n\n/**\n * @package\n */\nclass Or<Actual> extends Expectation<any, Actual> {\n    private static readonly Separator = ' or ';\n\n    constructor(private readonly expectations: Array<Expectation<any, Actual>>) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<any, Actual>> {\n\n        return (actual: any) =>\n            this.expectations.reduce(\n                (previous, current) =>\n                    previous.then((outcomesSoFar: Array<Outcome<any, Actual>>) =>\n                        current.answeredBy(actor)(actual)\n                            .then(outcome => outcomesSoFar.concat(outcome)),        // todo: should stop on the first met expectation\n                        ),\n                Promise.resolve([]),\n            ).\n            then((outcomes: Array<Outcome<any, Actual>>) => {\n\n                const\n                    unmetExpectations = outcomes.filter(outcome => outcome instanceof ExpectationNotMet),\n                    message = outcomes.map(outcome => outcome.message).join(Or.Separator);\n\n                return unmetExpectations.length === this.expectations.length\n                    ? new ExpectationNotMet(message, outcomes[0].expected, outcomes[0].actual)\n                    : new ExpectationMet(message, outcomes[0].expected, outcomes[0].actual);\n            });\n    }\n\n    toString(): string {\n        return this.expectations\n            .map(assertion => assertion.toString())\n            .join(Or.Separator);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/or.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "or",
    "memberof": "src/expectations/or.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/or.ts~or",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{or}",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "assertions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "Or",
    "memberof": "src/expectations/or.ts",
    "static": true,
    "longname": "src/expectations/or.ts~Or",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/or.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "Separator",
    "memberof": "src/expectations/or.ts~Or",
    "static": true,
    "longname": "src/expectations/or.ts~Or.Separator",
    "access": "private",
    "description": " ",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/or.ts~Or",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/or.ts~Or#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/or.ts~Or",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/or.ts~Or#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/or.ts~Or",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/or.ts~Or#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/expectations/property.ts",
    "content": "import { AnswersQuestions } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet, ExpectationNotMet, Outcome } from '../outcomes';\n\nexport function property<Actual, Property extends keyof Actual>(\n    propertyName: Property,\n    expectation: Expectation<any, Actual[Property]>,\n): Expectation<Actual[Property], Actual> {\n    return new HasProperty(propertyName, expectation);\n}\n\n/**\n * @package\n */\nclass HasProperty<Property extends keyof Actual, Actual> extends Expectation<Actual[Property], Actual> {\n    constructor(\n        private readonly propertyName: Property,\n        private readonly expectation: Expectation<any, Actual[Property]>,\n    ) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<Actual[Property], any>> {\n\n        return (actual: Actual) =>\n            this.expectation.answeredBy(actor)(actual[this.propertyName])\n                .then((outcome: Outcome<any, Actual[Property]>) => {\n\n                    return outcome instanceof ExpectationMet\n                        ? new ExpectationMet(this.toString(), outcome.expected, actual[this.propertyName])\n                        : new ExpectationNotMet(this.toString(), outcome.expected, actual[this.propertyName]);\n                });\n    }\n\n    toString(): string {\n        return formatted `have property ${ this.propertyName } that does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/property.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "property",
    "memberof": "src/expectations/property.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/property.ts~property",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{property}",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Property"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "HasProperty",
    "memberof": "src/expectations/property.ts",
    "static": true,
    "longname": "src/expectations/property.ts~HasProperty",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/assertions/src/expectations/property.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/Expectation.js~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/property.ts~HasProperty",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/property.ts~HasProperty#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/property.ts~HasProperty",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/property.ts~HasProperty#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/property.ts~HasProperty",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/property.ts~HasProperty#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/expectations/startsWith.ts",
    "content": "import { Answerable } from '@serenity-js/core';\n\nimport { Expectation } from '../Expectation';\n\nexport function startsWith(expected: Answerable<string>): Expectation<string> {\n    return Expectation.thatActualShould<string, string>('start with', expected)\n        .soThat((actualValue, expectedValue) => actualValue.startsWith(expectedValue));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/expectations/startsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "startsWith",
    "memberof": "src/expectations/startsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/startsWith.ts~startsWith",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions/lib/expectations",
    "importStyle": "{startsWith}",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './Check';\nexport * from './Expectation';\nexport * from './expectations';\nexport * from './Ensure';\nexport * from './outcomes';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/outcomes.ts",
    "content": "import { TinyType } from 'tiny-types';\n\nexport class Outcome<Expected, Actual> extends TinyType {\n    constructor(\n        public readonly message: string,\n        public readonly expected: Expected,\n        public readonly actual: Actual,\n    ) {\n        super();\n    }\n}\n\nexport class ExpectationMet<Expected, Actual> extends Outcome<Expected, Actual> {}\n\nexport class ExpectationNotMet<Expected, Actual> extends Outcome<Expected, Actual> {}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/src/outcomes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "Outcome",
    "memberof": "src/outcomes.ts",
    "static": true,
    "longname": "src/outcomes.ts~Outcome",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{Outcome}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/outcomes.ts~Outcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "ExpectationMet",
    "memberof": "src/outcomes.ts",
    "static": true,
    "longname": "src/outcomes.ts~ExpectationMet",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{ExpectationMet}",
    "description": " ",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "ExpectationNotMet",
    "memberof": "src/outcomes.ts",
    "static": true,
    "longname": "src/outcomes.ts~ExpectationNotMet",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/assertions",
    "importStyle": "{ExpectationNotMet}",
    "description": " ",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a Node.js library designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\n## Serenity/JS Assertions\n\nAn assertion library implementing the Screenplay Pattern.\n\n### Performing verifications using `Ensure`\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Ensure, endsWith } from '@serenity-js/assertions';\nimport { Website } from '@serenity-js/protractor';\n\nconst actor = actorCalled('Erica');\n\nactor.attemptsTo(\n    Ensure.that(Website.title(), endsWith('Serenity/JS'))\n);\n```\n\n### Controlling execution flow using `Check`\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Check } from '@serenity-js/assertions'; \nimport { Click, isVisible } from '@serenity-js/protractor';\n\nactorCalled('Erica').attemptsTo(\n    Check.whether(NewsletterModal, isVisible())\n        .andIfSo(Click.on(CloseModalButton)),\n);\n```\n\n### Synchronising the test with the System Under Test using `Wait`\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Click, isVisible, Wait } from '@serenity-js/protractor';\n\nactorCalled('Erica').attemptsTo(\n    Wait.until(CloseModalButton, isVisible()),\n    Click.on(CloseModalButton)\n);\n```\n\n### Defining custom expectations using `Expectation.thatActualShould`\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Expectation, Ensure } from '@serenity-js/assertions';\n\nfunction isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n    return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n        .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n}\n\nactorCalled('Erica').attemptsTo(\n    Ensure.that(4, isDivisibleBy(2)),\n);\n```\n\n### Composing expectations using `Expectation.to`\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Expectation, Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n\nfunction isWithin(lowerBound: number, upperBound: number) {\n    return Expectation\n        .to(`have value within ${ lowerBound } and ${ upperBound }`)\n        .soThatActual(and(\n           or(isGreaterThan(lowerBound), equals(lowerBound)),\n           or(isLessThan(upperBound), equals(upperBound)),\n        ));\n}\n\nactorCalled('Erica').attemptsTo(\n    Ensure.that(5, isWithin(3, 6)),\n);\n```\n\n\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/assertions\",\n  \"version\": \"2.1.1\",\n  \"description\": \"Screenplay-style assertion library\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"serenity-js\",\n    \"cucumber\",\n    \"tdd\",\n    \"bdd\",\n    \"test\",\n    \"testing\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"tslint --project tsconfig-lint.json --config ../../tslint.json --format stylish\",\n    \"test\": \"nyc --report-dir ../../target/coverage/assertions mocha --config ../../.mocharc.yml 'spec/**/*.spec.*'\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \">= 8\",\n    \"npm\": \">= 5\"\n  },\n  \"dependencies\": {\n    \"tiny-types\": \"^1.12.2\"\n  },\n  \"peerDependencies\": {\n    \"@serenity-js/core\": \"2.x\"\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.0.7\",\n    \"@integration/testing-tools\": \"2.1.1\",\n    \"@serenity-js/core\": \"2.1.1\",\n    \"@types/mocha\": \"^7.0.1\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"node_modules\",\n      \"spec\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 218,
    "kind": "testFile",
    "name": "spec/Check.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, Interaction, Log, Note, Question, Task } from '@serenity-js/core';\nimport * as sinon from 'sinon';\nimport { Check, equals, startsWith } from '../src';\n\n/** @test {Check} */\ndescribe('Check', () => {\n\n    const Call = (fn: () => void) => Interaction.where(`#actor calls a function`, actor => fn());\n\n    let spy: sinon.SinonSpy;\n    beforeEach(() => spy = sinon.spy());\n\n    describe('(if branch)', () => {\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        it('makes the actor execute the activities when the expectation is met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', startsWith('Hello'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                        Call(() => spy(true)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(true).callCount(2);\n            }),\n        );\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        it('makes the actor ignore the activities when the expectation is not met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', startsWith('¡Hola'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.not.have.been.called;    // tslint:disable-line:no-unused-expression\n            }),\n        );\n    });\n\n    describe('(if/else branches)', () => {\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        /** @test {Check#otherwise} */\n        it('makes the actor execute the activities when the expectation is met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', startsWith('Hello'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    )\n                    .otherwise(\n                        Call(() => spy(false)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(true).callCount(1);\n            }),\n        );\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        /** @test {Check#otherwise} */\n        it('makes the actor execute the alternative activities when the expectation is not met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', startsWith('¡Hola'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    )\n                    .otherwise(\n                        Call(() => spy(false)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(false).callCount(1);\n            }),\n        );\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/Check.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/Check.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0",
    "access": null,
    "description": "Check",
    "lineNumber": 9,
    "testTargets": [
      "Check"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/Check.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe1",
    "access": null,
    "description": "(if branch)",
    "lineNumber": 16
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/Check.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe1.it2",
    "access": null,
    "description": "makes the actor execute the activities when the expectation is met",
    "lineNumber": 20,
    "testTargets": [
      "Check#andIfSo"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/Check.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe1.it3",
    "access": null,
    "description": "makes the actor ignore the activities when the expectation is not met",
    "lineNumber": 35,
    "testTargets": [
      "Check#andIfSo"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "spec/Check.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe4",
    "access": null,
    "description": "(if/else branches)",
    "lineNumber": 48
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/Check.spec.ts~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe4.it5",
    "access": null,
    "description": "makes the actor execute the activities when the expectation is met",
    "lineNumber": 52,
    "testTargets": [
      "Check#otherwise"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/Check.spec.ts~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Check.spec.ts~describe0.describe4.it6",
    "access": null,
    "description": "makes the actor execute the alternative activities when the expectation is not met",
    "lineNumber": 70,
    "testTargets": [
      "Check#otherwise"
    ]
  },
  {
    "__docId__": 226,
    "kind": "testFile",
    "name": "spec/Ensure.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent, stage } from '@integration/testing-tools';\nimport { actorCalled, Answerable, AnswersQuestions, AssertionError, configure, LogicError, Question, RuntimeError, TestCompromisedError } from '@serenity-js/core';\nimport { ActivityRelatedArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { Name } from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\nimport { Ensure, equals, Expectation, Outcome } from '../src';\nimport { isIdenticalTo, p, q } from './fixtures';\n\n/** @test {Ensure} */\ndescribe('Ensure', () => {\n\n    /** @test {Ensure.that} */\n    it('allows the actor to make an assertion', () => {\n        return expect(actorCalled('Enrique').attemptsTo(\n            Ensure.that(4, isIdenticalTo(4)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {Ensure.that} */\n    it('fails the actor flow when the assertion is not met', () => {\n        return expect(actorCalled('Enrique').attemptsTo(\n            Ensure.that(4, isIdenticalTo(7)),\n        )).to.be.rejectedWith(AssertionError, 'Expected 4 to have value identical to 7');\n    });\n\n    /** @test {Ensure.that} */\n    it('provides a description of the assertion being made', () => {\n        expect(Ensure.that(4, isIdenticalTo(7)).toString()).to.equal(`#actor ensures that 4 does have value identical to 7`);\n    });\n\n    /** @test {Ensure.that} */\n    it('provides a description of the assertion being made, while correctly cleaning the output from new line characters', () => {\n        expect(Ensure.that({ person: { name: 'Jan' }}, equals({\n            person: {\n                name: 'Jan',\n            },\n        })).toString()).to.equal(`#actor ensures that { person: { name: 'Jan' } } does equal { person: { name: 'Jan' } }`);\n    });\n\n    given<Answerable<number>>(\n        42,\n        p(42),\n        q(42),\n        q(p(42)),\n    ).\n    /** @test {Ensure.that} */\n    it('allows for the actual to be a Answerable<T> as it compares its value', (actual: Answerable<number>) => {\n        return expect(actorCalled('Enrique').attemptsTo(\n            Ensure.that(actual, isIdenticalTo(42)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {Ensure.that} */\n    it('complains when given an Expectation that doesn\\'t conform to the interface', () => {\n        class BrokenExpectation<Expected, Actual> extends Expectation<Expected, Actual> {\n            answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<Outcome<any, Actual>> {\n                return (actual: Actual) => Promise.resolve(null);\n            }\n\n            toString(): string {\n                return `broken`;\n            }\n        }\n\n        return expect(actorCalled('Enrique').attemptsTo(\n            Ensure.that(4, new BrokenExpectation()),\n        )).to.be.rejectedWith(LogicError, 'An Expectation should return an instance of an Outcome, not null');\n    });\n\n    describe('when emitting an artifact', () => {\n        let recorder;\n        beforeEach(() => {\n\n            recorder = new EventRecorder();\n\n            configure({\n                crew: [ recorder ],\n            });\n        });\n\n        given([{\n            description: 'tiny type',\n            expected: new Name('Alice'),\n            actual: new Name('Bob'),\n            artifact: { expected: 'Name(value=Alice)', actual: 'Name(value=Bob)' },\n        }, {\n            description: 'boolean',\n            expected: true,\n            actual: false,\n            artifact: { expected: 'true', actual: 'false' },\n        }, {\n            description: 'string',\n            expected: 'name',\n            actual: 'not-name',\n            artifact: { expected: `'name'`, actual: `'not-name'` },\n        }, {\n            description: 'list',\n            expected: [{ name: 'Bob' }, { name: 'Alice' }],\n            actual: [{ name: 'Alice' }],\n            artifact: { expected: `[\\n  { name: 'Bob' },\\n  { name: 'Alice' }\\n]`, actual: `[\\n  { name: 'Alice' }\\n]` },\n        }, {\n            description: 'promise',\n            expected: Promise.resolve(true),\n            actual: Promise.resolve(false),\n            artifact: { expected: `true`, actual: `false` },\n        }, {\n            description: 'question',\n            expected: Question.about('some value', actor => true),\n            actual: Question.about('some value', actor => false),\n            artifact: { expected: 'true', actual: 'false' },\n        }]).\n            /** @test {Ensure.that} */\n            it('emits an artifact describing the actual and expected values', ({ actual, expected, artifact }) => {\n\n                return expect(actorCalled('Enrique').attemptsTo(\n                    Ensure.that(actual, equals(expected)),  // we don't care about the expectation itself in this test\n                )).to.be.rejected.then(() =>\n                    PickEvent.from(recorder.events)\n                        .next(ActivityRelatedArtifactGenerated, e => e.artifact.map(value => {\n                            expect(value.expected).to.equal(artifact.expected);\n                            expect(value.actual).to.equal(artifact.actual);\n                        })),\n                );\n            });\n    });\n\n    describe('custom errors', () => {\n\n        it('allows the actor to fail the flow with a custom RuntimeError, embedding the original error', () => {\n            return expect(actorCalled('Enrique').attemptsTo(\n                    Ensure.that(503, equals(200)).otherwiseFailWith(TestCompromisedError),\n                ))\n                .to.be.rejectedWith(TestCompromisedError, 'Expected 503 to equal 200')\n                .then((error: RuntimeError) => {\n                    expect(error.cause).to.be.instanceOf(AssertionError);\n                    expect(error.cause.message).to.be.equal('Expected 503 to equal 200');\n                });\n        });\n\n        it('allows the actor to fail the flow with a custom RuntimeError with a custom error message', () => {\n            return expect(actorCalled('Enrique').attemptsTo(\n                Ensure.that(503, equals(200)).otherwiseFailWith(TestCompromisedError, 'The server is down. Please cheer it up.'),\n            )).to.be.rejectedWith(TestCompromisedError, 'The server is down. Please cheer it up.');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/Ensure.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "spec/Ensure.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7",
    "access": null,
    "description": "Ensure",
    "lineNumber": 12,
    "testTargets": [
      "Ensure"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.it8",
    "access": null,
    "description": "allows the actor to make an assertion",
    "lineNumber": 15,
    "testTargets": [
      "Ensure.that"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.it9",
    "access": null,
    "description": "fails the actor flow when the assertion is not met",
    "lineNumber": 22,
    "testTargets": [
      "Ensure.that"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.it10",
    "access": null,
    "description": "provides a description of the assertion being made",
    "lineNumber": 29,
    "testTargets": [
      "Ensure.that"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.it11",
    "access": null,
    "description": "provides a description of the assertion being made, while correctly cleaning the output from new line characters",
    "lineNumber": 34,
    "testTargets": [
      "Ensure.that"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.it12",
    "access": null,
    "description": "complains when given an Expectation that doesn't conform to the interface",
    "lineNumber": 56,
    "testTargets": [
      "Ensure.that"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.describe13",
    "access": null,
    "description": "when emitting an artifact",
    "lineNumber": 103
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "spec/Ensure.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.describe14",
    "access": null,
    "description": "custom errors",
    "lineNumber": 160
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "spec/Ensure.spec.ts~describe7.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.describe14.it15",
    "access": null,
    "description": "allows the actor to fail the flow with a custom RuntimeError, embedding the original error",
    "lineNumber": 162
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/Ensure.spec.ts~describe7.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Ensure.spec.ts~describe7.describe14.it16",
    "access": null,
    "description": "allows the actor to fail the flow with a custom RuntimeError with a custom error message",
    "lineNumber": 173
  },
  {
    "__docId__": 237,
    "kind": "testFile",
    "name": "spec/Expectation.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, Answerable, AssertionError } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { and, Ensure, equals, Expectation, isGreaterThan, isLessThan, or } from '../src';\nimport { isIdenticalTo, p, q } from './fixtures';\n\n/** @test {Expectation} */\ndescribe('Expectation', () => {\n\n    describe('allows to easily define an assertion, which', () => {\n\n        /**\n         * @test {Expectation.that}\n         * @test {Ensure.that}\n         */\n        it('allows the actor flow to continue when the assertion passes', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that(4, isIdenticalTo(4)),\n            )).to.be.fulfilled;\n        });\n\n        /**\n         * @test {Expectation.that}\n         * @test {Ensure.that}\n         */\n        it('stops the actor flow when the assertion fails', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that(4, isIdenticalTo('4' as any)),\n            )).to.be.rejectedWith(AssertionError, \"Expected 4 to have value identical to '4'\");\n        });\n\n        given<Answerable<number>>(\n            42,\n            p(42),\n            q(42),\n            q(p(42)),\n        ).\n        it('allows for the expected value to be defined as any Answerable<T>', (expected: Answerable<number>) => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that(42, isIdenticalTo(expected)),\n            )).to.be.fulfilled;\n        });\n    });\n\n    describe('allows to alias an expectation, so that the alias', () => {\n\n        function isWithin(lowerBound: number, upperBound: number) {\n            return Expectation\n                .to(`have value within ${ lowerBound } and ${ upperBound }`)\n                .soThatActual(and(\n                   or(isGreaterThan(lowerBound), equals(lowerBound)),\n                   or(isLessThan(upperBound), equals(upperBound)),\n                ));\n        }\n\n        /** @test {Expectation.to} */\n        it('contributes to a human-readable description', () => {\n            expect(Ensure.that(5, isWithin(3, 6)).toString())\n                .to.equal(`#actor ensures that 5 does have value within 3 and 6`);\n        });\n\n        /** @test {Expectation.to} */\n        it('provides a precise failure message when the expectation is not met', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that(9, isWithin(7, 8)),\n            )).to.be.rejectedWith(AssertionError, `Expected 9 to have value that's less than 8 or equal 8`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/Expectation.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "spec/Expectation.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17",
    "access": null,
    "description": "Expectation",
    "lineNumber": 10,
    "testTargets": [
      "Expectation"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "spec/Expectation.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe18",
    "access": null,
    "description": "allows to easily define an assertion, which",
    "lineNumber": 12
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/Expectation.spec.ts~describe17.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe18.it19",
    "access": null,
    "description": "allows the actor flow to continue when the assertion passes",
    "lineNumber": 18,
    "testTargets": [
      "Expectation.that",
      "Ensure.that"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/Expectation.spec.ts~describe17.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe18.it20",
    "access": null,
    "description": "stops the actor flow when the assertion fails",
    "lineNumber": 28,
    "testTargets": [
      "Expectation.that",
      "Ensure.that"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "spec/Expectation.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe21",
    "access": null,
    "description": "allows to alias an expectation, so that the alias",
    "lineNumber": 47
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/Expectation.spec.ts~describe17.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe21.it22",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 70,
    "testTargets": [
      "Expectation.to"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/Expectation.spec.ts~describe17.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Expectation.spec.ts~describe17.describe21.it23",
    "access": null,
    "description": "provides a precise failure message when the expectation is not met",
    "lineNumber": 76,
    "testTargets": [
      "Expectation.to"
    ]
  },
  {
    "__docId__": 245,
    "kind": "testFile",
    "name": "spec/expectations/and.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { and, endsWith, Ensure, startsWith } from '../../src';\n\ndescribe('and', () => {\n\n    /** @test {and} */\n    it('allows for the actor flow to continue when the \"actual\" meets all the expectations', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', and(startsWith('Hello'), endsWith('World!'))),\n        )).to.be.fulfilled;\n    });\n\n    describe('breaks the actor flow when \"actual\"', () => {\n\n        /** @test {and} */\n        it('does not meet the first expectation', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that('Hello World!', and(startsWith('¡Hola'), endsWith('World!'))),\n            )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to start with '¡Hola'`)\n                .then((error: AssertionError) => {\n                    expect(error.expected.toString()).to.equal('¡Hola');\n                    expect(error.actual).to.equal('Hello World!');\n                });\n        });\n\n        /** @test {and} */\n        it('does not meet the second expectation', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that('Hello World!', and(startsWith('Hello'), endsWith('Mundo!'))),\n            )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to end with 'Mundo!`)\n                .then((error: AssertionError) => {\n                    expect(error.expected.toString()).to.equal('Mundo!');\n                    expect(error.actual).to.equal('Hello World!');\n                });\n        });\n    });\n\n    /** @test {and} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello', and(startsWith('H'), endsWith('o'))).toString())\n            .to.equal(`#actor ensures that 'Hello' does start with 'H' and end with 'o'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/and.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "spec/expectations/and.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24",
    "access": null,
    "description": "and",
    "lineNumber": 7
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/expectations/and.spec.ts~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24.it25",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" meets all the expectations",
    "lineNumber": 10,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/expectations/and.spec.ts~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24.describe26",
    "access": null,
    "description": "breaks the actor flow when \"actual\"",
    "lineNumber": 16
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/expectations/and.spec.ts~describe24.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24.describe26.it27",
    "access": null,
    "description": "does not meet the first expectation",
    "lineNumber": 19,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/expectations/and.spec.ts~describe24.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24.describe26.it28",
    "access": null,
    "description": "does not meet the second expectation",
    "lineNumber": 30,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/expectations/and.spec.ts~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/and.spec.ts~describe24.it29",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 42,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "name": "spec/expectations/contain.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { contain, Ensure } from '../../src';\n\ndescribe('contain', () => {\n    /** @test {contains} */\n    it('allows for the actor flow to continue when the \"actual\" contains the \"expected\" text', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([ { word: 'Hello' }, { word: 'World' } ], contain({ word: 'World' })),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {contains} */\n    it('breaks the actor flow when \"actual\" does not contain the \"expected\" text', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([ 'Hello', 'World' ], contain('Mundo')),\n        )).to.be.rejectedWith(AssertionError, `Expected [ 'Hello', 'World' ] to contain 'Mundo'`)\n            .then((error: AssertionError) => {\n                expect(error.expected.toString()).to.equal('Mundo');\n                expect(error.actual).to.deep.equal([ 'Hello', 'World' ]);\n            });\n    });\n\n    /** @test {contains} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that([ 1, 2, 3 ], contain(2)).toString())\n            .to.equal(`#actor ensures that [ 1, 2, 3 ] does contain 2`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/contain.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "spec/expectations/contain.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/contain.spec.ts~describe30",
    "access": null,
    "description": "contain",
    "lineNumber": 7
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/expectations/contain.spec.ts~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/contain.spec.ts~describe30.it31",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" contains the \"expected\" text",
    "lineNumber": 9,
    "testTargets": [
      "contains"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/expectations/contain.spec.ts~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/contain.spec.ts~describe30.it32",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not contain the \"expected\" text",
    "lineNumber": 16,
    "testTargets": [
      "contains"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/expectations/contain.spec.ts~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/contain.spec.ts~describe30.it33",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 27,
    "testTargets": [
      "contains"
    ]
  },
  {
    "__docId__": 257,
    "kind": "testFile",
    "name": "spec/expectations/containAtLeastOneItemThat.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError, Question } from '@serenity-js/core';\nimport { containAtLeastOneItemThat, Ensure, equals, isGreaterThan } from '../../src';\n\ndescribe('containAtLeastOneItemThat', () => {\n\n    /** @test {containAtLeastOneItemThat} */\n    it('allows for the actor flow to continue when the \"actual\" includes at least one item that meets the expectation', () => {\n        return actorCalled('Astrid').attemptsTo(\n            Ensure.that([ 0, 1, 2 ], containAtLeastOneItemThat(isGreaterThan(1))),\n        );\n    });\n\n    /** @test {containAtLeastOneItemThat} */\n    it('breaks the actor flow when \"actual\" does not include at least one item that meets the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([ 0, 1, 2 ], containAtLeastOneItemThat(equals(7))),\n        )).to.be.rejectedWith(AssertionError, `Expected [ 0, 1, 2 ] to contain at least one item that does equal 7`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(7);\n                expect(error.actual).to.deep.equal([ 0, 1, 2 ]);\n            });\n    });\n\n    /** @test {containAtLeastOneItemThat} */\n    it('breaks the actor flow when \"actual\" is an empty list', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([], containAtLeastOneItemThat(equals(42))),\n        )).to.be.rejectedWith(AssertionError, `Expected [ ] to contain at least one item that does equal 42`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(null);\n                expect(error.actual).to.deep.equal([ ]);\n            });\n    });\n\n    /** @test {atLeastOne} */\n    it('contributes to a human-readable description', () => {\n        const numbers = () => Question.about('list of numbers', actor => [ 0, 1, 2 ]);\n\n        expect(Ensure.that(numbers(), containAtLeastOneItemThat(isGreaterThan(1))).toString())\n            .to.equal(`#actor ensures that list of numbers does contain at least one item that does have value greater than 1`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/containAtLeastOneItemThat.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "spec/expectations/containAtLeastOneItemThat.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34",
    "access": null,
    "description": "containAtLeastOneItemThat",
    "lineNumber": 7
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34.it35",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" includes at least one item that meets the expectation",
    "lineNumber": 10,
    "testTargets": [
      "containAtLeastOneItemThat"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34.it36",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not include at least one item that meets the expectation",
    "lineNumber": 17,
    "testTargets": [
      "containAtLeastOneItemThat"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34.it37",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is an empty list",
    "lineNumber": 28,
    "testTargets": [
      "containAtLeastOneItemThat"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containAtLeastOneItemThat.spec.ts~describe34.it38",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 39,
    "testTargets": [
      "atLeastOne"
    ]
  },
  {
    "__docId__": 263,
    "kind": "testFile",
    "name": "spec/expectations/containItemsWhereEachItem.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError, Question } from '@serenity-js/core';\nimport { containItemsWhereEachItem, Ensure, equals, isGreaterThan } from '../../src';\n\ndescribe('containItemsWhereEachItem', () => {\n\n    /** @test {containItemsWhereEachItem} */\n    it('allows for the actor flow to continue when the \"actual\" includes only those items that meet the expectation', () => {\n        return actorCalled('Astrid').attemptsTo(\n            Ensure.that([ 1, 2, 3 ], containItemsWhereEachItem(isGreaterThan(0))),\n        );\n    });\n\n    /** @test {containItemsWhereEachItem} */\n    it('breaks the actor flow when \"actual\" contains at least one item that does not meet the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([ 7, 7, 2 ], containItemsWhereEachItem(equals(7))),\n        )).to.be.rejectedWith(AssertionError, `Expected [ 7, 7, 2 ] to contain items where each item does equal 7`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(7);\n                expect(error.actual).to.deep.equal([ 7, 7, 2 ]);\n            });\n    });\n\n    /** @test {containItemsWhereEachItem} */\n    it('breaks the actor flow when \"actual\" is an empty list', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that([], containItemsWhereEachItem(equals(42))),\n        )).to.be.rejectedWith(AssertionError, `Expected [ ] to contain items where each item does equal 42`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(null);\n                expect(error.actual).to.deep.equal([]);\n            });\n    });\n\n    /** @test {atLeastOne} */\n    it('contributes to a human-readable description', () => {\n        const numbers = () => Question.about('list of numbers', actor => [ 0, 1, 2 ]);\n\n        expect(Ensure.that(numbers(), containItemsWhereEachItem(isGreaterThan(1))).toString())\n            .to.equal(`#actor ensures that list of numbers does contain items where each item does have value greater than 1`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/containItemsWhereEachItem.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/expectations/containItemsWhereEachItem.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39",
    "access": null,
    "description": "containItemsWhereEachItem",
    "lineNumber": 7
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39.it40",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" includes only those items that meet the expectation",
    "lineNumber": 10,
    "testTargets": [
      "containItemsWhereEachItem"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39.it41",
    "access": null,
    "description": "breaks the actor flow when \"actual\" contains at least one item that does not meet the expectation",
    "lineNumber": 17,
    "testTargets": [
      "containItemsWhereEachItem"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39.it42",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is an empty list",
    "lineNumber": 28,
    "testTargets": [
      "containItemsWhereEachItem"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/containItemsWhereEachItem.spec.ts~describe39.it43",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 39,
    "testTargets": [
      "atLeastOne"
    ]
  },
  {
    "__docId__": 269,
    "kind": "testFile",
    "name": "spec/expectations/endsWith.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { endsWith, Ensure } from '../../src';\n\ndescribe('endsWith', () => {\n\n    /** @test {endsWith} */\n    it('allows for the actor flow to continue when the \"actual\" ends with \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', endsWith('World!')),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {endsWith} */\n    it('breaks the actor flow when \"actual\" does not end with \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', endsWith('Mundo!')),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to end with 'Mundo!'`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal('Mundo!');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {endsWith} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello', endsWith('o')).toString())\n            .to.equal(`#actor ensures that 'Hello' does end with 'o'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/endsWith.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "spec/expectations/endsWith.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/endsWith.spec.ts~describe44",
    "access": null,
    "description": "endsWith",
    "lineNumber": 7
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/expectations/endsWith.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/endsWith.spec.ts~describe44.it45",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" ends with \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/expectations/endsWith.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/endsWith.spec.ts~describe44.it46",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not end with \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/expectations/endsWith.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/endsWith.spec.ts~describe44.it47",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 274,
    "kind": "testFile",
    "name": "spec/expectations/equals.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { TinyTypeOf } from 'tiny-types';\nimport { Ensure, equals } from '../../src';\n\n/** @test {equals} */\ndescribe('equals', () => {\n\n    class Name extends TinyTypeOf<string>() {}\n\n    given([\n        { description: 'string',    expected: 'hello',          actual: 'hello'             },\n        { description: 'number',    expected: 42,               actual: 42                  },\n        { description: 'boolean',   expected: false,            actual: false               },\n        { description: 'object',    expected: { k: 'v' },       actual: { k: 'v' }          },\n        { description: 'TinyType',  expected: new Name('Jan'),  actual: new Name('Jan')     },\n        { description: 'array',     expected: [ null, 2, '3' ], actual: [ null, 2, '3' ]    },\n        { description: 'Date',      expected: new Date('Jan 27, 2019'), actual: new Date('Jan 27, 2019') },\n    ]).\n    it('compares the value of \"actual\" and \"expected\" and allows for the actor flow to continue when they match', ({ actual, expected }) => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(actual, equals(expected)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {equals} */\n    it('breaks the actor flow when the values of \"actual\" and \"expected\" don\\'t match', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(27, equals(42)),\n        )).to.be.rejectedWith(AssertionError, 'Expected 27 to equal 42')\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(42);\n                expect(error.actual).to.equal(27);\n            });\n    });\n\n    /** @test {equals} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that(27, equals(42)).toString()).to.equal('#actor ensures that 27 does equal 42');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/equals.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "spec/expectations/equals.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/equals.spec.ts~describe48",
    "access": null,
    "description": "equals",
    "lineNumber": 10,
    "testTargets": [
      "equals"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/expectations/equals.spec.ts~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/equals.spec.ts~describe48.it49",
    "access": null,
    "description": "breaks the actor flow when the values of \"actual\" and \"expected\" don't match",
    "lineNumber": 37,
    "testTargets": [
      "equals"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/expectations/equals.spec.ts~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/equals.spec.ts~describe48.it50",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 48,
    "testTargets": [
      "equals"
    ]
  },
  {
    "__docId__": 278,
    "kind": "testFile",
    "name": "spec/expectations/includes.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, includes } from '../../src';\n\ndescribe('includes', () => {\n\n    /** @test {includes} */\n    it('allows for the actor flow to continue when the \"actual\" includes the \"expected\" text', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', includes('World')),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {includes} */\n    it('breaks the actor flow when \"actual\" does not include the \"expected\" text', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', includes('Mundo')),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to include 'Mundo'`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal('Mundo');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {includes} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello beautiful world', includes('beautiful')).toString())\n            .to.equal(`#actor ensures that 'Hello beautiful world' does include 'beautiful'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/includes.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "spec/expectations/includes.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/includes.spec.ts~describe51",
    "access": null,
    "description": "includes",
    "lineNumber": 7
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/expectations/includes.spec.ts~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/includes.spec.ts~describe51.it52",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" includes the \"expected\" text",
    "lineNumber": 10,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/expectations/includes.spec.ts~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/includes.spec.ts~describe51.it53",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not include the \"expected\" text",
    "lineNumber": 17,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/expectations/includes.spec.ts~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/includes.spec.ts~describe51.it54",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 283,
    "kind": "testFile",
    "name": "spec/expectations/isAfter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, isAfter } from '../../src';\n\ndescribe('isAfter', () => {\n\n    /** @test {isAfter} */\n    it('allows for the actor flow to continue when the \"actual\" is after the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(new Date('1995-01-01'), isAfter(new Date('1985-01-01'))),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {isAfter} */\n    it('breaks the actor flow when \"actual\" is not after the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(new Date('1985-01-01'), isAfter(new Date('1995-01-01'))),\n        )).to.be.rejectedWith(AssertionError, `Expected 1985-01-01T00:00:00.000Z to have value that is after 1995-01-01T00:00:00.000Z`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.deep.equal(new Date('1995-01-01'));\n                expect(error.actual).to.deep.equal(new Date('1985-01-01'));\n            });\n    });\n\n    /** @test {isAfter} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that(new Date('1995-01-01'), isAfter(new Date('1985-01-01'))).toString())\n            .to.equal(`#actor ensures that 1995-01-01T00:00:00.000Z does have value that is after 1985-01-01T00:00:00.000Z`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/isAfter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "spec/expectations/isAfter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isAfter.spec.ts~describe55",
    "access": null,
    "description": "isAfter",
    "lineNumber": 7
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/expectations/isAfter.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isAfter.spec.ts~describe55.it56",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" is after the \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "isAfter"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/expectations/isAfter.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isAfter.spec.ts~describe55.it57",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is not after the \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "isAfter"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/expectations/isAfter.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isAfter.spec.ts~describe55.it58",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "isAfter"
    ]
  },
  {
    "__docId__": 288,
    "kind": "testFile",
    "name": "spec/expectations/isBefore.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, isBefore } from '../../src';\n\ndescribe('isBefore', () => {\n\n    /** @test {isBefore} */\n    it('allows for the actor flow to continue when the \"actual\" is before the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(new Date('1985-01-01'), isBefore(new Date('1995-01-01'))),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {isBefore} */\n    it('breaks the actor flow when \"actual\" is not before the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(new Date('1995-01-01'), isBefore(new Date('1985-01-01'))),\n        )).to.be.rejectedWith(AssertionError, `Expected 1995-01-01T00:00:00.000Z to have value that is before 1985-01-01T00:00:00.000Z`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.deep.equal(new Date('1985-01-01'));\n                expect(error.actual).to.deep.equal(new Date('1995-01-01'));\n            });\n    });\n\n    /** @test {isBefore} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that(new Date('1985-01-01'), isBefore(new Date('1995-01-01'))).toString())\n            .to.equal(`#actor ensures that 1985-01-01T00:00:00.000Z does have value that is before 1995-01-01T00:00:00.000Z`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/isBefore.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "spec/expectations/isBefore.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isBefore.spec.ts~describe59",
    "access": null,
    "description": "isBefore",
    "lineNumber": 7
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/expectations/isBefore.spec.ts~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isBefore.spec.ts~describe59.it60",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" is before the \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "isBefore"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/expectations/isBefore.spec.ts~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isBefore.spec.ts~describe59.it61",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is not before the \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "isBefore"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/expectations/isBefore.spec.ts~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isBefore.spec.ts~describe59.it62",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "isBefore"
    ]
  },
  {
    "__docId__": 293,
    "kind": "testFile",
    "name": "spec/expectations/isGreaterThan.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, isGreaterThan } from '../../src';\n\ndescribe('isGreaterThan', () => {\n\n    /** @test {isGreaterThan} */\n    it('allows for the actor flow to continue when the \"actual\" is greater than \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(5, isGreaterThan(4)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {isGreaterThan} */\n    it('breaks the actor flow when \"actual\" is not greater than \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(0, isGreaterThan(2)),\n        )).to.be.rejectedWith(AssertionError, `Expected 0 to have value greater than 2`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(2);\n                expect(error.actual).to.equal(0);\n            });\n    });\n\n    /** @test {isGreaterThan} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that(5, isGreaterThan(4)).toString())\n            .to.equal(`#actor ensures that 5 does have value greater than 4`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/isGreaterThan.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "spec/expectations/isGreaterThan.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isGreaterThan.spec.ts~describe63",
    "access": null,
    "description": "isGreaterThan",
    "lineNumber": 7
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/expectations/isGreaterThan.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isGreaterThan.spec.ts~describe63.it64",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" is greater than \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/expectations/isGreaterThan.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isGreaterThan.spec.ts~describe63.it65",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is not greater than \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/expectations/isGreaterThan.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isGreaterThan.spec.ts~describe63.it66",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 298,
    "kind": "testFile",
    "name": "spec/expectations/isLessThan.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, isLessThan } from '../../src';\n\ndescribe('isLessThan', () => {\n\n    /** @test {isLessThan} */\n    it('allows for the actor flow to continue when the \"actual\" is less than \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(2, isLessThan(3)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {isLessThan} */\n    it('breaks the actor flow when \"actual\" is not less than \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that(3, isLessThan(2)),\n        )).to.be.rejectedWith(AssertionError, `Expected 3 to have value that's less than 2`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(2);\n                expect(error.actual).to.equal(3);\n            });\n    });\n\n    /** @test {isLessThan} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that(2, isLessThan(3)).toString())\n            .to.equal(`#actor ensures that 2 does have value that's less than 3`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/isLessThan.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "spec/expectations/isLessThan.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isLessThan.spec.ts~describe67",
    "access": null,
    "description": "isLessThan",
    "lineNumber": 7
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/expectations/isLessThan.spec.ts~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isLessThan.spec.ts~describe67.it68",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" is less than \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "spec/expectations/isLessThan.spec.ts~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isLessThan.spec.ts~describe67.it69",
    "access": null,
    "description": "breaks the actor flow when \"actual\" is not less than \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/expectations/isLessThan.spec.ts~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isLessThan.spec.ts~describe67.it70",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 303,
    "kind": "testFile",
    "name": "spec/expectations/matches.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, matches } from '../../src';\n\ndescribe('matches', () => {\n\n    /** @test {matches} */\n    it('allows for the actor flow to continue when the \"actual\" matches the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', matches(/^[Hh]ello [Ww]orld!?$/)),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {matches} */\n    it('breaks the actor flow when \"actual\" does not match the \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', matches(/mundo$/gi)),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to match /mundo$/gi`)\n            .then((error: AssertionError) => {\n                expect(error.expected.toString()).to.equal('/mundo$/gi');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {matches} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello World!', matches(/^[Hh]ello [Ww]orld!?$/g)).toString())\n            .to.equal(`#actor ensures that 'Hello World!' does match /^[Hh]ello [Ww]orld!?$/g`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/matches.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "spec/expectations/matches.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/matches.spec.ts~describe71",
    "access": null,
    "description": "matches",
    "lineNumber": 7
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/expectations/matches.spec.ts~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/matches.spec.ts~describe71.it72",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" matches the \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "matches"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/expectations/matches.spec.ts~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/matches.spec.ts~describe71.it73",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not match the \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "matches"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "spec/expectations/matches.spec.ts~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/matches.spec.ts~describe71.it74",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "matches"
    ]
  },
  {
    "__docId__": 308,
    "kind": "testFile",
    "name": "spec/expectations/not.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { and, contain, containAtLeastOneItemThat, endsWith, Ensure, equals, Expectation, includes, isGreaterThan, isLessThan, not, or, startsWith } from '../../src';\n\ndescribe('not', () => {\n\n    /** @test {not} */\n    it('allows for the actor flow to continue when the \"actual\" meets the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', not(startsWith('¡Hola'))),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {not} */\n    it('breaks the actor flow when \"actual\" does not meet the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', not(startsWith('Hello'))),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to not start with 'Hello'`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal('Hello');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {not} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello', not(startsWith('o'))).toString())\n            .to.equal(`#actor ensures that 'Hello' does not start with 'o'`);\n    });\n\n    it('flips the outcome of an assertion, but doesn\\'t hide any errors that might have happened while making it', () => {\n        const blowsUp = () => Expectation.thatActualShould('blow up', 'expected').soThat((actual, expected) => { throw new Error('boom'); });\n\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', not(blowsUp())),\n        )).to.be.rejectedWith(Error, `boom`);\n    });\n\n    describe('double negative', () => {\n        /** @test {not} */\n        it('contributes to a human-readable description', () => {\n            expect(Ensure.that('Hello', not(not(startsWith('o')))).toString())\n                .to.equal(`#actor ensures that 'Hello' does start with 'o'`);\n        });\n    });\n\n    describe('when combined with other assertions, such as', () => {\n\n        describe('and,', () => {\n\n            /** @test {not} */\n            /** @test {and} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that(3, not(and(isGreaterThan(2), isLessThan(4)))),\n                )).to.be.rejectedWith(AssertionError, `Expected 3 to not have value greater than 2 and have value that's less than 4`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(4);\n                        expect(error.actual).to.equal(3);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {and} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that(3, not(and(isGreaterThan(2), isLessThan(4)))).toString())\n                    .to.equal(`#actor ensures that 3 does not have value greater than 2 and have value that's less than 4`);\n            });\n        });\n\n        describe('contains,', () => {\n\n            /** @test {not} */\n            /** @test {contains} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that([ 1, 2, 3 ], not(contain(2)),\n                ))).to.be.rejectedWith(AssertionError, `Expected [ 1, 2, 3 ] to not contain 2`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(2);\n                        expect(error.actual).to.deep.equal([ 1, 2, 3 ]);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {contains} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that([ 'H', 'e', 'l', 'l', 'o' ], not(contain('o'))).toString())\n                    .to.equal(`#actor ensures that [ 'H', 'e', 'l', 'l', 'o' ] does not contain 'o'`);\n            });\n        });\n\n        describe('containAtLeastOneItemThat,', () => {\n\n            /** @test {not} */\n            /** @test {containAtLeastOneItemThat} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that([ 1, 2, 3 ], not(containAtLeastOneItemThat(equals(2))),\n                ))).to.be.rejectedWith(AssertionError, `Expected [ 1, 2, 3 ] to not contain at least one item that does equal 2`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(2);\n                        expect(error.actual).to.deep.equal([ 1, 2, 3 ]);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {containAtLeastOneItemThat} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that([ 'H', 'e', 'l', 'l', 'o' ], not(containAtLeastOneItemThat(equals('o')))).toString())\n                    .to.equal(`#actor ensures that [ 'H', 'e', 'l', 'l', 'o' ] does not contain at least one item that does equal 'o'`);\n            });\n        });\n\n        describe('endsWith,', () => {\n\n            /** @test {not} */\n            /** @test {endsWith} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that('Hello', not(endsWith('o'))),\n                )).to.be.rejectedWith(AssertionError, `Expected 'Hello' to not end with 'o'`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal('o');\n                        expect(error.actual).to.equal('Hello');\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {endsWith} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that('Hello', not(endsWith('o'))).toString())\n                    .to.equal(`#actor ensures that 'Hello' does not end with 'o'`);\n            });\n        });\n\n        describe('equals,', () => {\n\n            /** @test {not} */\n            /** @test {equals} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that(true, not(equals(true))),\n                )).to.be.rejectedWith(AssertionError, `Expected true to not equal true`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(true);\n                        expect(error.actual).to.equal(true);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {equals} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that(true, not(equals(true))).toString())\n                    .to.equal(`#actor ensures that true does not equal true`);\n            });\n        });\n\n        describe('includes,', () => {\n\n            /** @test {not} */\n            /** @test {includes} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that('Hello', not(includes('Hello'))),\n                )).to.be.rejectedWith(AssertionError, `Expected 'Hello' to not include 'Hello'`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal('Hello');\n                        expect(error.actual).to.equal('Hello');\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {includes} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that('Hello', not(includes('Hello'))).toString())\n                    .to.equal(`#actor ensures that 'Hello' does not include 'Hello'`);\n            });\n        });\n\n        describe('isGreaterThan,', () => {\n\n            /** @test {not} */\n            /** @test {isGreaterThan} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that(2, not(isGreaterThan(1))),\n                )).to.be.rejectedWith(AssertionError, `Expected 2 to not have value greater than 1`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(1);\n                        expect(error.actual).to.equal(2);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {isGreaterThan} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that(2, not(isGreaterThan(1))).toString())\n                    .to.equal(`#actor ensures that 2 does not have value greater than 1`);\n            });\n        });\n\n        describe('isLessThan,', () => {\n\n            /** @test {not} */\n            /** @test {isLessThan} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that(1, not(isLessThan(2))),\n                )).to.be.rejectedWith(AssertionError, `Expected 1 to not have value that's less than 2`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(2);\n                        expect(error.actual).to.equal(1);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {isLessThan} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that(1, not(isLessThan(2))).toString())\n                    .to.equal(`#actor ensures that 1 does not have value that's less than 2`);\n            });\n        });\n\n        describe('or,', () => {\n\n            /** @test {not} */\n            /** @test {or} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that(1, not(or(isGreaterThan(0), isLessThan(2)))),\n                )).to.be.rejectedWith(AssertionError, `Expected 1 to not have value greater than 0 or have value that's less than 2`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal(0);\n                        expect(error.actual).to.equal(1);\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {or} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that(1, not(isLessThan(2))).toString())\n                    .to.equal(`#actor ensures that 1 does not have value that's less than 2`);\n            });\n        });\n\n        describe('startsWith,', () => {\n\n            /** @test {not} */\n            /** @test {startsWith} */\n            it('produces a sensible error message', () => {\n                return expect(actorCalled('Astrid').attemptsTo(\n                    Ensure.that('Hello', not(startsWith('H'))),\n                )).to.be.rejectedWith(AssertionError, `Expected 'Hello' to not start with 'H'`)\n                    .then((error: AssertionError) => {\n                        expect(error.expected).to.equal('H');\n                        expect(error.actual).to.equal('Hello');\n                    });\n            });\n\n            /** @test {not} */\n            /** @test {startsWith} */\n            it('contributes to a human-readable description', () => {\n                expect(Ensure.that('Hello', not(startsWith('H'))).toString())\n                    .to.equal(`#actor ensures that 'Hello' does not start with 'H'`);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/not.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "spec/expectations/not.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75",
    "access": null,
    "description": "not",
    "lineNumber": 7
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.it76",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" meets the expectation",
    "lineNumber": 10,
    "testTargets": [
      "not"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.it77",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not meet the expectation",
    "lineNumber": 17,
    "testTargets": [
      "not"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.it78",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "not"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.it79",
    "access": null,
    "description": "flips the outcome of an assertion, but doesn't hide any errors that might have happened while making it",
    "lineNumber": 33
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe80",
    "access": null,
    "description": "double negative",
    "lineNumber": 41
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe80.it81",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 43,
    "testTargets": [
      "not"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "spec/expectations/not.spec.ts~describe75",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82",
    "access": null,
    "description": "when combined with other assertions, such as",
    "lineNumber": 49
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe83",
    "access": null,
    "description": "and,",
    "lineNumber": 51
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe83",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe83.it84",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 55,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe83",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe83.it85",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 67,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe86",
    "access": null,
    "description": "contains,",
    "lineNumber": 73
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe86",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe86.it87",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 77,
    "testTargets": [
      "contains"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe86",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe86.it88",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 89,
    "testTargets": [
      "contains"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe89",
    "access": null,
    "description": "containAtLeastOneItemThat,",
    "lineNumber": 95
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe89",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe89.it90",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 99,
    "testTargets": [
      "containAtLeastOneItemThat"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe89",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe89.it91",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 111,
    "testTargets": [
      "containAtLeastOneItemThat"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe92",
    "access": null,
    "description": "endsWith,",
    "lineNumber": 117
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe92",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe92.it93",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 121,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe92",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe92.it94",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 133,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe95",
    "access": null,
    "description": "equals,",
    "lineNumber": 139
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe95",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe95.it96",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 143,
    "testTargets": [
      "equals"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe95",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe95.it97",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 155,
    "testTargets": [
      "equals"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe98",
    "access": null,
    "description": "includes,",
    "lineNumber": 161
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe98",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe98.it99",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 165,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe98",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe98.it100",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 177,
    "testTargets": [
      "includes"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe101",
    "access": null,
    "description": "isGreaterThan,",
    "lineNumber": 183
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe101",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe101.it102",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 187,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe101",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe101.it103",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 199,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe104",
    "access": null,
    "description": "isLessThan,",
    "lineNumber": 205
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe104",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe104.it105",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 209,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe104",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe104.it106",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 221,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe107",
    "access": null,
    "description": "or,",
    "lineNumber": 227
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe107",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe107.it108",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 231,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe107",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe107.it109",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 243,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe110",
    "access": null,
    "description": "startsWith,",
    "lineNumber": 249
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe110",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe110.it111",
    "access": null,
    "description": "produces a sensible error message",
    "lineNumber": 253,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/expectations/not.spec.ts~describe75.describe82.describe110",
    "testDepth": 3,
    "static": true,
    "longname": "spec/expectations/not.spec.ts~describe75.describe82.describe110.it112",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 265,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 347,
    "kind": "testFile",
    "name": "spec/expectations/or.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { endsWith, Ensure, or, startsWith } from '../../src';\n\ndescribe('or', () => {\n\n    describe('allows for the actor flow to continue when the \"actual\"', () => {\n\n        /** @test {or} */\n        it('meets all the expectations', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that('Hello World!', or(startsWith('Hello'), endsWith('World!'))),\n            )).to.be.fulfilled;\n        });\n\n        /** @test {or} */\n        it('meets at least one expectation', () => {\n            return expect(actorCalled('Astrid').attemptsTo(\n                Ensure.that('Hello World!', or(startsWith('¡Hola'), endsWith('World!'))),\n            )).to.be.fulfilled;\n        });\n    });\n\n    /** @test {or} */\n    it('breaks the actor flow when \"actual\" does meets none of the expectations', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', or(startsWith('¡Hola'), endsWith('Mundo!'))),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to start with '¡Hola' or end with 'Mundo!'`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal('¡Hola');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {or} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello', or(startsWith('H'), endsWith('o'))).toString())\n            .to.equal(`#actor ensures that 'Hello' does start with 'H' or end with 'o'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/or.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "spec/expectations/or.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113",
    "access": null,
    "description": "or",
    "lineNumber": 7
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "spec/expectations/or.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113.describe114",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\"",
    "lineNumber": 9
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "spec/expectations/or.spec.ts~describe113.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113.describe114.it115",
    "access": null,
    "description": "meets all the expectations",
    "lineNumber": 12,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "spec/expectations/or.spec.ts~describe113.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113.describe114.it116",
    "access": null,
    "description": "meets at least one expectation",
    "lineNumber": 19,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "spec/expectations/or.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113.it117",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does meets none of the expectations",
    "lineNumber": 27,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "spec/expectations/or.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/or.spec.ts~describe113.it118",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 38,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 354,
    "kind": "testFile",
    "name": "spec/expectations/property.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, equals, property } from '../../src';\n\ndescribe('hasProperty', () => {\n\n    /** @test {hasProperty} */\n    it('allows for the actor flow to continue when the \"actual\" has a property that meets the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello!', property('length', equals(6))),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {hasProperty} */\n    it('breaks the actor flow when \"actual\" does not have a property that meets the expectation', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello!', property('length', equals(0))),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello!' to have property 'length' that does equal 0`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal(0);\n                expect(error.actual).to.equal(6);\n            });\n    });\n\n    /** @test {hasProperty} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello!', property('length', equals(6))).toString())\n            .to.equal(`#actor ensures that 'Hello!' does have property 'length' that does equal 6`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/property.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "spec/expectations/property.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/property.spec.ts~describe119",
    "access": null,
    "description": "hasProperty",
    "lineNumber": 7
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "spec/expectations/property.spec.ts~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/property.spec.ts~describe119.it120",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" has a property that meets the expectation",
    "lineNumber": 10,
    "testTargets": [
      "hasProperty"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/expectations/property.spec.ts~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/property.spec.ts~describe119.it121",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not have a property that meets the expectation",
    "lineNumber": 17,
    "testTargets": [
      "hasProperty"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "spec/expectations/property.spec.ts~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/property.spec.ts~describe119.it122",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "hasProperty"
    ]
  },
  {
    "__docId__": 359,
    "kind": "testFile",
    "name": "spec/expectations/startsWith.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { Ensure, startsWith } from '../../src';\n\ndescribe('startsWith', () => {\n\n    /** @test {startsWith} */\n    it('allows for the actor flow to continue when the \"actual\" starts with \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', startsWith('Hello')),\n        )).to.be.fulfilled;\n    });\n\n    /** @test {startsWith} */\n    it('breaks the actor flow when \"actual\" does not start with \"expected\"', () => {\n        return expect(actorCalled('Astrid').attemptsTo(\n            Ensure.that('Hello World!', startsWith('¡Hola')),\n        )).to.be.rejectedWith(AssertionError, `Expected 'Hello World!' to start with '¡Hola'`)\n            .then((error: AssertionError) => {\n                expect(error.expected).to.equal('¡Hola');\n                expect(error.actual).to.equal('Hello World!');\n            });\n    });\n\n    /** @test {startsWith} */\n    it('contributes to a human-readable description', () => {\n        expect(Ensure.that('Hello', startsWith('H')).toString())\n            .to.equal(`#actor ensures that 'Hello' does start with 'H'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/expectations/startsWith.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "spec/expectations/startsWith.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/startsWith.spec.ts~describe123",
    "access": null,
    "description": "startsWith",
    "lineNumber": 7
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "spec/expectations/startsWith.spec.ts~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/startsWith.spec.ts~describe123.it124",
    "access": null,
    "description": "allows for the actor flow to continue when the \"actual\" starts with \"expected\"",
    "lineNumber": 10,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "spec/expectations/startsWith.spec.ts~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/startsWith.spec.ts~describe123.it125",
    "access": null,
    "description": "breaks the actor flow when \"actual\" does not start with \"expected\"",
    "lineNumber": 17,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "spec/expectations/startsWith.spec.ts~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/startsWith.spec.ts~describe123.it126",
    "access": null,
    "description": "contributes to a human-readable description",
    "lineNumber": 28,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 364,
    "kind": "testFile",
    "name": "spec/setup.spec.ts",
    "content": "import 'mocha';\n\nimport { configure } from '@serenity-js/core';\n\nbeforeEach(() => configure({}));\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/assertions/spec/setup.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  }
]