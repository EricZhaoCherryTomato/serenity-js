[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Serenity.ts",
    "content": "import { ensure, isDefined, isInstanceOf, property } from 'tiny-types';\n\nimport { DomainEvent, SceneStarts } from './events';\nimport { ErrorStackParser } from './io';\nimport { Duration, Timestamp } from './model';\nimport { Actor } from './screenplay/actor';\nimport { SerenityConfig } from './SerenityConfig';\nimport { Cast, Clock, Stage, StageCrewMember, StageManager } from './stage';\nimport { Extras } from './stage/Extras';\n\nexport class Serenity {\n    private static defaultCueTimeout    = Duration.ofSeconds(5);\n    private static defaultActors        = new Extras();\n\n    private stage: Stage;\n\n    constructor(private readonly clock: Clock = new Clock()) {\n        this.stage = new Stage(\n            Serenity.defaultActors,\n            new StageManager(Serenity.defaultCueTimeout, clock),\n        );\n\n        this.stage.assign(new StageHand());\n    }\n\n    /**\n     * @desc\n     *  Configures Serenity/JS. Every call to this function\n     *  replaces the previous configuration provided,\n     *  so this function should called be exactly once\n     *  in your test suite.\n     *\n     * @param {SerenityConfig} config\n     * @return {void}\n     */\n    configure(config: SerenityConfig): void {\n\n        const cueTimeout = !! config.cueTimeout\n            ? ensure('cueTimeout', config.cueTimeout, isInstanceOf(Duration))\n            : Serenity.defaultCueTimeout;\n\n        this.stage = new Stage(\n            Serenity.defaultActors,\n            new StageManager(cueTimeout, this.clock),\n        );\n\n        if (!! config.actors) {\n            this.engage(config.actors);\n        }\n\n        this.stage.assign(new StageHand());\n\n        if (Array.isArray(config.crew)) {\n            this.stage.assign(...config.crew);\n        }\n    }\n\n    /**\n     * @desc\n     *  Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n     *  you'd like to use in any subsequent call to {@link actorCalled}.\n     *\n     *  This method provides an alternative to calling {@link Actor#whoCan}\n     *  directly in your tests and you'd typically us it in a \"before each\"\n     *  hook of your test runner of choice.\n     *\n     * @example <caption>Engaging a cast of actors</caption>\n     *  import { Actor, Cast } from '@serenity-js/core';\n     *\n     *  class Actors implements Cast {\n     *      prepare(actor: Actor) {\n     *          return actor.whoCan(\n     *              // ... abilities you'd like the Actor to have\n     *          );\n     *      }\n     *  }\n     *\n     * engage(new Actors();\n     *\n     * @example <caption>Usage with Jasmine</caption>\n     *  import 'jasmine';\n     *\n     *  beforeEach(() => engage(new Actors()));\n     *\n     * @example <caption>Usage with Cucumber</caption>\n     *  import { Before } from 'cucumber';\n     *\n     *  Before(() => engage(new Actors());\n     *\n     * @param {Cast} actors\n     * @returns {void}\n     *\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    engage(actors: Cast): void {\n        this.stage.engage(\n            ensure('actors', actors, property('prepare', isDefined())),\n        );\n    }\n\n    /**\n     * @desc\n     *  Instantiates or retrieves an actor {@link Actor}\n     *  called `name` if one has already been instantiated.\n     *\n     * @example <caption>Usage with Jasmine</caption>\n     *   import 'jasmine';\n     *   import { actorCalled } from '@serenity-js/core';\n     *\n     *   describe('Feature', () => {\n     *\n     *      it('should have some behaviour', () =>\n     *          actorCalled('James').attemptsTo(\n     *              // ... activities\n     *          ));\n     *   });\n     *\n     * @example <caption>Usage with Cucumber</caption>\n     *   import { actorCalled } from '@serenity-js/core';\n     *   import { Given } from 'cucumber';\n     *\n     *   Given(/(.*?) is a registered user/, (name: string) =>\n     *      actorCalled(name).attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     * @param {string} name\n     *  The name of the actor to instantiate or retrieve\n     *\n     * @returns {Actor}\n     *\n     * @see {@link engage}\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    theActorCalled(name: string): Actor {\n        return this.stage.theActorCalled(name);\n    }\n\n    /**\n     * @desc\n     *  Retrieves an actor who was last instantiated or retrieved\n     *  using {@link actorCalled}.\n     *\n     *  This function is particularly useful when automating Cucumber scenarios.\n     *\n     * @example <captiongit>Usage with Cucumber</caption>\n     *   import { actorCalled } from '@serenity-js/core';\n     *   import { Given, When } from 'cucumber';\n     *\n     *   Given(/(.*?) is a registered user/, (name: string) =>\n     *      actorCalled(name).attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     *   When(/(?:he|she|they) browse their recent orders/, () =>\n     *      actorInTheSpotlight().attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     * @returns {Actor}\n     *\n     * @see {@link engage}\n     * @see {@link actorCalled}\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    theActorInTheSpotlight(): Actor {\n        return this.stage.theActorInTheSpotlight();\n    }\n\n    announce(event: DomainEvent): void {\n        this.stage.announce(event);\n    }\n\n    currentTime(): Timestamp {\n        return this.stage.currentTime();\n    }\n\n    /**\n     * @package\n     */\n    waitForNextCue(): Promise<void> {\n        return this.stage.waitForNextCue();\n    }\n\n    /**\n     * @deprecated\n     * @experimental\n     * @param stageCrewMembers\n     */\n    setTheStage(...stageCrewMembers: StageCrewMember[]): void {\n        deprecated('serenity.setTheStage', 'Please use the new `configure({ crew: stageCrewMembers }) from @serenity-js/core instead.');\n\n        this.stage.assign(...stageCrewMembers);\n    }\n\n    /**\n     * @deprecated\n     * @param actors\n     */\n    callToStageFor(actors: Cast): Stage {\n        deprecated('serenity.callToStageFor(...)', 'Please use `actorCalled(name)` and `actorInTheSpotlight()` functions from @serenity-js/core to access the actors instead.');\n\n        return this.stage.callFor(actors);\n    }\n}\n\n// todo: remove when the deprecated methods are removed\nfunction deprecated(method: string, message: string) {\n    const callers = new ErrorStackParser().parse(new Error())\n        .filter(frame => ! /(node_modules)/.test(frame.fileName));\n\n    const location = !! callers[2]\n        ? `[${ callers[2].fileName }:${ callers[2].lineNumber }] `\n        : '';\n\n    console.warn(`${ location }${ method } has been deprecated. ${ message }`);   // tslint:disable-line:no-console\n}\n\n/**\n * @private\n */\nclass StageHand implements StageCrewMember {\n    constructor(\n        private readonly stage: Stage = null) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        return new StageHand(stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            this.stage.resetActors();\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/Serenity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "Serenity",
    "memberof": "src/Serenity.ts",
    "static": true,
    "longname": "src/Serenity.ts~Serenity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{Serenity}",
    "description": " ",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "member",
    "name": "defaultCueTimeout",
    "memberof": "src/Serenity.ts~Serenity",
    "static": true,
    "longname": "src/Serenity.ts~Serenity.defaultCueTimeout",
    "access": "private",
    "description": " ",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "defaultActors",
    "memberof": "src/Serenity.ts~Serenity",
    "static": true,
    "longname": "src/Serenity.ts~Serenity.defaultActors",
    "access": "private",
    "description": " ",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "stage",
    "memberof": "src/Serenity.ts~Serenity",
    "static": false,
    "longname": "src/Serenity.ts~Serenity#stage",
    "access": "private",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#configure",
    "access": "public",
    "description": " Configures Serenity/JS. Every call to this function\n replaces the previous configuration provided,\n so this function should called be exactly once\n in your test suite.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerenityConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "engage",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#engage",
    "access": "public",
    "description": " Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n you'd like to use in any subsequent call to {@link actorCalled}.\n\n This method provides an alternative to calling {@link Actor#whoCan}\n directly in your tests and you'd typically us it in a \"before each\"\n hook of your test runner of choice.",
    "examples": [
      "<caption>Engaging a cast of actors</caption>\n import { Actor, Cast } from '@serenity-js/core';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(\n             // ... abilities you'd like the Actor to have\n         );\n     }\n }\n\nengage(new Actors();",
      "<caption>Usage with Jasmine</caption>\n import 'jasmine';\n\n beforeEach(() => engage(new Actors()));",
      "<caption>Usage with Cucumber</caption>\n import { Before } from 'cucumber';\n\n Before(() => engage(new Actors());"
    ],
    "see": [
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "theActorCalled",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#theActorCalled",
    "access": "public",
    "description": " Instantiates or retrieves an actor {@link Actor}\n called `name` if one has already been instantiated.",
    "examples": [
      "<caption>Usage with Jasmine</caption>\n  import 'jasmine';\n  import { actorCalled } from '@serenity-js/core';\n\n  describe('Feature', () => {\n\n     it('should have some behaviour', () =>\n         actorCalled('James').attemptsTo(\n             // ... activities\n         ));\n  });",
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the actor to instantiate or retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "theActorInTheSpotlight",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#theActorInTheSpotlight",
    "access": "public",
    "description": " Retrieves an actor who was last instantiated or retrieved\n using {@link actorCalled}.\n\n This function is particularly useful when automating Cucumber scenarios.",
    "examples": [
      "<captiongit>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given, When } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));\n\n  When(/(?:he|she|they) browse their recent orders/, () =>\n     actorInTheSpotlight().attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link actorCalled}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "announce",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#announce",
    "access": "public",
    "description": " ",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#currentTime",
    "access": "public",
    "description": " ",
    "lineNumber": 177,
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#waitForNextCue",
    "access": "package",
    "description": "",
    "lineNumber": 309,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "setTheStage",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#setTheStage",
    "access": "public",
    "description": "",
    "lineNumber": 331,
    "deprecated": true,
    "experimental": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stageCrewMembers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "callToStageFor",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#callToStageFor",
    "access": "public",
    "description": "",
    "lineNumber": 354,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "deprecated",
    "memberof": "src/Serenity.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Serenity.ts~deprecated",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/Serenity.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 18,
    "kind": "class",
    "name": "StageHand",
    "memberof": "src/Serenity.ts",
    "static": true,
    "longname": "src/Serenity.ts~StageHand",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/Serenity.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 394,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 19,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Serenity.ts~StageHand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~StageHand#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 395,
    "undocument": true
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/Serenity.ts~StageHand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~StageHand#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/Serenity.ts~StageHand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~StageHand#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "src/SerenityConfig.ts",
    "content": "import { Duration } from './model';\nimport { Cast, StageCrewMember } from './stage';\n\n/**\n * @interface\n *\n * @see {@link configure}\n */\nexport abstract class SerenityConfig {\n    /**\n     * @desc\n     *  A {@link Cast} of {@link Actor}s to be used when {@link actorCalled}\n     *  and {@link actorInTheSpotlight} functions are called.\n     *\n     * @type {?Cast}\n     */\n    actors?:        Cast;\n\n    /**\n     * @desc\n     *  A list of {@link StageCrewMember}s to be notified of {@link DomainEvent}s\n     *  that occur during the scenario execution.\n     *\n     * @type {?StageCrewMember[]}\n     */\n    crew?:          StageCrewMember[];\n\n    /**\n     * @desc\n     *  The maximum amount of time Serenity/JS should wait for any post-scenario\n     *  async operations to complete. Those include generating the screenshots,\n     *  saving reports to disk and so on. **Please note** that this is not\n     *  a scenario timeout, which should be configured in your test runner.\n     *\n     * @type {?Duration}\n     */\n    cueTimeout?:    Duration;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/SerenityConfig.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "class",
    "name": "SerenityConfig",
    "memberof": "src/SerenityConfig.ts",
    "static": true,
    "longname": "src/SerenityConfig.ts~SerenityConfig",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{SerenityConfig}",
    "description": "",
    "see": [
      "{@link configure}"
    ],
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "actors",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#actors",
    "access": "public",
    "description": " A {@link Cast} of {@link Actor}s to be used when {@link actorCalled}\n and {@link actorInTheSpotlight} functions are called.",
    "lineNumber": 35,
    "type": {
      "nullable": true,
      "types": [
        "Cast"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "crew",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#crew",
    "access": "public",
    "description": " A list of {@link StageCrewMember}s to be notified of {@link DomainEvent}s\n that occur during the scenario execution.",
    "lineNumber": 55,
    "type": {
      "nullable": true,
      "types": [
        "StageCrewMember[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "cueTimeout",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#cueTimeout",
    "access": "public",
    "description": " The maximum amount of time Serenity/JS should wait for any post-scenario\n async operations to complete. Those include generating the screenshots,\n saving reports to disk and so on. **Please note** that this is not\n a scenario timeout, which should be configured in your test runner.",
    "lineNumber": 77,
    "type": {
      "nullable": true,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "file",
    "name": "src/decorators/pending.ts",
    "content": "// class-level\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/decorators/pending.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 28,
    "kind": "file",
    "name": "src/decorators/step.ts",
    "content": "// performAs level; sets a toString; deprecated\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/decorators/step.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "src/errors/AssertionError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an assertion has failed.\n *\n * @extends {RuntimeError}\n */\nexport class AssertionError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {any} expected - The value that was expected\n     * @param {any} actual - The value that was received instead of the expected one\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, public readonly expected: any, public readonly actual: any, cause?: Error) {\n        super(AssertionError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/AssertionError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "AssertionError",
    "memberof": "src/errors/AssertionError.ts",
    "static": true,
    "longname": "src/errors/AssertionError.ts~AssertionError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{AssertionError}",
    "description": " Thrown to indicate that an assertion has failed.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/AssertionError.ts~AssertionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/AssertionError.ts~AssertionError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The value that was expected"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "The value that was received instead of the expected one"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "src/errors/ConfigurationError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that a test framework or test suite configuration error occurs.\n *\n * @extends {RuntimeError}\n */\nexport class ConfigurationError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(ConfigurationError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/ConfigurationError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "class",
    "name": "ConfigurationError",
    "memberof": "src/errors/ConfigurationError.ts",
    "static": true,
    "longname": "src/errors/ConfigurationError.ts~ConfigurationError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{ConfigurationError}",
    "description": " Thrown to indicate that a test framework or test suite configuration error occurs.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 34,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/ConfigurationError.ts~ConfigurationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/ConfigurationError.ts~ConfigurationError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 35,
    "kind": "file",
    "name": "src/errors/ImplementationPendingError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that the {@link Actor} attempted to perform\n *  a {@link Task} or {@link Interaction} that hasn't been implemented yet.\n *\n * @example <caption>A pending Task</caption>\n *  import { Task } from '@serenity-js/core';\n *\n *  // A pending Task is one that encapsulates no other activities\n *  const Authenticate = () =>\n *      Task.where(`#actor authenticates with the service up a test database` );\n *\n * @example <caption>A pending Interaction</caption>\n *  import { Interaction } from '@serenity-js/core';\n *\n *  // A pending Interaction is one that doesn't perform any action\n *  const DoubleClick = () =>\n *      Interaction.where(`#actor double-clicks`);\n *\n * @extends {RuntimeError}\n */\nexport class ImplementationPendingError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(ImplementationPendingError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/ImplementationPendingError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 36,
    "kind": "class",
    "name": "ImplementationPendingError",
    "memberof": "src/errors/ImplementationPendingError.ts",
    "static": true,
    "longname": "src/errors/ImplementationPendingError.ts~ImplementationPendingError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{ImplementationPendingError}",
    "description": " Thrown to indicate that the {@link Actor} attempted to perform\n a {@link Task} or {@link Interaction} that hasn't been implemented yet.",
    "examples": [
      "<caption>A pending Task</caption>\n import { Task } from '@serenity-js/core';\n\n // A pending Task is one that encapsulates no other activities\n const Authenticate = () =>\n     Task.where(`#actor authenticates with the service up a test database` );",
      "<caption>A pending Interaction</caption>\n import { Interaction } from '@serenity-js/core';\n\n // A pending Interaction is one that doesn't perform any action\n const DoubleClick = () =>\n     Interaction.where(`#actor double-clicks`);"
    ],
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 37,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/ImplementationPendingError.ts~ImplementationPendingError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/ImplementationPendingError.ts~ImplementationPendingError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "src/errors/LogicError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an {@link Interaction}, a {@link Task} or a test scenario\n *  can't be executed due to a logical error.\n *  For example, it's not possible to assert on the last HTTP Response if the request\n *  hasn't been performed yet.\n *\n * @extends {RuntimeError}\n */\nexport class LogicError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(LogicError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/LogicError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "class",
    "name": "LogicError",
    "memberof": "src/errors/LogicError.ts",
    "static": true,
    "longname": "src/errors/LogicError.ts~LogicError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{LogicError}",
    "description": " Thrown to indicate that an {@link Interaction}, a {@link Task} or a test scenario\n can't be executed due to a logical error.\n For example, it's not possible to assert on the last HTTP Response if the request\n hasn't been performed yet.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 40,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/LogicError.ts~LogicError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/LogicError.ts~LogicError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "src/errors/RuntimeError.ts",
    "content": "/**\n * @desc\n *  Base class for custom errors that may occur during execution of a test scenario.\n *\n * @example <caption>Custom Error definition</caption>\n * import { RuntimeError } from '@serenity-js/core';\n *\n * export class CustomError extends RuntimeError {\n *   constructor(message: string, cause?: Error) {\n *       super(CustomError, message, cause);\n *   }\n * }\n *\n * @example <caption>Sync error handling</caption>\n * try {\n *     operationThatMightThrowAnError();\n * } catch(error) {\n *     // catch and re-throw\n *     throw new CustomError('operationThatMightThrowAnError has failed', error);\n * }\n *\n * @example <caption>Async error handling</caption>\n * operationThatMightRejectAPromise().catch(error => {\n *     // catch and re-throw\n *     throw new CustomError('operationThatMightThrowAnError has failed', error);\n * });\n *\n * @extends {Error}\n */\nexport abstract class RuntimeError extends Error {\n\n    /**\n     * @param {Function} type - Constructor function used to instantiate a subclass of a RuntimeError\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    protected constructor(\n        type: new (...args: any[]) => RuntimeError,\n        message: string,\n        public readonly cause?: Error,\n    ) {\n        super(message);\n        Object.setPrototypeOf(this, type.prototype);\n        this.name = this.constructor.name;\n\n        Error.captureStackTrace(this, type);\n\n        if (!! cause) {\n            this.stack = `${ this.stack }\\nCaused by: ${ cause.stack }`;\n        }\n    }\n\n    /**\n     * @desc\n     *  Human-readable description\n     */\n    toString() {\n        return `${ this.constructor.name }: ${ this.message }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/RuntimeError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 42,
    "kind": "class",
    "name": "RuntimeError",
    "memberof": "src/errors/RuntimeError.ts",
    "static": true,
    "longname": "src/errors/RuntimeError.ts~RuntimeError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{RuntimeError}",
    "description": " Base class for custom errors that may occur during execution of a test scenario.",
    "examples": [
      "<caption>Custom Error definition</caption>\nimport { RuntimeError } from '@serenity-js/core';\n\nexport class CustomError extends RuntimeError {\n  constructor(message: string, cause?: Error) {\n      super(CustomError, message, cause);\n  }\n}",
      "<caption>Sync error handling</caption>\ntry {\n    operationThatMightThrowAnError();\n} catch(error) {\n    // catch and re-throw\n    throw new CustomError('operationThatMightThrowAnError has failed', error);\n}",
      "<caption>Async error handling</caption>\noperationThatMightRejectAPromise().catch(error => {\n    // catch and re-throw\n    throw new CustomError('operationThatMightThrowAnError has failed', error);\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 43,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Constructor function used to instantiate a subclass of a RuntimeError"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "name",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#name",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "stack",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "toString",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#toString",
    "access": "public",
    "description": " Human-readable description",
    "lineNumber": 73,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "file",
    "name": "src/errors/TestCompromisedError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that the test can't be performed due to an issue with a downstream dependency.\n *  For example, it makes no sense to run a full-stack integration test if we already know that\n *  the database server is down.\n *\n * @example <caption>Throwing a TestCompromisedError from a custom Interaction</caption>\n *  import { Interaction } from '@serenity-js/core';\n *\n *  const SetUpTestDatabase = () =>\n *      Interaction.where(`#actor sets up a test database`, actor => {\n *          return SomeCustomDatabaseSpecificAbility.as(actor).setUpTestDatabase().catch(error => {\n *              throw new TestCompromisedError('Could not set up the test database', error);\n *          });\n *      });\n *\n * @extends {RuntimeError}\n */\nexport class TestCompromisedError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(TestCompromisedError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/TestCompromisedError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "TestCompromisedError",
    "memberof": "src/errors/TestCompromisedError.ts",
    "static": true,
    "longname": "src/errors/TestCompromisedError.ts~TestCompromisedError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{TestCompromisedError}",
    "description": " Thrown to indicate that the test can't be performed due to an issue with a downstream dependency.\n For example, it makes no sense to run a full-stack integration test if we already know that\n the database server is down.",
    "examples": [
      "<caption>Throwing a TestCompromisedError from a custom Interaction</caption>\n import { Interaction } from '@serenity-js/core';\n\n const SetUpTestDatabase = () =>\n     Interaction.where(`#actor sets up a test database`, actor => {\n         return SomeCustomDatabaseSpecificAbility.as(actor).setUpTestDatabase().catch(error => {\n             throw new TestCompromisedError('Could not set up the test database', error);\n         });\n     });"
    ],
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/TestCompromisedError.ts~TestCompromisedError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/TestCompromisedError.ts~TestCompromisedError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/errors/UnknownError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an unknown error has occurred.\n *\n * @extends {RuntimeError}\n */\nexport class UnknownError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(UnknownError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/UnknownError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "UnknownError",
    "memberof": "src/errors/UnknownError.ts",
    "static": true,
    "longname": "src/errors/UnknownError.ts~UnknownError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{UnknownError}",
    "description": " Thrown to indicate that an unknown error has occurred.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/UnknownError.ts~UnknownError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/UnknownError.ts~UnknownError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/errors/index.ts",
    "content": "export * from './AssertionError';\nexport * from './ConfigurationError';\nexport * from './ImplementationPendingError';\nexport * from './LogicError';\nexport * from './RuntimeError';\nexport * from './UnknownError';\nexport * from './TestCompromisedError';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/errors/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/events/ActivityFinished.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\n\nimport { ActivityDetails, Outcome, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport abstract class ActivityFinished extends DomainEvent {\n    constructor(\n        public readonly value: ActivityDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ActivityFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "ActivityFinished",
    "memberof": "src/events/ActivityFinished.ts",
    "static": true,
    "longname": "src/events/ActivityFinished.ts~ActivityFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityFinished.ts~ActivityFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityFinished.ts~ActivityFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/events/ActivityRelatedArtifactArchived.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Path } from '../io';\nimport { ActivityDetails, Artifact, ArtifactType, Name, Timestamp } from '../model';\nimport { ArtifactArchived } from './ArtifactArchived';\n\nexport class ActivityRelatedArtifactArchived extends ArtifactArchived {\n    static fromJSON<E>(o: JSONObject) {\n        return new ActivityRelatedArtifactArchived(\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Name.fromJSON(o.name as string),\n            Artifact.ofType(o.type as string),\n            Path.fromJSON(o.path as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly details: ActivityDetails,\n        name: Name,\n        type: ArtifactType,\n        path: Path,\n        timestamp?: Timestamp,\n    ) {\n        super(name, type, path, timestamp);\n        ensure('activity details', details, isDefined());\n    }\n\n    toJSON(): JSONObject {\n        return {\n            details: this.details.toJSON(),\n            name: this.name.toJSON(),\n            type: this.type.name,\n            path: this.path.toJSON(),\n            timestamp: this.timestamp.toJSON(),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ActivityRelatedArtifactArchived.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "ActivityRelatedArtifactArchived",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts",
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityRelatedArtifactArchived}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/events/ArtifactArchived.js~ArtifactArchived"
    ]
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/events/ActivityRelatedArtifactGenerated.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, Artifact, Name, SerialisedArtifact, Timestamp } from '../model';\nimport { ArtifactGenerated } from './ArtifactGenerated';\n\nexport class ActivityRelatedArtifactGenerated extends ArtifactGenerated {\n    static fromJSON(o: JSONObject) {\n        return new ActivityRelatedArtifactGenerated(\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Name.fromJSON(o.name as string),\n            Artifact.fromJSON(o.artifact as SerialisedArtifact),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly details: ActivityDetails,\n        name: Name,\n        artifact: Artifact,\n        timestamp?: Timestamp,\n    ) {\n        super(name, artifact, timestamp);\n        ensure('activity details', details, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ActivityRelatedArtifactGenerated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "ActivityRelatedArtifactGenerated",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts",
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityRelatedArtifactGenerated}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ArtifactGenerated.js~ArtifactGenerated"
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/events/ActivityStarts.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\n\nimport { ActivityDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport abstract class ActivityStarts extends DomainEvent {\n    constructor(\n        public readonly value: ActivityDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ActivityStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "ActivityStarts",
    "memberof": "src/events/ActivityStarts.ts",
    "static": true,
    "longname": "src/events/ActivityStarts.ts~ActivityStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityStarts.ts~ActivityStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityStarts.ts~ActivityStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/events/ArtifactArchived.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Path } from '../io';\nimport { Artifact, ArtifactType, Name, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class ArtifactArchived extends DomainEvent {\n    static fromJSON<E>(o: JSONObject) {\n        return new ArtifactArchived(\n            Name.fromJSON(o.name as string),\n            Artifact.ofType(o.type as string),\n            Path.fromJSON(o.path as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly type: ArtifactType,\n        public readonly path: Path,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n\n        ensure('name', name, isDefined());\n        ensure('type', type, isDefined());\n        ensure('path', path, isDefined());\n    }\n\n    toJSON(): JSONObject {\n        return {\n            name: this.name.toJSON(),\n            type: this.type.name,\n            path: this.path.toJSON(),\n            timestamp: this.timestamp.toJSON(),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ArtifactArchived.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "ArtifactArchived",
    "memberof": "src/events/ArtifactArchived.ts",
    "static": true,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ArtifactArchived}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/events/ArtifactGenerated.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Artifact, Name, SerialisedArtifact, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class ArtifactGenerated extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new ArtifactGenerated(\n            Name.fromJSON(o.name as string),\n            Artifact.fromJSON(o.artifact as SerialisedArtifact),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly artifact: Artifact,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', artifact, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/ArtifactGenerated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "ArtifactGenerated",
    "memberof": "src/events/ArtifactGenerated.ts",
    "static": true,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ArtifactGenerated}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/events/AsyncOperationAttempted.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationAttempted extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new AsyncOperationAttempted(\n            Description.fromJSON(o.taskDescription as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly taskDescription: Description,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/AsyncOperationAttempted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "AsyncOperationAttempted",
    "memberof": "src/events/AsyncOperationAttempted.ts",
    "static": true,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationAttempted}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/events/AsyncOperationCompleted.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationCompleted extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new AsyncOperationCompleted(\n            Description.fromJSON(o.taskDescription as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly taskDescription: Description,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/AsyncOperationCompleted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "AsyncOperationCompleted",
    "memberof": "src/events/AsyncOperationCompleted.ts",
    "static": true,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationCompleted}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/events/AsyncOperationFailed.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport { ErrorSerialiser, SerialisedError } from '../io';\nimport { CorrelationId, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationFailed extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new AsyncOperationFailed(\n            ErrorSerialiser.deserialise(o.error as SerialisedError),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly error: Error,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/AsyncOperationFailed.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "AsyncOperationFailed",
    "memberof": "src/events/AsyncOperationFailed.ts",
    "static": true,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationFailed}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/events/DomainEvent.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\nimport { Timestamp } from '../model';\n\nexport abstract class DomainEvent extends TinyType {\n    protected constructor(public readonly timestamp: Timestamp = new Timestamp()) {\n        super();\n        ensure('timestamp', timestamp, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/DomainEvent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "DomainEvent",
    "memberof": "src/events/DomainEvent.ts",
    "static": true,
    "longname": "src/events/DomainEvent.ts~DomainEvent",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{DomainEvent}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/DomainEvent.ts~DomainEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/DomainEvent.ts~DomainEvent#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/events/FeatureNarrativeDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class FeatureNarrativeDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new FeatureNarrativeDetected(\n            Description.fromJSON(o.description as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly description: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/FeatureNarrativeDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "FeatureNarrativeDetected",
    "memberof": "src/events/FeatureNarrativeDetected.ts",
    "static": true,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{FeatureNarrativeDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/events/InteractionFinished.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, Outcome, SerialisedOutcome, Timestamp } from '../model';\nimport { ActivityFinished } from './ActivityFinished';\n\nexport class InteractionFinished extends ActivityFinished {\n    static fromJSON(o: JSONObject) {\n        return new InteractionFinished(\n            ActivityDetails.fromJSON(o.value as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/InteractionFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "InteractionFinished",
    "memberof": "src/events/InteractionFinished.ts",
    "static": true,
    "longname": "src/events/InteractionFinished.ts~InteractionFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{InteractionFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityFinished.js~ActivityFinished"
    ]
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/InteractionFinished.ts~InteractionFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/InteractionFinished.ts~InteractionFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/events/InteractionStarts.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, Timestamp } from '../model';\nimport { ActivityStarts } from './ActivityStarts';\n\nexport class InteractionStarts extends ActivityStarts {\n    static fromJSON(o: JSONObject) {\n        return new InteractionStarts(\n            ActivityDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/InteractionStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "InteractionStarts",
    "memberof": "src/events/InteractionStarts.ts",
    "static": true,
    "longname": "src/events/InteractionStarts.ts~InteractionStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{InteractionStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityStarts.js~ActivityStarts"
    ]
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/InteractionStarts.ts~InteractionStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/InteractionStarts.ts~InteractionStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/events/SceneBackgroundDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Description, Name } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneBackgroundDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new SceneBackgroundDetected(\n            Name.fromJSON(o.name as string),\n            Description.fromJSON(o.description as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly description: Description,\n    ) {\n        super();\n        ensure('name', name, isDefined());\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneBackgroundDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "SceneBackgroundDetected",
    "memberof": "src/events/SceneBackgroundDetected.ts",
    "static": true,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneBackgroundDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/events/SceneDescriptionDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneDescriptionDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new SceneDescriptionDetected(\n            Description.fromJSON(o.description as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly description: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneDescriptionDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "SceneDescriptionDetected",
    "memberof": "src/events/SceneDescriptionDetected.ts",
    "static": true,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneDescriptionDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/events/SceneFinished.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Outcome, ScenarioDetails, SerialisedOutcome, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneFinished extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new SceneFinished(\n            ScenarioDetails.fromJSON(o.value as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: ScenarioDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "SceneFinished",
    "memberof": "src/events/SceneFinished.ts",
    "static": true,
    "longname": "src/events/SceneFinished.ts~SceneFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneFinished.ts~SceneFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneFinished.ts~SceneFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneFinished.ts~SceneFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneFinished.ts~SceneFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/events/SceneFinishes.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneFinishes extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new SceneFinishes(\n            ScenarioDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: ScenarioDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneFinishes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "SceneFinishes",
    "memberof": "src/events/SceneFinishes.ts",
    "static": true,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneFinishes}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneFinishes.ts~SceneFinishes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneFinishes.ts~SceneFinishes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/events/SceneParametersDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ScenarioDetails, ScenarioParameters, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneParametersDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new SceneParametersDetected(\n            ScenarioDetails.fromJSON(o.scenario as JSONObject),\n            ScenarioParameters.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly scenario: ScenarioDetails,\n        public readonly value: ScenarioParameters,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneParametersDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "SceneParametersDetected",
    "memberof": "src/events/SceneParametersDetected.ts",
    "static": true,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneParametersDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/events/SceneSequenceDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneSequenceDetected extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new SceneSequenceDetected(\n            ScenarioDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: ScenarioDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneSequenceDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "SceneSequenceDetected",
    "memberof": "src/events/SceneSequenceDetected.ts",
    "static": true,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneSequenceDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/events/SceneStarts.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneStarts extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new SceneStarts(\n            ScenarioDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: ScenarioDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "SceneStarts",
    "memberof": "src/events/SceneStarts.ts",
    "static": true,
    "longname": "src/events/SceneStarts.ts~SceneStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneStarts.ts~SceneStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneStarts.ts~SceneStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneStarts.ts~SceneStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneStarts.ts~SceneStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/events/SceneTagged.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ScenarioDetails, Tag, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneTagged extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new SceneTagged(\n            ScenarioDetails.fromJSON(o.value as JSONObject),\n            Tag.fromJSON(o.tag as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n    constructor(\n        public readonly value: ScenarioDetails,\n        public readonly tag: Tag,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneTagged.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "SceneTagged",
    "memberof": "src/events/SceneTagged.ts",
    "static": true,
    "longname": "src/events/SceneTagged.ts~SceneTagged",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneTagged}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneTagged.ts~SceneTagged",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneTagged.ts~SceneTagged.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneTagged.ts~SceneTagged",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneTagged.ts~SceneTagged#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/events/SceneTemplateDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneTemplateDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new SceneTemplateDetected(\n            Description.fromJSON(o.template as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly template: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('template', template, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/SceneTemplateDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "SceneTemplateDetected",
    "memberof": "src/events/SceneTemplateDetected.ts",
    "static": true,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneTemplateDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/events/TaskFinished.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, Outcome, SerialisedOutcome, Timestamp } from '../model';\nimport { ActivityFinished } from './ActivityFinished';\n\nexport class TaskFinished extends ActivityFinished {\n    static fromJSON(o: JSONObject) {\n        return new TaskFinished(\n            ActivityDetails.fromJSON(o.value as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TaskFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "class",
    "name": "TaskFinished",
    "memberof": "src/events/TaskFinished.ts",
    "static": true,
    "longname": "src/events/TaskFinished.ts~TaskFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TaskFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityFinished.js~ActivityFinished"
    ]
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TaskFinished.ts~TaskFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TaskFinished.ts~TaskFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/events/TaskStarts.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, Timestamp } from '../model';\nimport { ActivityStarts } from './ActivityStarts';\n\nexport class TaskStarts extends ActivityStarts {\n    static fromJSON(o: JSONObject) {\n        return new TaskStarts(\n            ActivityDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TaskStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "class",
    "name": "TaskStarts",
    "memberof": "src/events/TaskStarts.ts",
    "static": true,
    "longname": "src/events/TaskStarts.ts~TaskStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TaskStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityStarts.js~ActivityStarts"
    ]
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TaskStarts.ts~TaskStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TaskStarts.ts~TaskStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/events/TestRunFinished.ts",
    "content": "import { Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when all the tests have finished running.\n */\nexport class TestRunFinished extends DomainEvent {\n    static fromJSON(v: string) {\n        return new TestRunFinished(\n            Timestamp.fromJSON(v as string),\n        );\n    }\n\n    constructor(\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TestRunFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "TestRunFinished",
    "memberof": "src/events/TestRunFinished.ts",
    "static": true,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunFinished}",
    "description": " Emitted when all the tests have finished running.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunFinished.ts~TestRunFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunFinished.ts~TestRunFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/events/TestRunFinishes.ts",
    "content": "import { Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when the last test in the test suite has finished running\n *  and it's time for any last-minute reporting to take place.\n */\nexport class TestRunFinishes extends DomainEvent {\n    static fromJSON(v: string) {\n        return new TestRunFinishes(\n            Timestamp.fromJSON(v as string),\n        );\n    }\n\n    constructor(\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TestRunFinishes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "TestRunFinishes",
    "memberof": "src/events/TestRunFinishes.ts",
    "static": true,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunFinishes}",
    "description": " Emitted when the last test in the test suite has finished running\n and it's time for any last-minute reporting to take place.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/events/TestRunnerDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Name, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestRunnerDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject) {\n        return new TestRunnerDetected(\n            Name.fromJSON(o.value as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: Name,\n        public readonly timestamp: Timestamp = new Timestamp(),\n    ) {\n        super();\n        ensure('value', value, isDefined());\n        ensure('timestamp', timestamp, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TestRunnerDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "TestRunnerDetected",
    "memberof": "src/events/TestRunnerDetected.ts",
    "static": true,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunnerDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/events/TestSuiteFinished.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Outcome, SerialisedOutcome, TestSuiteDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestSuiteFinished extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new TestSuiteFinished(\n            TestSuiteDetails.fromJSON(o.value as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: TestSuiteDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TestSuiteFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "TestSuiteFinished",
    "memberof": "src/events/TestSuiteFinished.ts",
    "static": true,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestSuiteFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/events/TestSuiteStarts.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { TestSuiteDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestSuiteStarts extends DomainEvent {\n    static fromJSON(o: JSONObject) {\n        return new TestSuiteStarts(\n            TestSuiteDetails.fromJSON(o.value as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly value: TestSuiteDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('value', value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/TestSuiteStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "TestSuiteStarts",
    "memberof": "src/events/TestSuiteStarts.ts",
    "static": true,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestSuiteStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/events/index.ts",
    "content": "export * from './ActivityStarts';\nexport * from './ActivityFinished';\nexport * from './ActivityRelatedArtifactGenerated';\nexport * from './ActivityRelatedArtifactArchived';\nexport * from './ArtifactArchived';\nexport * from './ArtifactGenerated';\nexport * from './AsyncOperationAttempted';\nexport * from './AsyncOperationCompleted';\nexport * from './AsyncOperationFailed';\nexport * from './DomainEvent';\nexport * from './FeatureNarrativeDetected';\nexport * from './InteractionFinished';\nexport * from './InteractionStarts';\nexport * from './SceneBackgroundDetected';\nexport * from './SceneDescriptionDetected';\nexport * from './SceneStarts';\nexport * from './SceneFinished';\nexport * from './SceneFinishes';\nexport * from './SceneTagged';\nexport * from './SceneSequenceDetected';\nexport * from './SceneTemplateDetected';\nexport * from './SceneParametersDetected';\nexport * from './TaskStarts';\nexport * from './TaskFinished';\nexport * from './TestSuiteStarts';\nexport * from './TestSuiteFinished';\nexport * from './TestRunFinished';\nexport * from './TestRunFinishes';\nexport * from './TestRunnerDetected';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/events/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './errors';\nexport * from './Serenity';\nexport * from './instance';\nexport * from './screenplay';\nexport * from './stage';\nexport { SerenityConfig } from './SerenityConfig';\nexport { Duration } from './model';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/instance.ts",
    "content": "import { Actor } from './screenplay/actor';\nimport { Serenity } from './Serenity';\nimport { SerenityConfig } from './SerenityConfig';\nimport { Cast, Clock } from './stage';\n\nconst clock = new Clock();\n\nexport const serenity = new Serenity(clock);\n\n/**\n * @desc\n *  Configures Serenity/JS. Every call to this function\n *  replaces the previous configuration provided,\n *  so this function should called be exactly once\n *  in your test suite.\n *\n *  This function is an alias for {@link Serenity#configure}.\n *\n * @param {SerenityConfig} config\n * @return {void}\n *\n * @see {@link Serenity#configure}\n */\nexport function configure(config: SerenityConfig) {\n    return serenity.configure(config);\n}\n\n/**\n * @desc\n *  Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n *  you'd like to use in any subsequent call to {@link actorCalled}.\n *\n *  This function provides an alternative to calling {@link Actor#whoCan}\n *  directly in your tests and you'd typically us it in a \"before each\"\n *  hook of your test runner of choice.\n *\n *  This function is an alias for {@link Serenity#engage}.\n *\n * @example <caption>Engaging a cast of actors</caption>\n *  import { Actor, Cast } from '@serenity-js/core';\n *\n *  class Actors implements Cast {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(\n *              // ... abilities you'd like the Actor to have\n *          );\n *      }\n *  }\n *\n * engage(new Actors();\n *\n * @example <caption>Usage with Jasmine</caption>\n *  import 'jasmine';\n *\n *  beforeEach(() => engage(new Actors()));\n *\n * @example <caption>Usage with Cucumber</caption>\n *  import { Before } from 'cucumber';\n *\n *  Before(() => engage(new Actors());\n *\n * @param {Cast} actors\n * @returns {void}\n *\n * @see {@link Actor}\n * @see {@link Cast}\n *\n * @see {@link Serenity#engage}\n */\nexport function engage(actors: Cast) {\n    return serenity.engage(actors);\n}\n\n/**\n * @desc\n *  Instantiates or retrieves an actor {@link Actor}\n *  called `name` if one has already been instantiated.\n *\n *  This method is an alias for {@link Serenity#theActorCalled}.\n *\n * @example <caption>Usage with Jasmine</caption>\n *   import 'jasmine';\n *   import { actorCalled } from '@serenity-js/core';\n *\n *   describe('Feature', () => {\n *\n *      it('should have some behaviour', () =>\n *          actorCalled('James').attemptsTo(\n *              // ... activities\n *          ));\n *   });\n *\n * @example <caption>Usage with Cucumber</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { Given } from 'cucumber';\n *\n *   Given(/(.*?) is a registered user/, (name: string) =>\n *      actorCalled(name).attemptsTo(\n *              // ... activities\n *          ));\n *\n * @param {string} name\n *  The name of the actor to instantiate or retrieve\n *\n * @returns {Actor}\n *\n * @see {@link engage}\n * @see {@link Actor}\n * @see {@link Cast}\n * @see {@link Serenity#theActorCalled}\n */\nexport function actorCalled(name: string): Actor {\n    return serenity.theActorCalled(name);\n}\n\n/**\n * @desc\n *  Retrieves an actor who was last instantiated or retrieved\n *  using {@link actorCalled}.\n *\n *  This function is particularly useful when automating Cucumber scenarios.\n *\n *  This function is an alias for {@link Serenity#theActorInTheSpotlight}.\n *\n * @example <caption>Usage with Cucumber</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { Given, When } from 'cucumber';\n *\n *   Given(/(.*?) is a registered user/, (name: string) =>\n *      actorCalled(name).attemptsTo(\n *              // ... activities\n *          ));\n *\n *   When(/(?:he|she|they) browse their recent orders/, () =>\n *      actorInTheSpotlight().attemptsTo(\n *              // ... activities\n *          ));\n *\n * @returns {Actor}\n *\n * @see {@link engage}\n * @see {@link actorCalled}\n * @see {@link Actor}\n * @see {@link Cast}\n */\nexport function actorInTheSpotlight(): Actor {\n    return serenity.theActorInTheSpotlight();\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/instance.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "clock",
    "memberof": "src/instance.ts",
    "static": true,
    "longname": "src/instance.ts~clock",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/instance.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "src/stage/Clock.ts~Clock"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "serenity",
    "memberof": "src/instance.ts",
    "static": true,
    "longname": "src/instance.ts~serenity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{serenity}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "src/Serenity.ts~Serenity"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "configure",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~configure",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{configure}",
    "description": " Configures Serenity/JS. Every call to this function\n replaces the previous configuration provided,\n so this function should called be exactly once\n in your test suite.\n\n This function is an alias for {@link Serenity#configure}.",
    "see": [
      "{@link Serenity#configure}"
    ],
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerenityConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "engage",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~engage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{engage}",
    "description": " Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n you'd like to use in any subsequent call to {@link actorCalled}.\n\n This function provides an alternative to calling {@link Actor#whoCan}\n directly in your tests and you'd typically us it in a \"before each\"\n hook of your test runner of choice.\n\n This function is an alias for {@link Serenity#engage}.",
    "examples": [
      "<caption>Engaging a cast of actors</caption>\n import { Actor, Cast } from '@serenity-js/core';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(\n             // ... abilities you'd like the Actor to have\n         );\n     }\n }\n\nengage(new Actors();",
      "<caption>Usage with Jasmine</caption>\n import 'jasmine';\n\n beforeEach(() => engage(new Actors()));",
      "<caption>Usage with Cucumber</caption>\n import { Before } from 'cucumber';\n\n Before(() => engage(new Actors());"
    ],
    "see": [
      "{@link Actor}",
      "{@link Cast}",
      "{@link Serenity#engage}"
    ],
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "actorCalled",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~actorCalled",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{actorCalled}",
    "description": " Instantiates or retrieves an actor {@link Actor}\n called `name` if one has already been instantiated.\n\n This method is an alias for {@link Serenity#theActorCalled}.",
    "examples": [
      "<caption>Usage with Jasmine</caption>\n  import 'jasmine';\n  import { actorCalled } from '@serenity-js/core';\n\n  describe('Feature', () => {\n\n     it('should have some behaviour', () =>\n         actorCalled('James').attemptsTo(\n             // ... activities\n         ));\n  });",
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link Actor}",
      "{@link Cast}",
      "{@link Serenity#theActorCalled}"
    ],
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the actor to instantiate or retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "actorInTheSpotlight",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~actorInTheSpotlight",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{actorInTheSpotlight}",
    "description": " Retrieves an actor who was last instantiated or retrieved\n using {@link actorCalled}.\n\n This function is particularly useful when automating Cucumber scenarios.\n\n This function is an alias for {@link Serenity#theActorInTheSpotlight}.",
    "examples": [
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given, When } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));\n\n  When(/(?:he|she|they) browse their recent orders/, () =>\n     actorInTheSpotlight().attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link actorCalled}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/io/AssertionReportDiffer.ts",
    "content": "import { Change, diffLines } from 'diff';\n\nexport class AssertionReportDiffer {\n    constructor(private readonly mappers: AssertionReportDiffMappers) {\n    }\n\n    diff(expectedValue: string, actualValue: string): string {\n        const changes = diffLines(actualValue, expectedValue)\n            .map(change => this.markChanges(change));\n\n        return [\n            `Difference (${ this.mappers.expected('expected') }, ${ this.mappers.actual('actual') }):`,\n            '',\n            changes.length === 2\n                ? changes.join('\\n')\n                : changes.join(''),\n        ].join('\\n');\n    }\n\n    private markChanges(change: Change): string {\n\n        return !! change.added\n            ? this.eachLineOf(change.value, this.mappers.expected)\n            : change.removed\n                ? this.eachLineOf(change.value, this.mappers.actual)\n                : this.eachLineOf(change.value, this.mappers.matching);\n    }\n\n    private eachLineOf(lines: string, mapper: (line: string) => string): string {\n        return lines.split('\\n').map(line => !! line.trim() ? mapper(line) : line).join('\\n');\n    }\n}\n\nexport interface AssertionReportDiffMappers {\n    expected:   (line: string) => string;\n    actual:     (line: string) => string;\n    matching:   (line: string) => string;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/AssertionReportDiffer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "AssertionReportDiffer",
    "memberof": "src/io/AssertionReportDiffer.ts",
    "static": true,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{AssertionReportDiffer}",
    "description": " ",
    "lineNumber": 3,
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "diff",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#diff",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "actualValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "markChanges",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#markChanges",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Change"
        ],
        "spread": false,
        "optional": false,
        "name": "change",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "eachLineOf",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#eachLineOf",
    "access": "private",
    "description": " ",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lines",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/io/ErrorSerialiser.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport * as serenitySpecificErrors from '../errors';\n\n/**\n *\n * @extends {tiny-types~JSONObject}\n * @public\n */\nexport interface SerialisedError extends JSONObject {\n    /**\n     *  Name of the constructor function used to instantiate\n     *  the original {@link Error} object.\n     */\n    name:    string;\n\n    /**\n     *  Message of the original {@link Error} object\n     */\n    message: string;\n\n    /**\n     *  Stack trace of the original {@link Error} object\n     */\n    stack:   string;\n}\n\nexport class ErrorSerialiser {\n    private static recognisedErrors = [\n        ...Object.keys(serenitySpecificErrors).map(key => serenitySpecificErrors[key]),\n        Error,\n        EvalError,\n        RangeError,\n        ReferenceError,\n        SyntaxError,\n        TypeError,\n        URIError,\n    ];\n\n    static serialise(error: Error): SerialisedError {\n        // todo: serialise the cause map well\n        return Object.getOwnPropertyNames(error).reduce((serialised, key) => {\n            serialised[key] = error[key];\n            return serialised;\n        }, { name: error.constructor.name || error.name }) as SerialisedError;\n    }\n\n    static deserialise<E extends Error>(serialisedError: SerialisedError): E {\n        // todo: de-serialise the cause map well\n        const constructor = ErrorSerialiser.recognisedErrors.find(errorType => errorType.name === serialisedError.name) || Error;\n        const deserialised = Object.create(constructor.prototype);\n        for (const prop in serialisedError) {\n            if (serialisedError.hasOwnProperty(prop)) {\n                deserialised[prop] = serialisedError[prop];\n            }\n        }\n        return deserialised;\n    }\n\n    static deserialiseFromStackTrace(stack: string) {\n        const lines = stack.split('\\n');\n\n        const pattern = /^([^\\s:]*Error):\\s(.*)$/;\n        if (! pattern.test(lines[0])) {\n            return new Error(stack);\n        }\n\n        const [, name, message ] = lines[0].match(pattern);\n\n        return ErrorSerialiser.deserialise({ name, message, stack });\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/ErrorSerialiser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "SerialisedError",
    "memberof": "src/io/ErrorSerialiser.ts",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{SerialisedError}",
    "description": "",
    "lineNumber": 16,
    "interface": true,
    "extends": [
      "JSONObject"
    ]
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "name",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#name",
    "access": "public",
    "description": "Name of the constructor function used to instantiate\nthe original {@link Error} object. ",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "message",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#message",
    "access": "public",
    "description": "Message of the original {@link Error} object ",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "stack",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#stack",
    "access": "public",
    "description": "Stack trace of the original {@link Error} object ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "ErrorSerialiser",
    "memberof": "src/io/ErrorSerialiser.ts",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{ErrorSerialiser}",
    "description": " ",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "recognisedErrors",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.recognisedErrors",
    "access": "private",
    "description": " ",
    "lineNumber": 28,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "serialise",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.serialise",
    "access": "public",
    "description": " ",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SerialisedError"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "deserialise",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.deserialise",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerialisedError"
        ],
        "spread": false,
        "optional": false,
        "name": "serialisedError",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "E"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "deserialiseFromStackTrace",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.deserialiseFromStackTrace",
    "access": "public",
    "description": " ",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stack",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/io/ErrorStackParser.ts",
    "content": "import * as parser from 'error-stack-parser';\n\n/**\n * @desc\n *  A thin wrapper around error-stack-parser module\n *\n * @see https://www.npmjs.com/package/error-stack-parser\n *\n * @package\n */\nexport class ErrorStackParser {\n    parse(error: Error): parser.StackFrame[] {\n        return parser.parse(error);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/ErrorStackParser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "ErrorStackParser",
    "memberof": "src/io/ErrorStackParser.ts",
    "static": true,
    "longname": "src/io/ErrorStackParser.ts~ErrorStackParser",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/io/ErrorStackParser.ts",
    "importStyle": "{ErrorStackParser}",
    "description": " A thin wrapper around error-stack-parser module",
    "see": [
      "https://www.npmjs.com/package/error-stack-parser"
    ],
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "parse",
    "memberof": "src/io/ErrorStackParser.ts~ErrorStackParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ErrorStackParser.ts~ErrorStackParser#parse",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/io/FileSystem.ts",
    "content": "import * as nodeFS from 'fs';\nimport * as gracefulFS from 'graceful-fs';\nimport { promisify } from 'util';\n\nimport { Path } from './Path';\n\nexport class FileSystem {\n\n    constructor(\n        private readonly root: Path,\n        private readonly fs: typeof nodeFS = gracefulFS,\n        private readonly directoryMode = parseInt('0777', 8) & (~process.umask()),\n    ) {\n    }\n\n    public store(relativeOrAbsolutePathToFile: Path, data: any, encoding?: string): Promise<Path> {\n        return Promise.resolve()\n            .then(() => this.ensureDirectoryExistsAt(relativeOrAbsolutePathToFile.directory()))\n            .then(() => this.write(this.root.resolve(relativeOrAbsolutePathToFile), data, encoding));\n    }\n\n    public createWriteStreamTo(relativeOrAbsolutePathToFile: Path): nodeFS.WriteStream {\n        return this.fs.createWriteStream(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public stat(relativeOrAbsolutePathToFile: Path): Promise<nodeFS.Stats> {\n        const stat = promisify(this.fs.stat);\n\n        return stat(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public remove(relativeOrAbsolutePathToFileOrDirectory: Path): Promise<void> {\n        const stat = promisify(this.fs.stat),\n            unlink = promisify(this.fs.unlink),\n            readdir = promisify(this.fs.readdir),\n            rmdir = promisify(this.fs.rmdir);\n\n        const absolutePath = this.root.resolve(relativeOrAbsolutePathToFileOrDirectory);\n\n        return stat(absolutePath.value)\n            .then(result =>\n                    result.isFile()\n                        ? unlink(absolutePath.value)\n                        : readdir(absolutePath.value).then(entries =>\n                            Promise.all(entries.map(entry =>\n                                this.remove(absolutePath.join(new Path(entry)))),\n                            ).then(() => rmdir(absolutePath.value)),\n                        ),\n                )\n            .then(() => void 0);\n    }\n\n    public ensureDirectoryExistsAt(relativeOrAbsolutePathToDirectory: Path): Promise<Path> {\n\n        const absolutePath = this.root.resolve(relativeOrAbsolutePathToDirectory);\n\n        return absolutePath.split().reduce((promisedParent, child) => {\n            return promisedParent.then(parent => new Promise((resolve, reject) => {\n                const current = parent.resolve(new Path(child));\n\n                this.fs.mkdir(current.value, this.directoryMode, error => {\n                    if (! error || error.code === 'EEXIST') {\n                        return resolve(current);\n                    }\n\n                    // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.\n                    if (error.code === 'ENOENT') { // Throw the original parentDir error on `current` `ENOENT` failure.\n                        throw new Error(`EACCES: permission denied, mkdir '${ parent.value }'`);\n                    }\n\n                    const caughtErr = !! ~['EACCES', 'EPERM', 'EISDIR'].indexOf(error.code);\n                    if (! caughtErr || (caughtErr && current.equals(relativeOrAbsolutePathToDirectory))) {\n                        throw error; // Throw if it's just the last created dir.\n                    }\n\n                    return resolve(current);\n                });\n            }));\n        }, Promise.resolve(absolutePath.root()));\n    }\n\n    public rename(source: Path, destination: Path): Promise<void> {\n        const rename = promisify(this.fs.rename);\n\n        return rename(source.value, destination.value);\n    }\n\n    private write(path: Path, data: any, encoding?: string): Promise<Path> {\n        return new Promise((resolve, reject) => {\n            this.fs.writeFile(\n                path.value,\n                data,\n                encoding,\n                error => error\n                    ? reject(error)\n                    : resolve(path),\n            );\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/FileSystem.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "FileSystem",
    "memberof": "src/io/FileSystem.ts",
    "static": true,
    "longname": "src/io/FileSystem.ts~FileSystem",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{FileSystem}",
    "description": " ",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "store",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#store",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "createWriteStreamTo",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#createWriteStreamTo",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "stat",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#stat",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "remove",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#remove",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFileOrDirectory",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "ensureDirectoryExistsAt",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#ensureDirectoryExistsAt",
    "access": "public",
    "description": " ",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToDirectory",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "rename",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#rename",
    "access": "public",
    "description": " ",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "write",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#write",
    "access": "private",
    "description": " ",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/io/FileSystemLocation.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\nimport { Path } from './Path';\n\nexport class FileSystemLocation extends TinyType {\n    static fromJSON = (o: JSONObject) => new FileSystemLocation(\n        Path.fromJSON(o.path as string),\n        o.line as number,\n        o.column as number,\n    )\n\n    constructor(\n        public readonly path: Path,\n        public readonly line?: number,\n        public readonly column?: number,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/FileSystemLocation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "FileSystemLocation",
    "memberof": "src/io/FileSystemLocation.ts",
    "static": true,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{FileSystemLocation}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "static": true,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/io/ModuleLoader.ts",
    "content": "const Module = require('module');             // tslint:disable-line:no-var-requires     No type definitions available\nimport * as path from 'path';\nimport { Version } from './Version';\n\nexport class ModuleLoader {\n    constructor(public readonly cwd: string) {\n    }\n\n    /**\n     * @package\n     *\n     * @param moduleId\n     *  NPM module id, for example 'cucumber' or '@serenity-js/core'\n     */\n    resolve(moduleId: string): string {\n        const fromFile = path.join(this.cwd, 'noop.js');\n\n        return Module._resolveFilename(moduleId, {\n            id: fromFile,\n            filename: fromFile,\n            paths: Module._nodeModulePaths(this.cwd),\n        });\n    }\n\n    require(moduleId: string): any {\n        try {\n            return require(this.resolve(moduleId));\n        }\n        catch (e) {\n            return require(moduleId);\n        }\n    }\n\n    versionOf(moduleId: string): Version {\n        return new Version(this.require(`${ moduleId }/package`).version);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/ModuleLoader.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "Module",
    "memberof": "src/io/ModuleLoader.ts",
    "static": true,
    "longname": "src/io/ModuleLoader.ts~Module",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/io/ModuleLoader.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "class",
    "name": "ModuleLoader",
    "memberof": "src/io/ModuleLoader.ts",
    "static": true,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{ModuleLoader}",
    "description": " ",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 210,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#resolve",
    "access": "package",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": "NPM module id, for example 'cucumber' or '@serenity-js/core'"
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "require",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#require",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "versionOf",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#versionOf",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Version"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/io/Path.ts",
    "content": "import { ensure, isDefined, isGreaterThan, property, TinyType } from 'tiny-types';\n\nimport filenamify = require('filenamify');\nimport path = require('upath');\n\nexport class Path extends TinyType {\n    private static readonly Separator = '/';\n    public readonly value: string;\n\n    static fromJSON = (v: string) => new Path(v);\n\n    static fromSanitisedString(value: string) {\n        const\n            normalised = path.normalize(value).replace(/[\\/\\\\\"':]/gi, ''),\n            extension  = path.extname(normalised),\n            basename   = path.basename(normalised, extension),\n            filename   = filenamify(basename, { replacement: '-', maxLength: 250 })\n                .trim()\n                .replace(/[\\s-]+/g, '-');\n\n        return new Path(path.join(\n            path.dirname(normalised),\n            `${ filename }${ extension }`,\n        ));\n    }\n\n    constructor(value: string) {\n        super();\n        ensure(Path.name, value, isDefined(), property('length', isGreaterThan(0)));\n\n        this.value = path.normalize(value);\n    }\n\n    join(another: Path) {\n        return new Path(path.join(this.value, another.value));\n    }\n\n    split(): string[] {\n        return this.value\n            .split(Path.Separator)\n            .filter(segment => !! segment); // so that we ignore the trailing path separator in absolute paths\n    }\n\n    resolve(another: Path) {\n        return new Path(path.resolve(this.value, another.value));\n    }\n\n    directory() {\n        return new Path(path.dirname(this.value));\n    }\n\n    basename(): string {\n        return path.basename(this.value);\n    }\n\n    isAbsolute(): boolean {\n        return path.isAbsolute(this.value);\n    }\n\n    root(): Path {\n        return new Path(path.parse(this.value).root);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/Path.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "Path",
    "memberof": "src/io/Path.ts",
    "static": true,
    "longname": "src/io/Path.ts~Path",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{Path}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "Separator",
    "memberof": "src/io/Path.ts~Path",
    "static": true,
    "longname": "src/io/Path.ts~Path.Separator",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "value",
    "memberof": "src/io/Path.ts~Path",
    "static": false,
    "longname": "src/io/Path.ts~Path#value",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/io/Path.ts~Path",
    "static": true,
    "longname": "src/io/Path.ts~Path.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "fromSanitisedString",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Path.ts~Path.fromSanitisedString",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "join",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#join",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "split",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#split",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#resolve",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "directory",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#directory",
    "access": "public",
    "description": " ",
    "lineNumber": 48,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "basename",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#basename",
    "access": "public",
    "description": " ",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "isAbsolute",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#isAbsolute",
    "access": "public",
    "description": " ",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "root",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#root",
    "access": "public",
    "description": " ",
    "lineNumber": 60,
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/io/Version.ts",
    "content": "import semver = require('semver');\nimport { ensure, isDefined, isString, Predicate, TinyType } from 'tiny-types';\n\nexport class Version extends TinyType {\n\n    static fromJSON(version: string) {\n        return new Version(version);\n    }\n\n    constructor(private readonly version: string) {\n        super();\n        ensure('version', version, isDefined(), isString(), isValid());\n    }\n\n    isAtLeast(other: Version) {\n        return semver.gte(this.version, other.version);\n    }\n\n    major(): number {\n        return Number(this.version.split('.')[0]);\n    }\n\n    toString() {\n        return `${ this.version }`;\n    }\n}\n\nfunction isValid(): Predicate<string> {\n    return Predicate.to(`be a valid version number`, (version: string) =>\n        !! semver.valid(version),\n    );\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/Version.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "Version",
    "memberof": "src/io/Version.ts",
    "static": true,
    "longname": "src/io/Version.ts~Version",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{Version}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Version.ts~Version.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "isAtLeast",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#isAtLeast",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "major",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#major",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "toString",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "isValid",
    "memberof": "src/io/Version.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Version.ts~isValid",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/io/Version.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/io/formatted.ts",
    "content": "import { Answerable } from '../screenplay/Answerable';\nimport { inspected } from './inspected';\n\n/**\n * @desc\n *  A tag function returning a human-readable description of a template containing one or more {@link Answerable}s.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n *\n * @param {TemplateStringsArray} templates\n * @param {Array<Answerable<any>>} placeholders\n * @returns {string}\n */\nexport function formatted(templates: TemplateStringsArray, ...placeholders: Array<Answerable<any>>) {\n    const compacted = (multiline: string) => multiline.replace(/\\r?\\n/g, ' ').replace(/\\s+/g, ' ');\n\n    return templates\n        .map((template, i) => i < placeholders.length\n            ? [ template, compacted(inspected(placeholders[i])) ]\n            : [ template ])\n        .reduce((acc, tuple) => acc.concat(tuple))\n        .join('');\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/formatted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "formatted",
    "memberof": "src/io/formatted.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/formatted.ts~formatted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{formatted}",
    "description": " A tag function returning a human-readable description of a template containing one or more {@link Answerable}s.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TemplateStringsArray"
        ],
        "spread": false,
        "optional": false,
        "name": "templates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholders",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "src/io/index.ts",
    "content": "export * from './AssertionReportDiffer';\nexport * from './ErrorSerialiser';\nexport * from './ErrorStackParser';\nexport * from './FileSystem';\nexport * from './FileSystemLocation';\nexport * from './formatted';\nexport * from './ModuleLoader';\nexport * from './Path';\nexport * from './trimmed';\nexport * from './Version';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/io/inspected.ts",
    "content": "import { inspect } from 'util';\nimport { Answerable } from '../screenplay/Answerable';\nimport { Question } from '../screenplay/Question';\n\n/**\n * @desc\n *  Provides a human-readable description of the {@link Answerable<T>}.\n *  Similar to {@link util~inspect}.\n *\n * @public\n * @param {Answerable<any>} value\n * @return {string}\n */\nexport function inspected(value: Answerable<any>): string {\n    if (! isDefined(value)) {\n        return inspect(value);\n    }\n\n    if (Array.isArray(value)) {\n        return [\n            '[',\n            value.map(item => `  ${ inspected(item) }`).join(',\\n'),\n            ']',\n        ].join('\\n');\n    }\n\n    if (isAPromise(value)) {\n        return `a Promise`;\n    }\n\n    if (Question.isAQuestion(value)) {\n        return value.toString();\n    }\n\n    if (isADate(value)) {\n        return value.toISOString();\n    }\n\n    if (hasItsOwnToString(value)) {\n        return value.toString();\n    }\n\n    if (isInspectable(value)) {\n        return value.inspect();\n    }\n\n    if (isANamedFunction(value)) {\n        return `${ value.name } property`;\n    }\n\n    return inspect(value, { breakLength: Infinity, compact: true, sorted: false  });\n}\n\n/**\n * @desc\n * Checks if the value is defined\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isDefined(v: Answerable<any>) {\n    return !! v;\n}\n\n/**\n * @desc\n * Checks if the value defines its own `toString` method\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction hasItsOwnToString(v: Answerable<any>): v is { toString: () => string } {\n    return typeof v === 'object'\n        && !! (v as any).toString\n        && typeof (v as any).toString === 'function'\n        && ! isNative((v as any).toString);\n}\n\n/**\n * @desc\n * Checks if the value defines its own `inspect` method\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isInspectable(v: Answerable<any>): v is { inspect: () => string } {\n    return !! (v as any).inspect && typeof (v as any).inspect === 'function';\n}\n\n/**\n * @desc\n * Checks if the value is a {@link Date}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isADate(v: Answerable<any>): v is Date {\n    return v instanceof Date;\n}\n\n/**\n * @desc\n * Checks if the value is a {@link Promise}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isAPromise<T>(v: Answerable<T>): v is Promise<T> {\n    return !! (v as any).then;\n}\n\n/**\n * @desc\n * Checks if the value is a named {@link Function}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isANamedFunction<T>(v: any): v is { name: string } {\n    return {}.toString.call(v) === '[object Function]' && (v as any).name !== '';\n}\n\n/**\n * https://davidwalsh.name/detect-native-function\n * @param {any} v\n */\nfunction isNative(v: any): v is Function {      // tslint:disable-line:ban-types\n\n    const\n        toString        = Object.prototype.toString,       // Used to resolve the internal `[[Class]]` of values\n        fnToString      = Function.prototype.toString,   // Used to resolve the decompiled source of functions\n        hostConstructor = /^\\[object .+?Constructor\\]$/; // Used to detect host constructors (Safari > 4; really typed array specific)\n\n    // Compile a regexp using a common native method as a template.\n    // We chose `Object#toString` because there's a good chance it is not being mucked with.\n    const nativeFnTemplate = RegExp(\n        '^' +\n        // Coerce `Object#toString` to a string\n        String(toString)\n        // Escape any special regexp characters\n            .replace(/[.*+?^${}()|[\\]\\/\\\\]/g, '\\\\$&')\n            // Replace mentions of `toString` with `.*?` to keep the template generic.\n            // Replace thing like `for ...` to support environments like Rhino which add extra info\n            // such as method arity.\n            .replace(/toString|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') +\n        '$',\n    );\n\n    const type = typeof v;\n    return type === 'function'\n        // Use `Function#toString` to bypass the value's own `toString` method\n        // and avoid being faked out.\n        ? nativeFnTemplate.test(fnToString.call(v))\n        // Fallback to a host object check because some environments will represent\n        // things like typed arrays as DOM methods which may not conform to the\n        // normal native pattern.\n        : (v && type === 'object' && hostConstructor.test(toString.call(v))) || false;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/inspected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "inspected",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~inspected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{inspected}",
    "description": " Provides a human-readable description of the {@link Answerable<T>}.\n Similar to {@link util~inspect}.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "isDefined",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isDefined",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is defined",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "hasItsOwnToString",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~hasItsOwnToString",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value defines its own `toString` method",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "isInspectable",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isInspectable",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value defines its own `inspect` method",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "isADate",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isADate",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a {@link Date}",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "isAPromise",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isAPromise",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a {@link Promise}",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "isANamedFunction",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isANamedFunction",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a named {@link Function}",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "isNative",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isNative",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "https://davidwalsh.name/detect-native-function ",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/io/proxies.ts",
    "content": "export interface Dictionary {\n    [key: string]: any;\n}\n\n/**\n * @private\n */\nexport function caseInsensitive<T extends Dictionary>(dictionary: T): T & Dictionary {\n    return new Proxy(dictionary, {\n        get: <K extends keyof T & string>(obj: T & Dictionary, key: K) => {\n            const found = Object.keys(obj)\n                .find(k => k.toLocaleLowerCase() === key.toLocaleLowerCase());\n\n            return found && obj[found];\n        },\n    });\n}\n\n// todo: would this work for optional fields? parent.child.child.child -> undefined ?\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/proxies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "caseInsensitive",
    "memberof": "src/io/proxies.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/proxies.ts~caseInsensitive",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/core/src/io/proxies.ts",
    "importStyle": "{caseInsensitive}",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "dictionary",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/io/trimmed.ts",
    "content": "/**\n * @desc\n *  A tag function trimming the leading and trailing whitespace from multi-line strings.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n *\n * @param {TemplateStringsArray} templates\n * @param {Array<string>} placeholders\n * @returns {string}\n */\nexport function trimmed(templates: TemplateStringsArray, ...placeholders: string[]) {\n\n    const lines = templates\n        .map((template, i) => i < placeholders.length\n            ? [ template, placeholders[i] ]\n            : [ template ])\n        .reduce((acc, tuple) => acc.concat(tuple))\n        .join('')\n        .split('\\n');\n\n    const nonEmptyLines = lines\n        .map(line => line.trim())\n        .filter(line => !! line);\n\n    return nonEmptyLines\n        .map(line => line.replace(/\\|\\s?(.*)$/, '$1\\n'))\n        .join('');\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/io/trimmed.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "trimmed",
    "memberof": "src/io/trimmed.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/trimmed.ts~trimmed",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{trimmed}",
    "description": " A tag function trimming the leading and trailing whitespace from multi-line strings.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TemplateStringsArray"
        ],
        "spread": false,
        "optional": false,
        "name": "templates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholders",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/model/ActivityDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { CorrelationId } from './CorrelationId';\nimport { Name } from './Name';\n\nexport class ActivityDetails extends TinyType {\n    static fromJSON(o: JSONObject) {\n        return new ActivityDetails(\n            Name.fromJSON(o.name as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n        );\n    }\n\n    // todo: might need to add a correlation id\n    constructor(\n        public readonly name: Name,\n        public readonly correlationId: CorrelationId = CorrelationId.create(),\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/ActivityDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "ActivityDetails",
    "memberof": "src/model/ActivityDetails.ts",
    "static": true,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ActivityDetails}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ActivityDetails.ts~ActivityDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ActivityDetails.ts~ActivityDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/model/Artifact.ts",
    "content": "import { ensure, isDefined, isString, JSONObject, Predicate, TinyType } from 'tiny-types';\n\nimport { LogicError } from '../errors';\nimport * as artifacts from './artifacts';\n\nexport interface SerialisedArtifact extends JSONObject {\n    type: string;\n    base64EncodedValue: string;\n}\n\nexport type ArtifactType = new (base64EncodedValue: string) => Artifact;\n\n/**\n * @extends {tiny-types~TinyType}\n */\nexport abstract class Artifact extends TinyType {\n    static fromJSON(o: SerialisedArtifact) {\n        const\n            recognisedTypes = Object.keys(artifacts),\n            type            = Artifact.ofType(o.type);\n\n        if (! type) {\n            throw new LogicError(`\n                Couldn't de-serialise artifact of an unknown type.\n                ${o.type} is not one of the recognised types: ${recognisedTypes.join(', ')}\n           `);\n        }\n\n        return new type(o.base64EncodedValue);\n    }\n\n    static ofType(name: string): ArtifactType | undefined {\n        const\n            types = Object.keys(artifacts),\n            type = types.find(constructorName => constructorName === name);\n\n        return artifacts[type];\n    }\n\n    constructor(public readonly base64EncodedValue: string) {\n        super();\n        ensure(this.constructor.name, base64EncodedValue, isDefined(), isString(), looksLikeBase64Encoded());\n    }\n\n    abstract map<T>(fn: (decodedValue: any) => T): T;\n\n    toJSON(): SerialisedArtifact {\n        return ({\n            type: this.constructor.name,\n            base64EncodedValue: this.base64EncodedValue,\n        });\n    }\n}\n\nfunction looksLikeBase64Encoded(): Predicate<string> {\n    const regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\n\n    return Predicate.to(`be base64-encoded`, (value: string) => regex.test(value));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Artifact.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "Artifact",
    "memberof": "src/model/Artifact.ts",
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Artifact}",
    "description": "",
    "lineNumber": 59,
    "interface": false,
    "extends": [
      "TinyType"
    ]
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerialisedArtifact"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "ofType",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact.ofType",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArtifactType ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Artifact.ts~Artifact#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Artifact.ts~Artifact#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedArtifact"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "looksLikeBase64Encoded",
    "memberof": "src/model/Artifact.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~looksLikeBase64Encoded",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/model/Artifact.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 55,
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "src/model/Category.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Category extends TinyType {\n    static fromJSON(v: string) {\n        return new Category(v);\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Category.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "Category",
    "memberof": "src/model/Category.ts",
    "static": true,
    "longname": "src/model/Category.ts~Category",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Category}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Category.ts~Category",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Category.ts~Category.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Category.ts~Category",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Category.ts~Category#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "src/model/CorrelationId.ts",
    "content": "import * as cuid from 'cuid';\nimport { TinyType, TinyTypeOf } from 'tiny-types';\n\nexport class CorrelationId extends TinyTypeOf<string>() {\n    static fromJSON(v: string) {\n        return new CorrelationId(v);\n    }\n\n    static create() {\n        return new CorrelationId(cuid());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/CorrelationId.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "class",
    "name": "CorrelationId",
    "memberof": "src/model/CorrelationId.ts",
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{CorrelationId}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "expressionExtends": ""
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/CorrelationId.ts~CorrelationId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "create",
    "memberof": "src/model/CorrelationId.ts~CorrelationId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId.create",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "src/model/Description.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Description extends TinyType {\n    public readonly value: string;\n\n    static fromJSON(v: string) {\n        return new Description(v);\n    }\n\n    constructor(value: string) {\n        super();\n        ensure('value', value, isDefined());\n\n        this.value = value.split('\\n').map(line => line.trim()).join('\\n');\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Description.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "Description",
    "memberof": "src/model/Description.ts",
    "static": true,
    "longname": "src/model/Description.ts~Description",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Description}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "value",
    "memberof": "src/model/Description.ts~Description",
    "static": false,
    "longname": "src/model/Description.ts~Description#value",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Description.ts~Description",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Description.ts~Description.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Description.ts~Description",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Description.ts~Description#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "src/model/Duration.ts",
    "content": "import { TinyType } from 'tiny-types';\n\nexport class Duration extends TinyType {\n\n    private static msPerSecond = 1000;\n    private static msPerMinute = Duration.msPerSecond * 60;\n    private static msPerHour   = Duration.msPerMinute * 60;\n    private static msPerDay    = Duration.msPerHour * 24;\n    private static msPerYear   = Duration.msPerDay * 365;\n\n    static ofMilliseconds   = (milliseconds: number) => new Duration(milliseconds);\n    static ofSeconds        = (seconds: number)      => Duration.ofMilliseconds(seconds  * Duration.msPerSecond);\n    static ofMinutes        = (minutes: number)      => Duration.ofMilliseconds(minutes  * Duration.msPerMinute);\n    static ofHours          = (hours: number)        => Duration.ofMilliseconds(hours    * Duration.msPerHour);\n    static ofDays           = (days: number)         => Duration.ofMilliseconds(days     * Duration.msPerDay);\n    static ofYears          = (years: number)        => Duration.ofMilliseconds(years    * Duration.msPerYear);\n\n    constructor(private readonly milliseconds: number) {\n        super();\n    }\n\n    plus(another: Duration) {\n        return new Duration(this.milliseconds + another.milliseconds);\n    }\n\n    inMilliseconds(): number {\n        return this.milliseconds;\n    }\n\n    toString() {\n        const ms = this.milliseconds;\n\n        // tslint:disable:space-within-parens\n        const levels = [\n            [ Math.floor(   ms / Duration.msPerYear), 'y'],\n            [ Math.floor(  (ms % Duration.msPerYear) / Duration.msPerDay), 'd'],\n            [ Math.floor( ((ms % Duration.msPerYear) % Duration.msPerDay) / Duration.msPerHour), 'h'],\n            [ Math.floor((((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) / Duration.msPerMinute), 'm'],\n            [ Math.floor((((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) % Duration.msPerMinute / Duration.msPerSecond), 's'],\n            [ (((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) % Duration.msPerMinute % Duration.msPerSecond, 'ms'],\n        ];\n        // tslint:enable:space-within-parens\n\n        return levels.reduce((acc, l, i) => l[0] > 0 || i === levels.length\n            ? `${ acc } ${ l[0] }${ l[1] }`\n            : acc,\n        '').trim() || '0ms';\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Duration.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "class",
    "name": "Duration",
    "memberof": "src/model/Duration.ts",
    "static": true,
    "longname": "src/model/Duration.ts~Duration",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Duration}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "msPerSecond",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerSecond",
    "access": "private",
    "description": " ",
    "lineNumber": 5,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "msPerMinute",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerMinute",
    "access": "private",
    "description": " ",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "msPerHour",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerHour",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "msPerDay",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerDay",
    "access": "private",
    "description": " ",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "msPerYear",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerYear",
    "access": "private",
    "description": " ",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "ofMilliseconds",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofMilliseconds",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "ofSeconds",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofSeconds",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "ofMinutes",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofMinutes",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "ofHours",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofHours",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "ofDays",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofDays",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "ofYears",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofYears",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "plus",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#plus",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "inMilliseconds",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#inMilliseconds",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "toString",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "file",
    "name": "src/model/Name.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Name extends TinyType {\n    static fromJSON(v: string) {\n        return new Name(v);\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Name.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "class",
    "name": "Name",
    "memberof": "src/model/Name.ts",
    "static": true,
    "longname": "src/model/Name.ts~Name",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Name}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Name.ts~Name",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Name.ts~Name.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Name.ts~Name",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Name.ts~Name#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/model/ScenarioDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { FileSystemLocation } from '../io';\nimport { Category } from './Category';\nimport { Name } from './Name';\n\nexport class ScenarioDetails extends TinyType {\n    static fromJSON(o: JSONObject) {\n        return new ScenarioDetails(\n            Name.fromJSON(o.name as string),\n            Category.fromJSON(o.category as string),\n            FileSystemLocation.fromJSON(o.location as JSONObject),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly category: Category,\n        public readonly location: FileSystemLocation,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/ScenarioDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "ScenarioDetails",
    "memberof": "src/model/ScenarioDetails.ts",
    "static": true,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ScenarioDetails}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "src/model/ScenarioParameters.ts",
    "content": "import { ensure, isDefined, JSONObject, TinyType } from 'tiny-types';\n\nimport { Description } from './Description';\nimport { Name } from './Name';\n\nexport class ScenarioParameters extends TinyType {\n    public static fromJSON(o: JSONObject) {\n        return new ScenarioParameters(\n            Name.fromJSON(o.name as string),\n            o.description && Description.fromJSON(o.description as string),\n            (o as any).values,\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly description: Description,\n        public readonly values: { [ parameter: string ]: string },\n    ) {\n        super();\n\n        ensure('name', name, isDefined());\n        ensure('values', values, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/ScenarioParameters.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "ScenarioParameters",
    "memberof": "src/model/ScenarioParameters.ts",
    "static": true,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ScenarioParameters}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/model/TestSuiteDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\nimport { FileSystemLocation } from '../io';\nimport { CorrelationId } from './CorrelationId';\nimport { Name } from './Name';\n\nexport class TestSuiteDetails extends TinyType {\n    static fromJSON(o: JSONObject) {\n        return new TestSuiteDetails(\n            Name.fromJSON(o.name as string),\n            FileSystemLocation.fromJSON(o.location as JSONObject),\n            CorrelationId.fromJSON(o.correlationId as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly location: FileSystemLocation,\n        public readonly correlationId: CorrelationId = CorrelationId.create(),\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/TestSuiteDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "class",
    "name": "TestSuiteDetails",
    "memberof": "src/model/TestSuiteDetails.ts",
    "static": true,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{TestSuiteDetails}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "src/model/Timestamp.ts",
    "content": "import * as moment from 'moment';\nimport { ensure, isDefined, Predicate, TinyType } from 'tiny-types';\n\nimport { Duration } from './Duration';\n\nexport class Timestamp extends TinyType {\n    static fromJSON(v: string) {\n        return new Timestamp(new Date(ensure(Timestamp.name, v, isSerialisedISO8601Date())));\n    }\n\n    static fromMillisecondTimestamp(v: number) {\n        return new Timestamp(moment(v).toDate());\n    }\n\n    constructor(public readonly value: Date = new Date()) {\n        super();\n        ensure(Timestamp.name, value, isDefined(), isInstanceOf(Date));\n    }\n\n    diff(another: Timestamp): Duration {\n        return new Duration(Math.abs(moment(this.value).diff(another.value, 'ms', true)));\n    }\n\n    plus(duration: Duration): Timestamp {\n        return new Timestamp(moment(this.value).add(duration.inMilliseconds(), 'ms').toDate());\n    }\n\n    less(duration: Duration): Timestamp {\n        return new Timestamp(moment(this.value).subtract(duration.inMilliseconds(), 'ms').toDate());\n    }\n\n    toMillisecondTimestamp(): number {\n        return moment(this.value).valueOf();\n    }\n\n    toJSON(): string {\n        return this.value.toJSON();\n    }\n\n    toString(): string {\n        return this.value.toString();\n    }\n}\n\nfunction isSerialisedISO8601Date(): Predicate<string> {\n    return Predicate.to(`be an ISO-8601-compliant date`, (value: string) =>\n        moment(value, moment.ISO_8601, true).isValid());\n}\n\nfunction isInstanceOf<T>(type: Function & (new (...args: any[]) => T)): Predicate<T> {                                           // tslint:disable-line:ban-types\n    return Predicate.to(`be an instance of ${ type.name }`, (value: T) =>\n        value instanceof type);\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/Timestamp.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "Timestamp",
    "memberof": "src/model/Timestamp.ts",
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Timestamp}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "fromMillisecondTimestamp",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp.fromMillisecondTimestamp",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "diff",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#diff",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Timestamp"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "plus",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#plus",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "less",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#less",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "toMillisecondTimestamp",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toMillisecondTimestamp",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "toString",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "isSerialisedISO8601Date",
    "memberof": "src/model/Timestamp.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~isSerialisedISO8601Date",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/model/Timestamp.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 323,
    "kind": "function",
    "name": "isInstanceOf",
    "memberof": "src/model/Timestamp.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~isInstanceOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/model/Timestamp.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function & UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/model/artifacts/AssertionReport.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class AssertionReport extends JSONData {\n    static fromJSON(value: { expected: string, actual: string }) {\n        return new AssertionReport(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/AssertionReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "class",
    "name": "AssertionReport",
    "memberof": "src/model/artifacts/AssertionReport.ts",
    "static": true,
    "longname": "src/model/artifacts/AssertionReport.ts~AssertionReport",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{AssertionReport}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/AssertionReport.ts~AssertionReport",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/AssertionReport.ts~AssertionReport.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "file",
    "name": "src/model/artifacts/HTTPRequestResponse.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport { JSONData } from './JSONData';\n\n/**\n * @desc\n *  The value of the {@link HTTPRequestResponse} {@link Artifact} describing a HTTP request/response pair.\n *\n * @public\n */\nexport interface RequestAndResponse extends JSONObject {\n    request: {\n        url: string;\n        method: string;\n        headers: { [header: string]: string };\n        data?: any;\n    };\n    response: {\n        status: number;\n        data?: any;\n        headers?: { [header: string]: string };\n    };\n}\n\n/**\n * @desc\n *  An {@link Artifact} describing a HTTP request/response pair.\n *\n * @public\n */\nexport class HTTPRequestResponse extends JSONData {\n    static fromJSON(value: RequestAndResponse) {\n        return new HTTPRequestResponse(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/HTTPRequestResponse.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "class",
    "name": "RequestAndResponse",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts",
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{RequestAndResponse}",
    "description": " The value of the {@link HTTPRequestResponse} {@link Artifact} describing a HTTP request/response pair.",
    "lineNumber": 17,
    "interface": true,
    "extends": [
      "tiny-types~JSONObject"
    ]
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "request",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "static": false,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse#request",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "response",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "static": false,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse#response",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 331,
    "kind": "class",
    "name": "HTTPRequestResponse",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts",
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{HTTPRequestResponse}",
    "description": " An {@link Artifact} describing a HTTP request/response pair.",
    "lineNumber": 143,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "RequestAndResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "src/model/artifacts/JSONData.ts",
    "content": "import { JSONValue } from 'tiny-types';\nimport { Artifact } from '../Artifact';\n\nexport class JSONData extends Artifact {\n    static fromJSON(value: JSONValue) {\n        return new JSONData(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n\n    map<O>(fn: (decodedValue: JSONValue) => O): O {\n        return fn(JSON.parse(Buffer.from(this.base64EncodedValue, 'base64').toString('utf8')));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/JSONData.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "JSONData",
    "memberof": "src/model/artifacts/JSONData.ts",
    "static": true,
    "longname": "src/model/artifacts/JSONData.ts~JSONData",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{JSONData}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/model/Artifact.js~Artifact"
    ]
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/JSONData.ts~JSONData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/JSONData.ts~JSONData.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONValue"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/JSONData.ts~JSONData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/JSONData.ts~JSONData#map",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "O"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 337,
    "kind": "file",
    "name": "src/model/artifacts/LogEntry.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class LogEntry extends JSONData {\n    static fromJSON(value: { data: string }) {\n        return new LogEntry(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/LogEntry.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 338,
    "kind": "class",
    "name": "LogEntry",
    "memberof": "src/model/artifacts/LogEntry.ts",
    "static": true,
    "longname": "src/model/artifacts/LogEntry.ts~LogEntry",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{LogEntry}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/LogEntry.ts~LogEntry",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/LogEntry.ts~LogEntry.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "src/model/artifacts/Photo.ts",
    "content": "import { Artifact } from '../Artifact';\n\n/**\n * @public\n * @extends {Artifact}\n */\nexport class Photo extends Artifact {\n\n    /**\n     * @desc\n     * @param {string} value\n     */\n    static fromBase64(value: string): Photo {\n        return new Photo(value);\n    }\n\n    /**\n     * @desc\n     * @param {Buffer | ArrayBuffer} value\n     */\n    static fromBuffer(value: Buffer | ArrayBuffer): Photo {\n        const buffer = value instanceof ArrayBuffer\n            ? Buffer.from(value)\n            : value;\n\n        return Photo.fromBase64(buffer.toString('base64'));\n    }\n\n    /**\n     * @param fn\n     */\n    map<O>(fn: (decodedValue: Buffer) => O): O {\n        return fn(Buffer.from(this.base64EncodedValue, 'base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/Photo.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "class",
    "name": "Photo",
    "memberof": "src/model/artifacts/Photo.ts",
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{Photo}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "Artifact"
    ]
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "fromBase64",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo.fromBase64",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo.fromBuffer",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/Photo.ts~Photo#map",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "file",
    "name": "src/model/artifacts/TestReport.ts",
    "content": "import { JSONObject } from 'tiny-types';\nimport { Artifact } from '../Artifact';\n\nexport class TestReport extends Artifact {\n\n    static fromJSON(value: JSONObject) {\n        return new TestReport(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n\n    map<O>(fn: (decodedValue: JSONObject) => O): O {\n        return fn(JSON.parse(Buffer.from(this.base64EncodedValue, 'base64').toString('utf8')));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/TestReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "class",
    "name": "TestReport",
    "memberof": "src/model/artifacts/TestReport.ts",
    "static": true,
    "longname": "src/model/artifacts/TestReport.ts~TestReport",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{TestReport}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/model/Artifact.js~Artifact"
    ]
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/TestReport.ts~TestReport",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/TestReport.ts~TestReport.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/TestReport.ts~TestReport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/TestReport.ts~TestReport#map",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "O"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/model/artifacts/TextData.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class TextData extends JSONData {\n    static fromJSON(value: { contentType: string, data: string }) {\n        return new TextData(Buffer.from(JSON.stringify(value, null, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/TextData.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "TextData",
    "memberof": "src/model/artifacts/TextData.ts",
    "static": true,
    "longname": "src/model/artifacts/TextData.ts~TextData",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{TextData}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/TextData.ts~TextData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/TextData.ts~TextData.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/model/artifacts/index.ts",
    "content": "export * from './AssertionReport';\nexport * from './HTTPRequestResponse';\nexport * from './JSONData';\nexport * from './LogEntry';\nexport * from './Photo';\nexport * from './TestReport';\nexport * from './TextData';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/artifacts/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "src/model/index.ts",
    "content": "export * from './ActivityDetails';\nexport * from './artifacts';\nexport * from './Artifact';\nexport * from './Category';\nexport * from './CorrelationId';\nexport * from './Description';\nexport * from './Duration';\nexport * from './Name';\nexport * from './outcomes';\nexport * from './ScenarioDetails';\nexport * from './ScenarioParameters';\nexport * from './TestSuiteDetails';\nexport * from './tags';\nexport * from './Timestamp';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "src/model/outcomes.ts",
    "content": "import { JSONObject, match, TinyType } from 'tiny-types';\nimport { AssertionError } from '../errors';\nimport { ErrorSerialiser, SerialisedError } from '../io';\n\nexport interface SerialisedOutcome extends JSONObject {\n    code:    number;\n    error?:  SerialisedError;\n}\n\nexport abstract class Outcome extends TinyType {\n    static fromJSON = (o: SerialisedOutcome) => match(o.code)\n        .when(ExecutionCompromised.Code,                _ => ExecutionCompromised.fromJSON(o))\n        .when(ExecutionFailedWithError.Code,            _ => ExecutionFailedWithError.fromJSON(o))\n        .when(ExecutionFailedWithAssertionError.Code,   _ => ExecutionFailedWithAssertionError.fromJSON(o))\n        .when(ImplementationPending.Code,               _ => ImplementationPending.fromJSON(o))\n        .when(ExecutionSkipped.Code,                    _ => ExecutionSkipped.fromJSON(o))\n        .when(ExecutionIgnored.Code,                    _ => ExecutionIgnored.fromJSON(o))\n        .when(ExecutionSuccessful.Code,                 _ => ExecutionSuccessful.fromJSON(o))\n        .else(_ => { throw new Error(`Outcome could not be deserialised: ${ JSON.stringify(o) }`); }) as Outcome\n\n    protected constructor(protected readonly code: number) {\n        super();\n    }\n\n    isWorseThan(another: Outcome | { Code: number }): boolean {\n        const code = (another instanceof Outcome)\n            ? another.code\n            : another.Code;\n\n        return this.code < code;\n    }\n\n    toJSON(): SerialisedOutcome {\n        return {\n            code: this.code,\n        };\n    }\n}\n\nexport abstract class ProblemIndication extends Outcome {\n\n    protected constructor(public readonly error: Error, code: number) {\n        super(code);\n    }\n\n    toJSON(): SerialisedOutcome {\n        return {\n            code: this.code,\n            error: ErrorSerialiser.serialise(this.error),\n        };\n    }\n}\n\n/**\n * Indicates a failure due to external events or systems that compromise the validity of the test.\n */\nexport class ExecutionCompromised extends ProblemIndication {\n    static Code = 1 << 0;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionCompromised(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ExecutionCompromised.Code);\n    }\n}\n\n/**\n * Indicates a failure due to an error other than recognised external system and assertion failures\n */\nexport class ExecutionFailedWithError extends ProblemIndication {\n    static Code = 1 << 1;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionFailedWithError(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ExecutionFailedWithError.Code);\n    }\n}\n\n/**\n * Execution of an Activity or Scene has failed due to an assertion error;\n */\nexport class ExecutionFailedWithAssertionError extends ProblemIndication {\n    static Code = 1 << 2;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionFailedWithAssertionError(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: AssertionError) {\n        super(error, ExecutionFailedWithAssertionError.Code);\n    }\n}\n\n/**\n * A pending Activity is one that has been specified but not yet implemented.\n * A pending Scene is one that has at least one pending Activity.\n */\nexport class ImplementationPending extends ProblemIndication {\n    static Code = 1 << 3;\n\n    static fromJSON = (o: SerialisedOutcome) => new ImplementationPending(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ImplementationPending.Code);\n    }\n}\n\n/**\n * The Activity was not executed because a previous one has failed.\n * A whole Scene can be marked as skipped to indicate that it is currently \"work-in-progress\"\n */\nexport class ExecutionSkipped extends Outcome {\n    static Code = 1 << 4;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionSkipped();\n\n    constructor() {\n        super(ExecutionSkipped.Code);\n    }\n}\n\n/**\n * The Activity was deliberately ignored and will not be executed.\n */\nexport class ExecutionIgnored extends Outcome {\n    static Code = 1 << 5;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionIgnored();\n\n    constructor() {\n        super(ExecutionIgnored.Code);\n    }\n}\n\n/**\n * Scenario or activity ran as expected.\n */\nexport class ExecutionSuccessful extends Outcome {\n    static Code = 1 << 6;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionSuccessful();\n\n    constructor() {\n        super(ExecutionSuccessful.Code);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/outcomes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "Outcome",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~Outcome",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Outcome}",
    "description": " ",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~Outcome",
    "static": true,
    "longname": "src/model/outcomes.ts~Outcome.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "isWorseThan",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#isWorseThan",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedOutcome"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "class",
    "name": "ProblemIndication",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ProblemIndication",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ProblemIndication}",
    "description": " ",
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 361,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ProblemIndication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ProblemIndication#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/outcomes.ts~ProblemIndication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ProblemIndication#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedOutcome"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 363,
    "kind": "class",
    "name": "ExecutionCompromised",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionCompromised}",
    "description": "Indicates a failure due to external events or systems that compromise the validity of the test. ",
    "lineNumber": 57,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 58,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 60,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionCompromised#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true
  },
  {
    "__docId__": 367,
    "kind": "class",
    "name": "ExecutionFailedWithError",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionFailedWithError}",
    "description": "Indicates a failure due to an error other than recognised external system and assertion failures ",
    "lineNumber": 70,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 71,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 73,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "ExecutionFailedWithAssertionError",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionFailedWithAssertionError}",
    "description": "Execution of an Activity or Scene has failed due to an assertion error; ",
    "lineNumber": 83,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 84,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "ImplementationPending",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ImplementationPending}",
    "description": "A pending Activity is one that has been specified but not yet implemented.\nA pending Scene is one that has at least one pending Activity. ",
    "lineNumber": 97,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 98,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 100,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ImplementationPending#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true
  },
  {
    "__docId__": 379,
    "kind": "class",
    "name": "ExecutionSkipped",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionSkipped}",
    "description": "The Activity was not executed because a previous one has failed.\nA whole Scene can be marked as skipped to indicate that it is currently \"work-in-progress\" ",
    "lineNumber": 111,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 114,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionSkipped#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 351,
    "undocument": true
  },
  {
    "__docId__": 383,
    "kind": "class",
    "name": "ExecutionIgnored",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionIgnored}",
    "description": "The Activity was deliberately ignored and will not be executed. ",
    "lineNumber": 124,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 125,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 127,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionIgnored#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true
  },
  {
    "__docId__": 387,
    "kind": "class",
    "name": "ExecutionSuccessful",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionSuccessful}",
    "description": "Scenario or activity ran as expected. ",
    "lineNumber": 137,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 138,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 140,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 431,
    "undocument": true
  },
  {
    "__docId__": 391,
    "kind": "file",
    "name": "src/model/tags/ArbitraryTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @desc Tagged with an arbitrary tag that doesn't have any special interpretation such as @regression, @wip, etc.\n *\n * @access public\n */\nexport class ArbitraryTag extends Tag {\n    static readonly Type = 'tag';\n\n    constructor(value: string) {\n        super(value, ArbitraryTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/ArbitraryTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "class",
    "name": "ArbitraryTag",
    "memberof": "src/model/tags/ArbitraryTag.ts",
    "static": true,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ArbitraryTag}",
    "description": "Tagged with an arbitrary tag that doesn't have any special interpretation such as @regression, @wip, etc.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "static": true,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 395,
    "kind": "file",
    "name": "src/model/tags/BrowserTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class BrowserTag extends Tag {\n    static readonly Type = 'browser';\n\n    constructor(browser: string) {\n        super(browser, BrowserTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/BrowserTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 396,
    "kind": "class",
    "name": "BrowserTag",
    "memberof": "src/model/tags/BrowserTag.ts",
    "static": true,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{BrowserTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "static": true,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 399,
    "kind": "file",
    "name": "src/model/tags/CapabilityTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class CapabilityTag extends Tag {\n    static readonly Type = 'capability';\n\n    constructor(capability: string) {\n        super(capability, CapabilityTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/CapabilityTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "CapabilityTag",
    "memberof": "src/model/tags/CapabilityTag.ts",
    "static": true,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{CapabilityTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "static": true,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 403,
    "kind": "file",
    "name": "src/model/tags/ContextTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @desc There are a couple of common use-cases for contexts: running the same test in different browsers,\n * and running the same test on different operating systems.\n * If you use the name of a browser (e.g. “chrome”, “firefox”, “safari”, “ie”),\n * the context will be represented in the reports as the icon of the respective browsers.\n * If you provide an operating system (e.g. “linux”, “windows”, “mac”, “android”, “iphone”),\n * a similar icon will be used. If you use any other term for your context,\n * it will appear in text form in the test results lists, so it is better to keep context names relatively short.\n *\n * @access public\n */\nexport class ContextTag extends Tag {\n    static readonly Type = 'context';\n\n    constructor(context: string) {\n        super(context, ContextTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/ContextTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 404,
    "kind": "class",
    "name": "ContextTag",
    "memberof": "src/model/tags/ContextTag.ts",
    "static": true,
    "longname": "src/model/tags/ContextTag.ts~ContextTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ContextTag}",
    "description": "There are a couple of common use-cases for contexts: running the same test in different browsers,\nand running the same test on different operating systems.\nIf you use the name of a browser (e.g. “chrome”, “firefox”, “safari”, “ie”),\nthe context will be represented in the reports as the icon of the respective browsers.\nIf you provide an operating system (e.g. “linux”, “windows”, “mac”, “android”, “iphone”),\na similar icon will be used. If you use any other term for your context,\nit will appear in text form in the test results lists, so it is better to keep context names relatively short.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ContextTag.ts~ContextTag",
    "static": true,
    "longname": "src/model/tags/ContextTag.ts~ContextTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ContextTag.ts~ContextTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ContextTag.ts~ContextTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 407,
    "kind": "file",
    "name": "src/model/tags/FeatureTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class FeatureTag extends Tag {\n    static readonly Type = 'feature';\n\n    constructor(feature: string) {\n        super(feature, FeatureTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/FeatureTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "FeatureTag",
    "memberof": "src/model/tags/FeatureTag.ts",
    "static": true,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{FeatureTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/FeatureTag.ts~FeatureTag",
    "static": true,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/FeatureTag.ts~FeatureTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 411,
    "kind": "file",
    "name": "src/model/tags/IssueTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class IssueTag extends Tag {\n    static readonly Type = 'issue';\n\n    constructor(issueId: string) {\n        super(issueId, IssueTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/IssueTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "class",
    "name": "IssueTag",
    "memberof": "src/model/tags/IssueTag.ts",
    "static": true,
    "longname": "src/model/tags/IssueTag.ts~IssueTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{IssueTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/IssueTag.ts~IssueTag",
    "static": true,
    "longname": "src/model/tags/IssueTag.ts~IssueTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/IssueTag.ts~IssueTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/IssueTag.ts~IssueTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 415,
    "kind": "file",
    "name": "src/model/tags/ManualTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class ManualTag extends Tag {\n    static readonly Type = 'External Tests';\n\n    constructor(name: string = 'Manual') {  // parametrised constructor to make all tag constructors compatible\n        super(name, ManualTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/ManualTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "class",
    "name": "ManualTag",
    "memberof": "src/model/tags/ManualTag.ts",
    "static": true,
    "longname": "src/model/tags/ManualTag.ts~ManualTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ManualTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ManualTag.ts~ManualTag",
    "static": true,
    "longname": "src/model/tags/ManualTag.ts~ManualTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ManualTag.ts~ManualTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ManualTag.ts~ManualTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 419,
    "kind": "file",
    "name": "src/model/tags/Tag.ts",
    "content": "import { ensure, isDefined, isString, JSONObject, TinyType } from 'tiny-types';\nimport * as TagTypes from './index';\n\n/**\n * @access public\n */\nexport abstract class Tag extends TinyType {\n    static fromJSON(o: JSONObject) {\n        const type: string = ensure('serialised tag type', o.type, isDefined(), isString()) as string;\n\n        const found = Object.keys(TagTypes).find(t => TagTypes[t].Type === type) || TagTypes.ArbitraryTag.name;\n\n        return new TagTypes[found](o.name);\n    }\n\n    protected constructor(public readonly name: string, public readonly type: string) {\n        super();\n    }\n\n    toJSON(): { name: string, type: string } {\n        return super.toJSON() as { name: string, type: string };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/Tag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 420,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/model/tags/Tag.ts",
    "static": true,
    "longname": "src/model/tags/Tag.ts~Tag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{Tag}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/Tag.ts~Tag.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/Tag.ts~Tag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/Tag.ts~Tag#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 424,
    "kind": "file",
    "name": "src/model/tags/Tags.ts",
    "content": "import { match } from 'tiny-types';\n\nimport { ArbitraryTag, IssueTag, ManualTag, Tag } from './';\n\n/**\n * @package\n */\nexport class Tags {\n    private static Pattern = /^@([\\w-]+)[:\\s]?(.*)/i;\n\n    public static from(text: string): Tag[] {\n        const [ , type, val ] = Tags.Pattern.exec(text);\n\n        return match<Tag[]>(type.toLowerCase())\n            .when('manual',     _ => [ new ManualTag() ])\n            .when(/issues?/,    _ => val.split(',').map(value => new IssueTag(value.trim())))\n            .else(value           => [ new ArbitraryTag(value.trim()) ]);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/Tags.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "class",
    "name": "Tags",
    "memberof": "src/model/tags/Tags.ts",
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/model/tags/Tags.ts",
    "importStyle": "{Tags}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "Pattern",
    "memberof": "src/model/tags/Tags.ts~Tags",
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags.Pattern",
    "access": "private",
    "description": " ",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "from",
    "memberof": "src/model/tags/Tags.ts~Tags",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags.from",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "src/model/tags/ThemeTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class ThemeTag extends Tag {\n    static readonly Type = 'theme';\n\n    constructor(theme: string) {\n        super(theme, ThemeTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/ThemeTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "ThemeTag",
    "memberof": "src/model/tags/ThemeTag.ts",
    "static": true,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ThemeTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ThemeTag.ts~ThemeTag",
    "static": true,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ThemeTag.ts~ThemeTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "src/model/tags/index.ts",
    "content": "export * from './ArbitraryTag';\nexport * from './BrowserTag';\nexport * from './CapabilityTag';\nexport * from './ContextTag';\nexport * from './FeatureTag';\nexport * from './IssueTag';\nexport * from './ManualTag';\nexport * from './ThemeTag';\nexport * from './Tag';\nexport * from './Tags';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/model/tags/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "src/screenplay/Ability.ts",
    "content": "\n/**\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n * import { Ability, Actor, Interface } from '@serenity-js/core';\n *\n * class MakePhoneCalls implements Ability {\n *     static as(actor: UsesAbilities): MakesPhoneCalls {\n *         return actor.abilityTo(MakePhoneCalls);\n *     }\n *\n *     static using(phone: Phone) {\n *         return new MakePhoneCalls(phone);\n *     }\n *\n *     constructor(private readonly phone: Phone) {}\n *\n *     // some method that allows us to interact with the external interface of the system under test\n *     dial(phoneNumber: string) {\n *       // ...\n *     }\n * }\n *\n * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *  MakePhoneCalls.as(actor).dial(phoneNumber);\n * );\n *\n * @access public\n */\nexport interface Ability {  // tslint:disable-line:no-empty-interface\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Ability.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "class",
    "name": "Ability",
    "memberof": "src/screenplay/Ability.ts",
    "static": true,
    "longname": "src/screenplay/Ability.ts~Ability",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Ability}",
    "description": " An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n Technically speaking, it's a wrapper around a client of said interface.",
    "examples": [
      "import { Ability, Actor, Interface } from '@serenity-js/core';\n\nclass MakePhoneCalls implements Ability {\n    static as(actor: UsesAbilities): MakesPhoneCalls {\n        return actor.abilityTo(MakePhoneCalls);\n    }\n\n    static using(phone: Phone) {\n        return new MakePhoneCalls(phone);\n    }\n\n    constructor(private readonly phone: Phone) {}\n\n    // some method that allows us to interact with the external interface of the system under test\n    dial(phoneNumber: string) {\n      // ...\n    }\n}\n\nconst Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n\nconst Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n MakePhoneCalls.as(actor).dial(phoneNumber);\n);"
    ],
    "lineNumber": 42,
    "interface": true
  },
  {
    "__docId__": 435,
    "kind": "file",
    "name": "src/screenplay/AbilityType.ts",
    "content": "import { Ability } from './Ability';\nimport { UsesAbilities } from './actor';\n\n/**\n * @desc\n *  An interface describing the static access method that every {@link Ability} class\n *  needs to provide in order to be accessible from within an {@link Interaction}.\n */\nexport interface AbilityType<A extends Ability> {\n\n    /**\n     * @desc\n     *  Every Ability should be constructible and ideally receive the client communicating with\n     *  the desired external interface of the system under test as an argument.\n     *\n     * @param {...any} args\n     */\n    new (...args): A;\n\n    /**\n     * @desc\n     *  Retrieves the Ability in question from the {@link Actor}, provided that the {@link Actor} has it.\n     *\n     * @example\n     * import { Ability, Actor, Interface } from '@serenity-js/core';\n     *\n     * class MakePhoneCalls implements Ability {\n     *     static as(actor: UsesAbilities): MakesPhoneCalls {\n     *         return actor.abilityTo(MakePhoneCalls);\n     *     }\n     *\n     *     static using(phone: Phone) {\n     *         return new MakePhoneCalls(phone);\n     *     }\n     *\n     *     constructor(private readonly phone: Phone) {}\n     *\n     *     // some method that allows us to interact with the external interface of the system under test\n     *     dial(phoneNumber: string) {\n     *       // ...\n     *     }\n     * }\n     *\n     * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n     *\n     * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n     *  MakePhoneCalls.as(actor).dial(phoneNumber);\n     * );\n     *\n     * @param {UsesAbilities} actor\n     */\n    as(actor: UsesAbilities): A;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/AbilityType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "class",
    "name": "AbilityType",
    "memberof": "src/screenplay/AbilityType.ts",
    "static": true,
    "longname": "src/screenplay/AbilityType.ts~AbilityType",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{AbilityType}",
    "description": " An interface describing the static access method that every {@link Ability} class\n needs to provide in order to be accessible from within an {@link Interaction}.",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 437,
    "kind": "file",
    "name": "src/screenplay/Activity.ts",
    "content": "import { AnswersQuestions, PerformsActivities, UsesAbilities } from './actor';\n\n/**\n * @desc\n *  A command object representing an activity that an {@link Actor} can perform.\n *\n * @see {@link Actor}\n * @see https://en.wikipedia.org/wiki/Command_pattern\n */\nexport interface Activity {\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this Activity.\n     *\n     * @param {PerformsActivities | UsesAbilities | AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: PerformsActivities | UsesAbilities | AnswersQuestions): PromiseLike<any>;\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this Activity.\n     *\n     * @returns {string}\n     */\n    toString(): string;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Activity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "class",
    "name": "Activity",
    "memberof": "src/screenplay/Activity.ts",
    "static": true,
    "longname": "src/screenplay/Activity.ts~Activity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Activity}",
    "description": " A command object representing an activity that an {@link Actor} can perform.",
    "see": [
      "{@link Actor}",
      "https://en.wikipedia.org/wiki/Command_pattern"
    ],
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 439,
    "kind": "file",
    "name": "src/screenplay/Answerable.ts",
    "content": "import { Question } from './Question';\n\n/**\n * @public\n *\n * @typedef {Question<Promise<T>> | Question<T> | Promise<T> | T} Answerable<T>\n */\nexport type Answerable<T> = Question<Promise<T>> | Question<T> | Promise<T> | T;\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Answerable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 440,
    "kind": "typedef",
    "name": "Answerable<T>",
    "memberof": "src/screenplay/Answerable.ts",
    "static": true,
    "longname": "src/screenplay/Answerable.ts~Answerable<T>",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "type": {
      "types": [
        "Question<Promise<T>> | Question<T> | Promise<T> | T"
      ],
      "optional": false,
      "name": "Answerable<T>"
    }
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "src/screenplay/Interaction.ts",
    "content": "import { Activity } from './Activity';\nimport { Actor, AnswersQuestions, CollectsArtifacts, UsesAbilities } from './actor';\n\n/**\n * @desc\n *  Directly exercises the {@link Actor}'s {@link Ability} to interact\n *  with the System Under Test.\n *\n * @implements {Activity}\n * @see {@link Ability}\n * @see {@link Actor}\n */\nexport abstract class Interaction implements Activity {\n    static where(\n        description: string,\n        interaction: (actor: UsesAbilities & AnswersQuestions & CollectsArtifacts) => PromiseLike<void> | void,\n    ): Interaction {\n        return new DynamicallyGeneratedInteraction(description, interaction);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    abstract performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void>;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedInteraction extends Interaction {\n    constructor(\n        private readonly description: string,\n        private readonly interaction: (actor: UsesAbilities & AnswersQuestions & CollectsArtifacts) => PromiseLike<void> | void,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {Actor} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     */\n    performAs(actor: Actor): PromiseLike<void> {\n        try {\n            return Promise.resolve(this.interaction(actor));\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Interaction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "Interaction",
    "memberof": "src/screenplay/Interaction.ts",
    "static": true,
    "longname": "src/screenplay/Interaction.ts~Interaction",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Interaction}",
    "description": " Directly exercises the {@link Actor}'s {@link Ability} to interact\n with the System Under Test.",
    "see": [
      "{@link Ability}",
      "{@link Actor}"
    ],
    "lineNumber": 20,
    "interface": false,
    "implements": [
      "Activity"
    ]
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/Interaction.ts~Interaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Interaction.ts~Interaction.where",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "interaction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 444,
    "kind": "class",
    "name": "DynamicallyGeneratedInteraction",
    "memberof": "src/screenplay/Interaction.ts",
    "static": true,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Interaction.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 85,
    "interface": false,
    "extends": [
      "Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}"
    ],
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "file",
    "name": "src/screenplay/Question.ts",
    "content": "import { AnswersQuestions, UsesAbilities } from './actor';\n\n/**\n * @desc\n *  Enables the {@link Actor} to query the system under test.\n *\n * @example <caption>A basic Question</caption>\n * import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n * import { Ensure, equals } from '@serenity-js/assertions'\n *\n * const LastItemOf = <T>(list: T[]): Question<T> =>\n *     Question.about('last item from the list', (actor: AnswersQuestions & UsesAbilities) => {\n *         return list[list.length - 1];\n *     });\n *\n * Actor.named('Quentin').attemptsTo(\n *     Ensure.that(LastItemFrom([1,2,3]), equals(3)),\n * );\n *\n * @example <caption>A question using the Actor's Ability to do something</caption>\n * import { AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n * import { CallAnApi } from '@serenity-js/rest'\n *\n * const TextOfLastResponseStatus = () =>\n *     Question.about<number>(`the text of the last response status`, actor => {\n *         return CallAnApi.as(actor).mapLastResponse(response => response.statusText);\n *     });\n *\n * @example <caption>Mapping answers to other questions</caption>\n * import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n * import { CallAnApi, LastResponse } from '@serenity-js/rest'\n * import { Ensure, equals } from '@serenity-js/assertions';\n *\n * const RequestWasSuccessful = () =>\n *     Question.about<number>(`the text of the last response status`, actor => {\n *         return LastResponse.status().answeredBy(actor) === 200;\n *     });\n *\n * const actor = Actor.named('Quentin').whoCan(CallAnApi.at('https://myapp.com/api'));\n *\n * actor.attemptsTo(\n *     Send.a(GetRequest.to('/books/0-688-00230-7')),\n *     Ensure.that(RequestWasSuccessful(), equals(true)),\n * );\n *\n * @see {@link Actor}\n * @see {@link Interaction}\n * @see {@link Ability}\n */\nexport abstract class Question<T> {\n\n    /**\n     *  Factory method that simplifies the process of defining custom questions.\n     */\n    static about<R>(description: string, body: (actor: AnswersQuestions & UsesAbilities) => R): Question<R> {\n        return new AnonymousQuestion<R>(description, body);\n    }\n\n    /**\n     * @desc\n     *  Checks if the value is a {@link Question}\n     *\n     * @param {any} maybeQuestion\n     * @returns {boolean}\n     */\n    static isAQuestion<T>(maybeQuestion: any): maybeQuestion is Question<T> {\n        return !! (maybeQuestion as any).answeredBy;\n    }\n\n    /**\n     * @abstract\n     */\n    abstract answeredBy(actor: AnswersQuestions & UsesAbilities): T;\n}\n\n/**\n * @package\n */\nclass AnonymousQuestion<T> implements Question<T> {\n    constructor(private description: string, private body: (actor: AnswersQuestions & UsesAbilities) => T) {\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities) {\n        return this.body(actor);\n    }\n\n    toString() {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Question.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 449,
    "kind": "class",
    "name": "Question",
    "memberof": "src/screenplay/Question.ts",
    "static": true,
    "longname": "src/screenplay/Question.ts~Question",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Question}",
    "description": " Enables the {@link Actor} to query the system under test.",
    "examples": [
      "<caption>A basic Question</caption>\nimport { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst LastItemOf = <T>(list: T[]): Question<T> =>\n    Question.about('last item from the list', (actor: AnswersQuestions & UsesAbilities) => {\n        return list[list.length - 1];\n    });\n\nActor.named('Quentin').attemptsTo(\n    Ensure.that(LastItemFrom([1,2,3]), equals(3)),\n);",
      "<caption>A question using the Actor's Ability to do something</caption>\nimport { AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\nconst TextOfLastResponseStatus = () =>\n    Question.about<number>(`the text of the last response status`, actor => {\n        return CallAnApi.as(actor).mapLastResponse(response => response.statusText);\n    });",
      "<caption>Mapping answers to other questions</caption>\nimport { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\nimport { CallAnApi, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions';\n\nconst RequestWasSuccessful = () =>\n    Question.about<number>(`the text of the last response status`, actor => {\n        return LastResponse.status().answeredBy(actor) === 200;\n    });\n\nconst actor = Actor.named('Quentin').whoCan(CallAnApi.at('https://myapp.com/api'));\n\nactor.attemptsTo(\n    Send.a(GetRequest.to('/books/0-688-00230-7')),\n    Ensure.that(RequestWasSuccessful(), equals(true)),\n);"
    ],
    "see": [
      "{@link Actor}",
      "{@link Interaction}",
      "{@link Ability}"
    ],
    "lineNumber": 57,
    "interface": false
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "about",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Question.ts~Question.about",
    "access": "public",
    "description": "Factory method that simplifies the process of defining custom questions. ",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "isAQuestion",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Question.ts~Question.isAQuestion",
    "access": "public",
    "description": " Checks if the value is a {@link Question}",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeQuestion",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 452,
    "kind": "class",
    "name": "AnonymousQuestion",
    "memberof": "src/screenplay/Question.ts",
    "static": true,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Question.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 138,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 453,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 87,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/screenplay/Task.ts",
    "content": "import { ImplementationPendingError } from '../errors';\nimport { Activity } from './Activity';\nimport { PerformsActivities } from './actor';\n\n/**\n * @desc\n *  Aggregates {@link Interaction}s so that they represents logical\n *  steps of a business process an {@link Actor} can perform.\n *\n * @implements {Activity}\n * @see {@link Interaction}\n * @see {@link Actor}\n */\nexport abstract class Task implements Activity {\n\n    /**\n     * @desc\n     *  A factory method to make defining the Tasks more convenient.\n     *  Please note that colling this method without providing the list of {@link Activity} objects\n     *  will result in producing a Task that's marked as \"pending\" in the test report.\n     *\n     *  This feature is useful when you want to quickly write down a task that will be needed in the scenario,\n     *  but you're not yet sure what activities will constitute it.\n     *\n     * @example <caption>Modelling a task</caption>\n     * import { Log, Task } from '@serenity-js/core';\n     *\n     * const Debug = (something: Answerable<any>) =>\n     *     Task.where(`#actor prints the answer to a question`,\n     *          Log.the(something),\n     *     );\n     *\n     * @example <caption>Modelling a not implemented task</caption>\n     * import { Task } from '@serenity-js/core';\n     *\n     * const SignUp = () =>\n     *     Task.where(`#actor signs up for a newsletter`); // no activities given\n     *                                                     // => task marked as pending\n     *\n     * @param {string} description - A description to be used when reporting this task\n     * @param {Activity[]} activities - A list of lower-level activities that constitute the task\n     *\n     * @returns {Task}\n     */\n    static where(description: string, ...activities: Activity[]): Task {\n        return activities.length > 0\n            ? new DynamicallyGeneratedTask(description, activities)\n            : new NotImplementedTask(description);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    abstract performAs(actor: PerformsActivities): PromiseLike<void>;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedTask extends Task {\n    constructor(private description: string, private activities: Activity[]) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    performAs(actor: PerformsActivities): PromiseLike<void> {\n        return actor.attemptsTo(...this.activities);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this.description;\n    }\n}\n\n/**\n * @package\n */\nclass NotImplementedTask extends Task {\n    constructor(private description: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    performAs(actor: PerformsActivities): PromiseLike<void> {\n        return Promise.reject(\n            new ImplementationPendingError(`A task where \"${ this.toString() }\" has not been implemented yet`),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/Task.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "class",
    "name": "Task",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~Task",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Task}",
    "description": " Aggregates {@link Interaction}s so that they represents logical\n steps of a business process an {@link Actor} can perform.",
    "see": [
      "{@link Interaction}",
      "{@link Actor}"
    ],
    "lineNumber": 21,
    "interface": false,
    "implements": [
      "Activity"
    ]
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/Task.ts~Task",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Task.ts~Task.where",
    "access": "public",
    "description": " A factory method to make defining the Tasks more convenient.\n Please note that colling this method without providing the list of {@link Activity} objects\n will result in producing a Task that's marked as \"pending\" in the test report.\n\n This feature is useful when you want to quickly write down a task that will be needed in the scenario,\n but you're not yet sure what activities will constitute it.",
    "examples": [
      "<caption>Modelling a task</caption>\nimport { Log, Task } from '@serenity-js/core';\n\nconst Debug = (something: Answerable<any>) =>\n    Task.where(`#actor prints the answer to a question`,\n         Log.the(something),\n    );",
      "<caption>Modelling a not implemented task</caption>\nimport { Task } from '@serenity-js/core';\n\nconst SignUp = () =>\n    Task.where(`#actor signs up for a newsletter`); // no activities given\n                                                    // => task marked as pending"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Task}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A description to be used when reporting this task"
      },
      {
        "nullable": null,
        "types": [
          "Activity[]"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": "A list of lower-level activities that constitute the task"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "DynamicallyGeneratedTask",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Task.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 114,
    "interface": false,
    "extends": [
      "Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 460,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Task}.",
    "see": [
      "{@link Actor}",
      "{@link PerformsActivities}"
    ],
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 463,
    "kind": "class",
    "name": "NotImplementedTask",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~NotImplementedTask",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Task.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 177,
    "interface": false,
    "extends": [
      "Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Task}.",
    "see": [
      "{@link Actor}",
      "{@link PerformsActivities}"
    ],
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 467,
    "kind": "file",
    "name": "src/screenplay/abilities/TakeNotes.ts",
    "content": "import { LogicError } from '../../errors';\nimport { Ability } from '../Ability';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to remember an answer to a given {@link Question},\n *  and recall it later.\n *\n * @example\n *  import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n *  import { by, protractor } from 'protractor';\n *\n *  class Vouchers {\n *      static code             = Target.the('voucher code').located(by.id('voucher'));\n *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n *  }\n *\n *  const actor = Actor.named('Noah').whoCan(\n *      TakeNotes.usingAnEmptyNotepad(),\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n *  );\n *\n * @see {@link Note}\n * @see {@link TakeNote}\n *\n * @implements {Ability}\n */\nexport class TakeNotes implements Ability {\n    /**\n     * @returns {TakeNotes}\n     */\n    static usingAnEmptyNotepad(): TakeNotes {\n        return new TakeNotes({});\n    }\n\n    /**\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {TakeNotes}\n     */\n    static as(actor: UsesAbilities & AnswersQuestions): TakeNotes {\n        return actor.abilityTo(TakeNotes);\n    }\n\n    /**\n     * @param {object} notepad\n     */\n    constructor(private readonly notepad: { [key: string]: any }) {\n    }\n\n    /**\n     * Records the answer to a given {@link Question}\n     *\n     * @param {Question<Promise<Answer>> | Question<Answer>} question\n     * @param {Promise<Answer> | Answer} value\n     */\n    record<Answer>(question: Question<Promise<Answer>> | Question<Answer>, value: Promise<Answer> | Answer): void {\n        this.notepad[question.toString()] = value;\n    }\n\n    /**\n     * Recalls the answer to a given {@link Question}\n     *\n     * @param {Question<Promise<Answer>> | Question<Answer>} question\n     */\n    answerTo<Answer>(question: Question<Promise<Answer>> | Question<Answer>): Promise<Answer> {\n        const key = question.toString();\n\n        return ! ~Object.keys(this.notepad).indexOf(key)\n            ? Promise.reject(new LogicError(`The answer to \"${ key }\" has never been recorded`))\n            : Promise.resolve(this.notepad[key]);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/abilities/TakeNotes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "TakeNotes",
    "memberof": "src/screenplay/abilities/TakeNotes.ts",
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/abilities",
    "importStyle": "{TakeNotes}",
    "description": " Enables the {@link Actor} to remember an answer to a given {@link Question},\n and recall it later.",
    "examples": [
      " import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = Actor.named('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );"
    ],
    "see": [
      "{@link Note}",
      "{@link TakeNote}"
    ],
    "lineNumber": 44,
    "interface": false,
    "implements": [
      "Ability"
    ]
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "usingAnEmptyNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes.usingAnEmptyNotepad",
    "access": "public",
    "description": "",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNotes}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNotes"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes.as",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNotes}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNotes"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 471,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "notepad",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "record",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#record",
    "access": "public",
    "description": "Records the answer to a given {@link Question} ",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " Question"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Promise ",
          " Answer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "answerTo",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#answerTo",
    "access": "public",
    "description": "Recalls the answer to a given {@link Question} ",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " Question"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 474,
    "kind": "file",
    "name": "src/screenplay/abilities/index.ts",
    "content": "export * from './TakeNotes';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/abilities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "src/screenplay/activities/ActivityDescriber.ts",
    "content": "import { Name } from '../../model';\nimport { Activity } from '../Activity';\n\n/** @package */\nexport class ActivityDescriber {\n\n    describe(activity: Activity, actor: { name: string }): Name {\n        const template = activity.toString() !== ({}).toString()\n            ? activity.toString()\n            : `#actor performs ${ activity.constructor.name }`;\n\n        return new Name(\n            this.includeActorName(template, actor),\n        );\n    }\n\n    private includeActorName(template: string, actor: { name: string }) {\n        return template.replace('#actor', actor.name);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/activities/ActivityDescriber.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "class",
    "name": "ActivityDescriber",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts",
    "static": true,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/ActivityDescriber.ts",
    "importStyle": "{ActivityDescriber}",
    "description": null,
    "lineNumber": 12,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "describe",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber#describe",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Activity"
        ],
        "spread": false,
        "optional": false,
        "name": "activity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "includeActorName",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber#includeActorName",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "file",
    "name": "src/screenplay/activities/OutcomeMatcher.ts",
    "content": "import { match } from 'tiny-types';\nimport { AssertionError, ImplementationPendingError, TestCompromisedError } from '../../errors';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ImplementationPending,\n    ProblemIndication,\n} from '../../model';\n\n/** @package */\nexport class OutcomeMatcher {\n    outcomeFor(error: Error | any): ProblemIndication {\n        return match<Error, ProblemIndication>(error)\n            .when(ImplementationPendingError, _ => new ImplementationPending(error))\n            .when(TestCompromisedError, _ => new ExecutionCompromised(error))\n            .when(AssertionError, _ => new ExecutionFailedWithAssertionError(error))\n            .when(Error, _ => /AssertionError/.test(error.constructor.name) // mocha\n                    ? new ExecutionFailedWithAssertionError(error)\n                    : new ExecutionFailedWithError(error))\n            .else(_ => new ExecutionFailedWithError(error));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/activities/OutcomeMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 480,
    "kind": "class",
    "name": "OutcomeMatcher",
    "memberof": "src/screenplay/activities/OutcomeMatcher.ts",
    "static": true,
    "longname": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/OutcomeMatcher.ts",
    "importStyle": "{OutcomeMatcher}",
    "description": null,
    "lineNumber": 19,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "outcomeFor",
    "memberof": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher#outcomeFor",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProblemIndication"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 482,
    "kind": "file",
    "name": "src/screenplay/activities/TrackedActivity.ts",
    "content": "import { InteractionFinished, InteractionStarts, TaskFinished, TaskStarts } from '../../events';\nimport { ActivityDetails, CorrelationId, ExecutionSuccessful } from '../../model';\nimport { Stage } from '../../stage';\nimport { Activity } from '../Activity';\nimport { AnswersQuestions, PerformsActivities, UsesAbilities } from '../actor';\nimport { Interaction } from '../Interaction';\nimport { ActivityDescriber } from './ActivityDescriber';\nimport { OutcomeMatcher } from './OutcomeMatcher';\n\n/** @package */\nexport class TrackedActivity implements Activity {\n\n    protected static readonly describer = new ActivityDescriber();\n    protected static readonly outcomes = new OutcomeMatcher();\n\n    constructor(\n        protected readonly activity: Activity,\n        protected readonly stage: Stage,\n    ) {\n    }\n\n    performAs(actor: (PerformsActivities | UsesAbilities | AnswersQuestions) & { name: string }): PromiseLike<void> {\n        const details = this.stage.activityDetailsFor(this.activity, actor);\n\n        const [ activityStarts, activityFinished] = this.activity instanceof Interaction\n            ? [ InteractionStarts, InteractionFinished ]\n            : [ TaskStarts, TaskFinished ];\n\n        return Promise.resolve()\n            .then(() => this.stage.announce(new activityStarts(details, this.stage.currentTime())))\n            .then(() => this.activity.performAs(actor))\n            .then(() => {\n                const outcome = new ExecutionSuccessful();\n                this.stage.announce(new activityFinished(details, outcome, this.stage.currentTime()));\n            })\n            .catch(error => {\n                const outcome = TrackedActivity.outcomes.outcomeFor(error);\n                this.stage.announce(new activityFinished(details, outcome, this.stage.currentTime()));\n\n                throw error;\n            });\n    }\n\n    toString() {\n        return this.activity.toString();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/activities/TrackedActivity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "class",
    "name": "TrackedActivity",
    "memberof": "src/screenplay/activities/TrackedActivity.ts",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/TrackedActivity.ts",
    "importStyle": "{TrackedActivity}",
    "description": null,
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "describer",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity.describer",
    "access": "protected",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "outcomes",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity.outcomes",
    "access": "protected",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities ",
          " UsesAbilities ",
          " AnswersQuestions & undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "file",
    "name": "src/screenplay/activities/index.ts",
    "content": "export * from './TrackedActivity';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/activities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 490,
    "kind": "file",
    "name": "src/screenplay/actor/Actor.ts",
    "content": "import { ActivityRelatedArtifactGenerated } from '../../events';\nimport { Ability, AbilityType, Answerable, Cast, ConfigurationError, serenity } from '../../index';\nimport { Artifact, Name } from '../../model';\nimport { Stage } from '../../stage';\nimport { TrackedActivity } from '../activities';\nimport { Activity } from '../Activity';\nimport { Question } from '../Question';\nimport { AnswersQuestions } from './AnswersQuestions';\nimport { CanHaveAbilities } from './CanHaveAbilities';\nimport { CollectsArtifacts } from './CollectsArtifacts';\nimport { PerformsActivities } from './PerformsActivities';\nimport { UsesAbilities } from './UsesAbilities';\n\nexport class Actor implements PerformsActivities, UsesAbilities, CanHaveAbilities<Actor>, AnswersQuestions, CollectsArtifacts {\n    // todo: Actor should have execution strategies\n    // todo: the default one executes every activity\n    // todo: there could be a dry-run mode that default to skip strategy\n\n    /**\n     * @deprecated\n     * @param name\n     */\n    static named(name: string): CanHaveAbilities<Actor> {\n        return {\n            whoCan: (...abilities): Actor => {\n                serenity.configure({\n                    actors: Cast.whereEveryoneCan(...abilities),\n                });\n\n                return serenity.theActorCalled(name);\n            },\n        };\n    }\n\n    constructor(\n        public readonly name: string,\n        private readonly stage: Stage,\n        private readonly abilities: Map<AbilityType<Ability>, Ability> = new Map<AbilityType<Ability>, Ability>(),\n    ) {\n    }\n\n    abilityTo<T extends Ability>(doSomething: AbilityType<T>): T {\n        if (! this.can(doSomething)) {\n            throw new ConfigurationError(`${ this.name } can't ${ doSomething.name } yet. ` +\n                `Did you give them the ability to do so?`);\n        }\n\n        return this.abilities.get(doSomething) as T;\n    }\n\n    attemptsTo(...activities: Activity[]): Promise<void> {\n        return activities\n            .map(activity => new TrackedActivity(activity, this.stage))  // todo: TrackedInteraction, TrackedTask\n            .reduce((previous: Promise<void>, current: Activity) => {\n                return previous.then(() => {\n                    /* todo: add an execution strategy */\n                    return current.performAs(this);\n                });\n            }, Promise.resolve(void 0));\n    }\n\n    whoCan(...abilities: Ability[]): Actor {\n        abilities.forEach(ability => {\n            this.abilities.set(ability.constructor as AbilityType<Ability>, ability);\n        });\n\n        return this;\n    }\n\n    /**\n     * @param {Answerable<T>} answerable - a Question<Promise<T>>, Question<T>, Promise<T> or T\n     * @returns {Promise<T>} The answer to the Answerable\n     */\n    answer<T>(answerable: Answerable<T>): Promise<T> {\n        function isAPromise<V>(v: Answerable<V>): v is Promise<V> {\n            return !!(v as any).then;\n        }\n\n        function isDefined<V>(v: Answerable<V>) {\n            return ! (answerable === undefined || answerable === null);\n        }\n\n        if (isDefined(answerable) && isAPromise(answerable)) {\n            return answerable;\n        }\n\n        if (isDefined(answerable) && Question.isAQuestion(answerable)) {\n            return this.answer(answerable.answeredBy(this));\n        }\n\n        return Promise.resolve(answerable as T);\n    }\n\n    /**\n     * @desc\n     *  Announce collection of an {@link Artifact} so that it can be picked up by a {@link StageCrewMember}.\n     *\n     * @param {Artifact} artifact\n     * @param {?(string | Name)} name\n     */\n    collect(artifact: Artifact, name?: string | Name) {\n        this.stage.announce(new ActivityRelatedArtifactGenerated(\n            this.stage.currentActivityDetails(),\n            this.nameFrom(name || new Name(artifact.constructor.name)),\n            artifact,\n            this.stage.currentTime(),\n        ));\n    }\n\n    toString() {\n        const abilities = Array.from(this.abilities.keys()).map(type => type.name);\n\n        return `Actor(name=${ this.name }, abilities=[${ abilities.join(', ') }])`;\n    }\n\n    private can<T extends Ability>(doSomething: AbilityType<T>): boolean {\n        return this.abilities.has(doSomething);\n    }\n\n    /**\n     * @desc\n     *  Instantiates a {@link Name} based on the string value of the parameter,\n     *  or returns the argument if it's already an instance of {@link Name}.\n     *\n     * @param {string | Name} maybeName\n     * @returns {Name}\n     */\n    private nameFrom(maybeName: string | Name): Name {\n        return typeof maybeName === 'string'\n            ? new Name(maybeName)\n            : maybeName;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/Actor.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 491,
    "kind": "class",
    "name": "Actor",
    "memberof": "src/screenplay/actor/Actor.ts",
    "static": true,
    "longname": "src/screenplay/actor/Actor.ts~Actor",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{Actor}",
    "description": " ",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "named",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/actor/Actor.ts~Actor.named",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"whoCan\": *}"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "abilityTo",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#abilityTo",
    "access": "public",
    "description": " ",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbilityType"
        ],
        "spread": false,
        "optional": false,
        "name": "doSomething",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "attemptsTo",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#attemptsTo",
    "access": "public",
    "description": " ",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "whoCan",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#whoCan",
    "access": "public",
    "description": " ",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "answer",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#answer",
    "access": "public",
    "description": "",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<T>} The answer to the Answerable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "answerable",
        "description": "a Question<Promise<T>>, Question<T>, Promise<T> or T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<T>"
      ],
      "spread": false,
      "description": "The answer to the Answerable"
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "collect",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#collect",
    "access": "public",
    "description": " Announce collection of an {@link Artifact} so that it can be picked up by a {@link StageCrewMember}.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "Artifact"
        ],
        "spread": false,
        "optional": false,
        "name": "artifact",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string ",
          " Name"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 110,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "can",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#can",
    "access": "private",
    "description": " ",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbilityType"
        ],
        "spread": false,
        "optional": false,
        "name": "doSomething",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "nameFrom",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#nameFrom",
    "access": "public",
    "description": " Instantiates a {@link Name} based on the string value of the parameter,\n or returns the argument if it's already an instance of {@link Name}.",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Name}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Name"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 502,
    "kind": "file",
    "name": "src/screenplay/actor/AnswersQuestions.ts",
    "content": "import { Answerable } from '../Answerable';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to answer a {@link Question} about the system under test\n *\n * @public\n */\nexport interface AnswersQuestions {\n    answer<T>(knownUnknown: Answerable<T>): Promise<T>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/AnswersQuestions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "AnswersQuestions",
    "memberof": "src/screenplay/actor/AnswersQuestions.ts",
    "static": true,
    "longname": "src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{AnswersQuestions}",
    "description": " Enables the {@link Actor} to answer a {@link Question} about the system under test",
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "src/screenplay/actor/CanHaveAbilities.ts",
    "content": "import { Ability } from '../Ability';\nimport { Activity } from '../Activity';\nimport { UsesAbilities } from './UsesAbilities';\n\n/**\n * @desc\n *  Enables the {@link Actor} to have an {@link Ability} or Abilities to perform some {@link Activity}.\n *\n * @public\n */\nexport interface CanHaveAbilities<Returned_Type = UsesAbilities> {\n    /**\n     * @param {Ability[]} abilities\n     * @returns {Actor}\n     */\n    whoCan(...abilities: Ability[]): Returned_Type;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/CanHaveAbilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "CanHaveAbilities",
    "memberof": "src/screenplay/actor/CanHaveAbilities.ts",
    "static": true,
    "longname": "src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{CanHaveAbilities}",
    "description": " Enables the {@link Actor} to have an {@link Ability} or Abilities to perform some {@link Activity}.",
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 506,
    "kind": "file",
    "name": "src/screenplay/actor/CollectsArtifacts.ts",
    "content": "import { Artifact, Name } from '../../model';\n\n/**\n * @desc\n *  Enables the {@link Actor} to collect {@link Artifact}s while the scenario is being executed\n *\n * @public\n */\nexport interface CollectsArtifacts {\n    /**\n     * @desc\n     * Makes the {@link Actor} collect an {@link Artifact} so that it's included in the test report.\n     *\n     * @param {Artifact} artifact - The artifact to be collected, such as {@link JSONData}\n     * @param {Name} [name] - The name of the artifact to make it easy to recognise in the test report\n     */\n    collect(artifact: Artifact, name?: Name): void;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/CollectsArtifacts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "class",
    "name": "CollectsArtifacts",
    "memberof": "src/screenplay/actor/CollectsArtifacts.ts",
    "static": true,
    "longname": "src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{CollectsArtifacts}",
    "description": " Enables the {@link Actor} to collect {@link Artifact}s while the scenario is being executed",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "src/screenplay/actor/PerformsActivities.ts",
    "content": "import { Activity } from '../Activity';\n\n/**\n * @desc\n *  Enables the {@link Actor} to perform an {@link Activity}, such as a {@link Task} or an {@link Interaction}\n *\n * @public\n */\nexport interface PerformsActivities {\n    attemptsTo(...tasks: Activity[]): Promise<void>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/PerformsActivities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "PerformsActivities",
    "memberof": "src/screenplay/actor/PerformsActivities.ts",
    "static": true,
    "longname": "src/screenplay/actor/PerformsActivities.ts~PerformsActivities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{PerformsActivities}",
    "description": " Enables the {@link Actor} to perform an {@link Activity}, such as a {@link Task} or an {@link Interaction}",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 510,
    "kind": "file",
    "name": "src/screenplay/actor/UsesAbilities.ts",
    "content": "import { Ability } from '../Ability';\nimport { AbilityType } from '../AbilityType';\nimport { Activity } from '../Activity';\n\n/**\n * @desc\n *  Enables the {@link Actor} to use an {@link Ability} to perform some {@link Activity}.\n *\n * @public\n */\nexport interface UsesAbilities {\n\n    /**\n     * @desc\n     *  Grants access to the Actor's ability\n     *\n     * @param {AbilityType<T extends Ability>} doSomething\n     * @returns {T}\n     */\n    abilityTo<T extends Ability>(doSomething: AbilityType<T>): T;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/UsesAbilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 511,
    "kind": "class",
    "name": "UsesAbilities",
    "memberof": "src/screenplay/actor/UsesAbilities.ts",
    "static": true,
    "longname": "src/screenplay/actor/UsesAbilities.ts~UsesAbilities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{UsesAbilities}",
    "description": " Enables the {@link Actor} to use an {@link Ability} to perform some {@link Activity}.",
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 512,
    "kind": "file",
    "name": "src/screenplay/actor/index.ts",
    "content": "export * from './Actor';\nexport * from './AnswersQuestions';\nexport * from './CanHaveAbilities';\nexport * from './CollectsArtifacts';\nexport * from './PerformsActivities';\nexport * from './UsesAbilities';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/actor/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 513,
    "kind": "file",
    "name": "src/screenplay/index.ts",
    "content": "export * from './Ability';\nexport * from './AbilityType';\nexport * from './Activity';\nexport * from './abilities';\nexport * from './actor';\nexport * from './Answerable';\nexport * from './Interaction';\nexport * from './interactions';\nexport * from './Question';\nexport * from './questions';\nexport * from './Task';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "src/screenplay/interactions/Log.ts",
    "content": "import { inspected } from '../../io/inspected';\nimport { Name } from '../../model';\nimport { LogEntry } from '../../model/artifacts';\nimport { AnswersQuestions, CollectsArtifacts, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Interaction } from '../Interaction';\n\n/**\n * @desc\n *  Enables the {@link Actor} to log arbitrary static values and answers to {@link Question}s,\n *  so that they can be printed to the terminal by the [`ConsoleReporter`](/modules/console-reporter/)\n *  and attached to the HTML report by the [`SerenityBDDReporter`](/modules/serenity-bdd/).\n *\n * @example\n *  import { Log } from '@serenity-js/core';\n *  import { Website } from '@serenity-js/protractor';\n *\n *  actor.attemptsTo(\n *      Log.the('Current page', Website.title(), Website.url()),\n *  );\n *\n * @extends {Interaction}\n */\nexport class Log extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates a new {@link Log} {@link Interaction}.\n     *\n     * @param {...items: any[]} items\n     *  The items to be logged\n     * @returns {Interaction}\n     */\n    static the(...items: Array<Answerable<any>>) {\n        return new Log(items);\n    }\n\n    /**\n     * @param {...items: any[]} items\n     *  The items to be logged\n     */\n    constructor(\n        private readonly items: Array<Answerable<any>>,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions & CollectsArtifacts} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     * @see {@link CollectsArtifacts}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions & CollectsArtifacts): Promise<void> {\n        return Promise.all(\n                this.items.map(item => actor.answer(item)),\n            )\n            .then(items =>\n                items.forEach((item, i) =>\n                    actor.collect(LogEntry.fromJSON({ data: inspected(item) }), new Name(inspected(this.items[i]))),\n                ),\n            );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor logs: ${ this.items.join(', ') }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/interactions/Log.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "class",
    "name": "Log",
    "memberof": "src/screenplay/interactions/Log.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Log.ts~Log",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{Log}",
    "description": " Enables the {@link Actor} to log arbitrary static values and answers to {@link Question}s,\n so that they can be printed to the terminal by the [`ConsoleReporter`](/modules/console-reporter/)\n and attached to the HTML report by the [`SerenityBDDReporter`](/modules/serenity-bdd/).",
    "examples": [
      " import { Log } from '@serenity-js/core';\n import { Website } from '@serenity-js/protractor';\n\n actor.attemptsTo(\n     Log.the('Current page', Website.title(), Website.url()),\n );"
    ],
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Log.ts~Log.the",
    "access": "public",
    "description": " Instantiates a new {@link Log} {@link Interaction}.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...items: any[]"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": "The items to be logged"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "...items: any[]"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": "The items to be logged"
      }
    ]
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link UsesAbilities}",
      "{@link AnswersQuestions}",
      "{@link CollectsArtifacts}"
    ],
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions & CollectsArtifacts"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 520,
    "kind": "file",
    "name": "src/screenplay/interactions/See.ts",
    "content": "import { AnswersQuestions, Interaction, Question } from '..';\n\nexport type Assertion<A> = (actual: A) => void;\n\n/**\n * @deprecated\n */\nexport class See<S> extends Interaction {\n    static if<T>(question: Question<T>, assertion: Assertion<T>): Interaction {\n        return new See<T>(question, assertion);\n    }\n\n    constructor(\n        private question: Question<S>,\n        private assert: Assertion<S>,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.question).then(this.assert);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor checks ${this.question}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/interactions/See.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 521,
    "kind": "class",
    "name": "See",
    "memberof": "src/screenplay/interactions/See.ts",
    "static": true,
    "longname": "src/screenplay/interactions/See.ts~See",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{See}",
    "description": "",
    "lineNumber": 22,
    "deprecated": true,
    "interface": false,
    "extends": [
      "src/screenplay/interactions/...js~Interaction"
    ]
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "if",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/See.ts~See.if",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Assertion"
        ],
        "spread": false,
        "optional": false,
        "name": "assertion",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link AnswersQuestions}"
    ],
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 526,
    "kind": "file",
    "name": "src/screenplay/interactions/TakeNote.ts",
    "content": "import { formatted } from '../../io';\nimport { TakeNotes } from '../abilities';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Interaction } from '../Interaction';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to remember an answer to a given {@link Question},\n *  and recall it later.\n *\n * @example\n *  import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n *  import { by, protractor } from 'protractor';\n *\n *  class Vouchers {\n *      static code             = Target.the('voucher code').located(by.id('voucher'));\n *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n *  }\n *\n *  const actor = Actor.named('Noah').whoCan(\n *      TakeNotes.usingAnEmptyNotepad(),\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n *  );\n *\n * @see {@link Note}\n * @see {@link TakeNotes}\n *\n * @extends {Interaction}\n */\nexport class TakeNote<Answer> extends Interaction {\n\n    /**\n     * @param {Question<Promise<A>> | Question<A>} question\n     */\n    static of<A>(question: Question<Promise<A>> | Question<A>) {\n        return new TakeNote<A>(question);\n    }\n\n    /**\n     * @param {Question<Promise<Answer>> | Question<Answer>} question\n     */\n    constructor(private readonly question: Question<Promise<Answer>> | Question<Answer>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.question)\n            .then(answer => TakeNotes.as(actor).record(this.question, answer));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return formatted `#actor takes note ${ this.question }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/interactions/TakeNote.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 527,
    "kind": "class",
    "name": "TakeNote",
    "memberof": "src/screenplay/interactions/TakeNote.ts",
    "static": true,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{TakeNote}",
    "description": " Enables the {@link Actor} to remember an answer to a given {@link Question},\n and recall it later.",
    "examples": [
      " import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = Actor.named('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );"
    ],
    "see": [
      "{@link Note}",
      "{@link TakeNotes}"
    ],
    "lineNumber": 45,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote.of",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<A>> | Question<A>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link UsesAbilities}",
      "{@link AnswersQuestions}"
    ],
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 532,
    "kind": "file",
    "name": "src/screenplay/interactions/index.ts",
    "content": "export * from './Log';\nexport * from './See';\nexport * from './TakeNote';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/interactions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "src/screenplay/questions/Note.ts",
    "content": "import { TakeNotes } from '../abilities';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to recall an answer to a given {@link Question},\n *  recorded using {@link TakeNote}.\n *\n * @example\n *  import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n *  import { by, protractor } from 'protractor';\n *\n *  class Vouchers {\n *      static code             = Target.the('voucher code').located(by.id('voucher'));\n *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n *  }\n *\n *  const actor = Actor.named('Noah').whoCan(\n *      TakeNotes.usingAnEmptyNotepad(),\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n *  );\n *\n * @see {@link TakeNote}\n * @see {@link TakeNotes}\n *\n * @extends {Question}\n */\nexport class Note<Answer> extends Question<Promise<Answer>> {\n\n    /**\n     * @param {Question<Promise<A>> | Question<A>} question\n     * @returns {Note<A>}\n     */\n    static of<A>(question: Question<Promise<A>> | Question<A>) {\n        return new Note<A>(question);\n    }\n\n    /**\n     * @param {Question<Promise<Answer>> | Question<Answer>} question\n     */\n    constructor(private readonly question: Question<Promise<Answer>> | Question<Answer>) {\n        super();\n    }\n\n    /**\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<Answer>}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Answer> {\n        return TakeNotes.as(actor).answerTo(this.question);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/questions/Note.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "Note",
    "memberof": "src/screenplay/questions/Note.ts",
    "static": true,
    "longname": "src/screenplay/questions/Note.ts~Note",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Note}",
    "description": " Enables the {@link Actor} to recall an answer to a given {@link Question},\n recorded using {@link TakeNote}.",
    "examples": [
      " import { Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = Actor.named('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );"
    ],
    "see": [
      "{@link TakeNote}",
      "{@link TakeNotes}"
    ],
    "lineNumber": 43,
    "interface": false,
    "extends": [
      "Question"
    ]
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Note.ts~Note.of",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Note<A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<A>> | Question<A>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note<A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 536,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Note.ts~Note#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Note.ts~Note#answeredBy",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Answer>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Answer>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 538,
    "kind": "file",
    "name": "src/screenplay/questions/Transform.ts",
    "content": "import { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Question } from '../Question';\n\n/**\n * @experimental\n */\nexport class Transform<Answer_Type extends any, Output_Type> implements Question<Promise<Output_Type>> {\n    static the<AT extends any, OT>(questions: Answerable<AT> | Array<Answerable<AT>>, transformation: (...answers: AT[]) => OT) {\n        return new Transform<AT, OT>([].concat(questions), transformation);\n    }\n\n    constructor(\n        private readonly questions: Array<Answerable<Answer_Type>>,\n        private readonly transformation: (...answers: Answer_Type[]) => Output_Type,\n        private readonly description: string = `a transformed answer`,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Overrides the default {@link Transform#toString} representation of this object.\n     *\n     * @param {string} description\n     * @returns {Transform}\n     */\n    as(description: string) {\n        return new Transform(this.questions, this.transformation, description);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Output_Type> {\n        return Promise.all(this.questions.map(question => actor.answer(question)))\n            .then(answers => this.transformation(...answers));\n    }\n\n    toString() {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/questions/Transform.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 539,
    "kind": "class",
    "name": "Transform",
    "memberof": "src/screenplay/questions/Transform.ts",
    "static": true,
    "longname": "src/screenplay/questions/Transform.ts~Transform",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Transform}",
    "description": "",
    "lineNumber": 15,
    "experimental": true,
    "interface": false
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Transform.ts~Transform.the",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable ",
          " Array"
        ],
        "spread": false,
        "optional": false,
        "name": "questions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#as",
    "access": "public",
    "description": " Overrides the default {@link Transform#toString} representation of this object.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Transform}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transform"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "file",
    "name": "src/screenplay/questions/index.ts",
    "content": "export * from './Note';\nexport * from './Transform';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/screenplay/questions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 546,
    "kind": "file",
    "name": "src/stage/Cast.ts",
    "content": "import { Ability, Actor } from '../screenplay';\n\n/**\n * @desc\n *  Describes the {@link Actor}s available to take part in the performance.\n *\n * @example <caption>Define a cast of actors interacting with a Web UI</caption>\n *\n *  import { engage, Actor, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  class UIActors implements Cast {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *      }\n *  }\n *\n *  beforeEach(() => engage(new UIActors()));\n *\n * @example <caption>Using a generic cast</caption>\n *\n *  import { engage, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  beforeEach(() => engage(BrowseTheWeb.using(protractor.browser)));\n *\n * @example <caption>Preparing actors differently based on their name</caption>\n *\n *  import { actorCalled, engage, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { CallAnApi } from '@serenity-js/rest';\n *  import { protractor } from 'protractor';\n *\n *  class Actors implements Cast {\n *      prepare(actor: Actor) {\n *          switch (actor.name) {\n *              case 'James':\n *                  return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *              default:\n *                  return actor.whoCan(CallAnApi.at(protractor.browser.baseUrl));\n *          }\n *      }\n *  }\n *\n *  beforeEach(() => engage(new Actors()));\n *\n *  actorCalled('James') // returns an actor using a browser\n *  actorCalled('Alice') // returns an actor interacting with an API\n *\n * @see {@link Stage}\n * @interface\n */\nexport abstract class Cast {\n    /**\n     * @desc\n     *  Creates a generic `Cast` implementation, where every actor\n     *  is given all the abilities specified when the method is called.\n     *\n     * @param {Ability[]} abilities\n     * @returns {Cast}\n     */\n    static whereEveryoneCan(...abilities: Ability[]): Cast {\n        return new GenericCast(abilities);\n    }\n\n    abstract prepare(actor: Actor): Actor;\n}\n\n/**\n * @package\n */\nclass GenericCast implements Cast {\n    constructor(private readonly abilities: Ability[]) {\n    }\n\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(...this.abilities);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/Cast.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 547,
    "kind": "class",
    "name": "Cast",
    "memberof": "src/stage/Cast.ts",
    "static": true,
    "longname": "src/stage/Cast.ts~Cast",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Cast}",
    "description": " Describes the {@link Actor}s available to take part in the performance.",
    "examples": [
      "<caption>Define a cast of actors interacting with a Web UI</caption>\n\n import { engage, Actor, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n class UIActors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n     }\n }\n\n beforeEach(() => engage(new UIActors()));",
      "<caption>Using a generic cast</caption>\n\n import { engage, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n beforeEach(() => engage(BrowseTheWeb.using(protractor.browser)));",
      "<caption>Preparing actors differently based on their name</caption>\n\n import { actorCalled, engage, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { CallAnApi } from '@serenity-js/rest';\n import { protractor } from 'protractor';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         switch (actor.name) {\n             case 'James':\n                 return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n             default:\n                 return actor.whoCan(CallAnApi.at(protractor.browser.baseUrl));\n         }\n     }\n }\n\n beforeEach(() => engage(new Actors()));\n\n actorCalled('James') // returns an actor using a browser\n actorCalled('Alice') // returns an actor interacting with an API"
    ],
    "see": [
      "{@link Stage}"
    ],
    "lineNumber": 62,
    "interface": true
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "whereEveryoneCan",
    "memberof": "src/stage/Cast.ts~Cast",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/Cast.ts~Cast.whereEveryoneCan",
    "access": "public",
    "description": " Creates a generic `Cast` implementation, where every actor\n is given all the abilities specified when the method is called.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Cast}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Ability[]"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cast"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 549,
    "kind": "class",
    "name": "GenericCast",
    "memberof": "src/stage/Cast.ts",
    "static": true,
    "longname": "src/stage/Cast.ts~GenericCast",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/Cast.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 118,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 550,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Cast.ts~GenericCast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Cast.ts~GenericCast#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/Cast.ts~GenericCast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Cast.ts~GenericCast#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 552,
    "kind": "file",
    "name": "src/stage/Clock.ts",
    "content": "import { Timestamp } from '../model';\n\n/**\n * @desc A {@link Clock} tells the time.\n *\n * @example\n * const now: Timestamp = new Clock().now()\n */\nexport class Clock {\n    constructor(private readonly checkTime: () => Date = () => new Date()) {\n    }\n\n    /**\n     * @returns {Timestamp} current time\n     */\n    now(): Timestamp {\n        return new Timestamp(this.checkTime());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/Clock.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "class",
    "name": "Clock",
    "memberof": "src/stage/Clock.ts",
    "static": true,
    "longname": "src/stage/Clock.ts~Clock",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Clock}",
    "description": "A {@link Clock} tells the time.",
    "examples": [
      "const now: Timestamp = new Clock().now()"
    ],
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 554,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Clock.ts~Clock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Clock.ts~Clock#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "now",
    "memberof": "src/stage/Clock.ts~Clock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Clock.ts~Clock#now",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Timestamp} current time"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": "current time"
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "file",
    "name": "src/stage/DressingRoom.ts",
    "content": "import { Ability, Actor } from '../screenplay';\n\n/**\n * @desc\n *  Prepares the {@link Actor} for the performance.\n *\n * @example <caption>A dressing room for actors interacting with a Web UI</caption>\n *\n *  import { serenity, Actor, DressingRoom } from '@serenity-js/core'\n *  import { BrowseTheWeb } from '@serenity-js/protractor'\n *  import { protractor } from 'protractor'\n *\n *  class UIActors implements DressingRoom {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *      }\n *  }\n *\n *  const stage = serenity.callToStageFor(new UIActors());\n *\n * @see {@link Stage}\n * @see {@link Cast}\n * @interface\n *\n * @deprecated Please use the Cast instead\n */\nexport abstract class DressingRoom {\n    /**\n     * @desc\n     *  Creates a generic `DressingRoom` implementation, where every actor\n     *  is given all the abilities specified when the method is called.\n     *\n     * @param {Ability[]} abilities\n     * @returns {DressingRoom}\n     */\n    static whereEveryoneCan(...abilities: Ability[]): DressingRoom {\n        return new GenericDressingRoom(abilities);\n    }\n\n    abstract prepare(actor: Actor): Actor;\n}\n\n/**\n * @package\n */\nclass GenericDressingRoom implements DressingRoom {\n    constructor(private readonly abilities: Ability[]) {\n    }\n\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(...this.abilities);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/DressingRoom.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "class",
    "name": "DressingRoom",
    "memberof": "src/stage/DressingRoom.ts",
    "static": true,
    "longname": "src/stage/DressingRoom.ts~DressingRoom",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{DressingRoom}",
    "description": " Prepares the {@link Actor} for the performance.",
    "examples": [
      "<caption>A dressing room for actors interacting with a Web UI</caption>\n\n import { serenity, Actor, DressingRoom } from '@serenity-js/core'\n import { BrowseTheWeb } from '@serenity-js/protractor'\n import { protractor } from 'protractor'\n\n class UIActors implements DressingRoom {\n     prepare(actor: Actor) {\n         return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n     }\n }\n\n const stage = serenity.callToStageFor(new UIActors());"
    ],
    "see": [
      "{@link Stage}",
      "{@link Cast}"
    ],
    "lineNumber": 34,
    "deprecated": "Please use the Cast instead",
    "interface": true
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "whereEveryoneCan",
    "memberof": "src/stage/DressingRoom.ts~DressingRoom",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/DressingRoom.ts~DressingRoom.whereEveryoneCan",
    "access": "public",
    "description": " Creates a generic `DressingRoom` implementation, where every actor\n is given all the abilities specified when the method is called.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DressingRoom}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Ability[]"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DressingRoom"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 559,
    "kind": "class",
    "name": "GenericDressingRoom",
    "memberof": "src/stage/DressingRoom.ts",
    "static": true,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/DressingRoom.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 90,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "file",
    "name": "src/stage/Extras.ts",
    "content": "import { Actor } from '../screenplay';\nimport { Cast } from './Cast';\n\n/**\n * @desc\n *  Produces no-op actors with no special {@link Ability}\n *\n * @private\n */\nexport class Extras implements Cast {\n    prepare(actor: Actor): Actor {\n        return actor;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/Extras.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 563,
    "kind": "class",
    "name": "Extras",
    "memberof": "src/stage/Extras.ts",
    "static": true,
    "longname": "src/stage/Extras.ts~Extras",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/core/src/stage/Extras.ts",
    "importStyle": "{Extras}",
    "description": " Produces no-op actors with no special {@link Ability}",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/Extras.ts~Extras",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Extras.ts~Extras#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "file",
    "name": "src/stage/Stage.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\nimport { ConfigurationError, LogicError } from '../errors';\nimport { DomainEvent } from '../events';\nimport { ActivityDetails, CorrelationId, Timestamp } from '../model';\nimport { Activity } from '../screenplay';\nimport { ActivityDescriber } from '../screenplay/activities/ActivityDescriber';\nimport { Actor } from '../screenplay/actor';\nimport { Cast } from './Cast';\nimport { StageCrewMember } from './StageCrewMember';\nimport { StageManager } from './StageManager';\n\nexport class Stage {\n    private static readonly describer = new ActivityDescriber();\n\n    private actorsOnStage: { [name: string]: Actor } = {};\n    private actorInTheSpotlight: Actor = null;\n\n    private detailsOfCurrentActivity: ActivityDetails = null;\n\n    constructor(\n        private cast: Cast,\n        private readonly manager: StageManager,\n    ) {\n        ensure('Cast', cast, isDefined());\n        ensure('StageManager', manager, isDefined());\n    }\n\n    /**\n     * @desc An alias for {@link Stage#actor}\n     * @see {Stage#actor}\n     * @alias {Stage#actor}\n     * @param {string} name\n     * @return {Actor}\n     */\n    theActorCalled(name: string): Actor {\n        return this.actor(name);\n    }\n\n    /**\n     * @desc Instantiates a new {@link Actor} or fetches an existing one\n     * by their name if they've already been instantiated.\n     *\n     * @param {string} name - case-sensitive name of the Actor\n     * @return {Actor}\n     */\n    actor(name: string): Actor {\n        if (! this.actorsOnStage[name]) {\n            let actor;\n            try {\n                actor = this.cast.prepare(new Actor(name, this));\n            }\n            catch (error) {\n                throw new ConfigurationError(`${ this.typeOf(this.cast) } encountered a problem when preparing actor \"${ name }\" for stage`, error);\n            }\n\n            if (! (actor instanceof Actor)) {\n                throw new ConfigurationError(`Instead of a new instance of actor \"${ name }\", ${ this.typeOf(this.cast) } returned ${ actor }`);\n            }\n\n            this.actorsOnStage[name] = actor;\n        }\n\n        this.actorInTheSpotlight = this.actorsOnStage[name];\n\n        return this.actorInTheSpotlight;\n    }\n\n    /**\n     * @desc\n     *  Returns the last {@link Actor} instantiated via {@link Stage#actor}.\n     *  Useful when you don't can't or choose not to reference the actor by their name.\n     *\n     * @throws {LogicError} if no {Actor} has been activated yet\n     * @return {Actor}\n     */\n    theActorInTheSpotlight(): Actor {\n        if (! this.actorInTheSpotlight) {\n            throw new LogicError(`There is no actor in the spotlight yet. Make sure you instantiate one with stage.actor(actorName) before calling this method.`);\n        }\n\n        return this.actorInTheSpotlight;\n    }\n\n    /**\n     * @desc\n     *  Returns {true} if there is an {@link Actor} in the spotlight, {false} otherwise.\n     *\n     * @return {boolean}\n     */\n    theShowHasStarted(): boolean {\n        return !! this.actorInTheSpotlight;\n    }\n\n    /**\n     * @deprecated\n     * @param {Cast} actors\n     * @return {Stage}\n     */\n    callFor(actors: Cast): Stage {\n        this.resetActors();\n        this.engage(actors);\n\n        return this;\n    }\n\n    resetActors(): void {\n        this.actorsOnStage       = {};\n        this.actorInTheSpotlight = null;\n    }\n\n    engage(actors: Cast) {\n        ensure('Cast', actors, isDefined());\n\n        this.cast        = actors;\n    }\n\n    assign(...stageCrewMembers: StageCrewMember[]) {\n        stageCrewMembers.forEach(stageCrewMember => {\n            this.manager.register(stageCrewMember.assignedTo(this));\n        });\n    }\n\n    announce(event: DomainEvent): void {\n        this.manager.notifyOf(event);\n    }\n\n    currentTime(): Timestamp {\n        return this.manager.currentTime();\n    }\n\n    activityDetailsFor(activity: Activity, actor: { name: string }): ActivityDetails {\n        this.detailsOfCurrentActivity = new ActivityDetails(\n            Stage.describer.describe(activity, actor),\n            CorrelationId.create(),\n        );\n\n        return this.detailsOfCurrentActivity;\n    }\n\n    currentActivityDetails(): ActivityDetails {\n        if (! this.detailsOfCurrentActivity) {\n            throw new LogicError(`No activity is being performed. Did you call activityDetailsFor before invoking currentActivityDetails?`);\n        }\n\n        return this.detailsOfCurrentActivity;\n    }\n\n    waitForNextCue(): Promise<void> {\n        return this.manager.waitForNextCue();\n    }\n\n    /**\n     * @private\n     * @param {Cast} cast\n     */\n    private typeOf(cast: Cast): string {\n        return this.cast.constructor !== Object\n            ? this.cast.constructor.name\n            : 'Cast';\n    }\n\n    // todo: might be useful to ensure that the actors release any resources they're holding.\n    // drawTheCurtain() {\n        // dismiss all the actors\n        // https://github.com/serenity-bdd/serenity-core/blob/master/serenity-screenplay/src/main/java/net/serenitybdd/screenplay/actors/Stage.java\n    // }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/Stage.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 566,
    "kind": "class",
    "name": "Stage",
    "memberof": "src/stage/Stage.ts",
    "static": true,
    "longname": "src/stage/Stage.ts~Stage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Stage}",
    "description": " ",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "describer",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": true,
    "longname": "src/stage/Stage.ts~Stage.describer",
    "access": "private",
    "description": " ",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "actorsOnStage",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorsOnStage",
    "access": "private",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "actorInTheSpotlight",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorInTheSpotlight",
    "access": "private",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "detailsOfCurrentActivity",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#detailsOfCurrentActivity",
    "access": "private",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ActivityDetails"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "theActorCalled",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theActorCalled",
    "access": "public",
    "description": "An alias for {@link Stage#actor}",
    "see": [
      "{Stage#actor}"
    ],
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@alias",
        "tagValue": "{Stage#actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "actor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actor",
    "access": "public",
    "description": "Instantiates a new {@link Actor} or fetches an existing one\nby their name if they've already been instantiated.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "case-sensitive name of the Actor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "theActorInTheSpotlight",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theActorInTheSpotlight",
    "access": "public",
    "description": " Returns the last {@link Actor} instantiated via {@link Stage#actor}.\n Useful when you don't can't or choose not to reference the actor by their name.",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "LogicError"
        ],
        "description": "if no {Actor} has been activated yet"
      }
    ],
    "params": []
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "theShowHasStarted",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theShowHasStarted",
    "access": "public",
    "description": " Returns {true} if there is an {@link Actor} in the spotlight, {false} otherwise.",
    "lineNumber": 189,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "callFor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#callFor",
    "access": "public",
    "description": "",
    "lineNumber": 211,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "resetActors",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#resetActors",
    "access": "public",
    "description": " ",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "engage",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#engage",
    "access": "public",
    "description": " ",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "cast",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#cast",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "assign",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#assign",
    "access": "public",
    "description": " ",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "stageCrewMembers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "announce",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#announce",
    "access": "public",
    "description": " ",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentTime",
    "access": "public",
    "description": " ",
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "activityDetailsFor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#activityDetailsFor",
    "access": "public",
    "description": " ",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Activity"
        ],
        "spread": false,
        "optional": false,
        "name": "activity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActivityDetails"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "currentActivityDetails",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentActivityDetails",
    "access": "public",
    "description": " ",
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "ActivityDetails"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#waitForNextCue",
    "access": "public",
    "description": " ",
    "lineNumber": 148,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "typeOf",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#typeOf",
    "access": "private",
    "description": "",
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "cast",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "file",
    "name": "src/stage/StageCrewMember.ts",
    "content": "import { DomainEvent } from '../events';\nimport { Stage } from './Stage';\nimport { StageManager } from './StageManager';\n\n/**\n * @desc\n *  You can think of the {@link StageCrewMember} as an in-memory micro-service that reacts to {@link DomainEvent}s\n *  from the {@link StageManager}. Every {@link StageCrewMember} receives a reference to the {@link Stage},\n *  and therefore {@link StageManager} as well, which enables them to emit {@link DomainEvent}s back.\n *\n *  Useful when you're interested in implementing custom reporters.\n */\nexport interface StageCrewMember {\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember;\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}\n     *  this {@link StageCrewMember} is assigned to.\n     *\n     * @param {DomainEvent} event\n     * @returns void\n     */\n    notifyOf(event: DomainEvent): void;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/StageCrewMember.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 592,
    "kind": "class",
    "name": "StageCrewMember",
    "memberof": "src/stage/StageCrewMember.ts",
    "static": true,
    "longname": "src/stage/StageCrewMember.ts~StageCrewMember",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageCrewMember}",
    "description": " You can think of the {@link StageCrewMember} as an in-memory micro-service that reacts to {@link DomainEvent}s\n from the {@link StageManager}. Every {@link StageCrewMember} receives a reference to the {@link Stage},\n and therefore {@link StageManager} as well, which enables them to emit {@link DomainEvent}s back.\n\n Useful when you're interested in implementing custom reporters.",
    "lineNumber": 20,
    "interface": true
  },
  {
    "__docId__": 593,
    "kind": "file",
    "name": "src/stage/StageManager.ts",
    "content": "import { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent } from '../events';\nimport { CorrelationId, Description, Duration, Timestamp } from '../model';\nimport { StageCrewMember } from './StageCrewMember';\n\ninterface AsyncOperationDetails {\n    taskDescription:    Description;\n    startedAt:          Timestamp;\n}\n\ninterface FailedAsyncOperationDetails {\n    taskDescription:    Description;\n    startedAt:          Timestamp;\n    duration:           Duration;\n    error:              Error;\n}\n\nexport class StageManager {\n    private readonly subscribers: StageCrewMember[] = [];\n    private readonly wip: Map<CorrelationId, AsyncOperationDetails> = new Map();\n    private readonly failedOperations: FailedAsyncOperationDetails[] = [];\n\n    constructor(private readonly cueTimeout: Duration,\n                private readonly clock) {\n    }\n\n    register(...stageCrewMembers: StageCrewMember[]) {\n        this.subscribers.push(...stageCrewMembers);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        this.handleAsyncOperation(event);\n\n        this.subscribers.forEach(crewMember => crewMember.notifyOf(event));\n    }\n\n    waitForNextCue(): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            let interval: NodeJS.Timer,\n                timeout: NodeJS.Timer;\n\n            timeout = setTimeout(() => {\n                clearInterval(interval);\n\n                if (this.wip.size > 0) {\n                    let message = `Some of the ${ this.wip.size } async operations have failed to complete within ${ this.cueTimeout.toString()}:\\n`;\n\n                    this.wip.forEach((op: AsyncOperationDetails) => {\n                        message += `${ this.clock.now().diff(op.startedAt) } - ${ op.taskDescription.value }\\n`;\n                    });\n\n                    return reject(new Error(message));\n                }\n\n                if (this.failedOperations.length > 0) {\n                    let message = `Some of the async operations have failed:\\n`;\n\n                    this.failedOperations.forEach((op: FailedAsyncOperationDetails) => {\n                        message += `${ op.taskDescription.value } - ${ op.error.stack }\\n---\\n`;\n                    });\n\n                    return reject(new Error(message));\n                }\n\n                // \"else\" can't happen because this case is covered by the interval check below\n\n            }, this.cueTimeout.inMilliseconds());\n\n            interval = setInterval(() => {\n                if (this.wip.size === 0 && this.failedOperations.length === 0) {\n                    clearTimeout(timeout);\n                    clearInterval(interval);\n\n                    return resolve();\n                }\n            }, 10);\n        });\n    }\n\n    currentTime(): Timestamp {\n        return this.clock.now();\n    }\n\n    private handleAsyncOperation(event: DomainEvent): void {\n        if (event instanceof AsyncOperationAttempted) {\n            this.wip.set(event.correlationId, {\n                taskDescription: event.taskDescription,\n                startedAt: event.timestamp,\n            });\n        }\n        else if (event instanceof AsyncOperationCompleted) {\n            this.wip.delete(event.correlationId);\n        }\n        else if (event instanceof AsyncOperationFailed) {\n            const original = this.wip.get(event.correlationId);\n            this.failedOperations.push({\n                taskDescription:    original.taskDescription,\n                startedAt:          original.startedAt,\n                duration:           event.timestamp.diff(original.startedAt),\n                error:              event.error,\n            });\n            this.wip.delete(event.correlationId);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/StageManager.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 594,
    "kind": "class",
    "name": "StageManager",
    "memberof": "src/stage/StageManager.ts",
    "static": true,
    "longname": "src/stage/StageManager.ts~StageManager",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageManager}",
    "description": " ",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 595,
    "kind": "member",
    "name": "subscribers",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#subscribers",
    "access": "private",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "wip",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#wip",
    "access": "private",
    "description": " ",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "failedOperations",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#failedOperations",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 598,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "register",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#register",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "stageCrewMembers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#waitForNextCue",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#currentTime",
    "access": "public",
    "description": " ",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "handleAsyncOperation",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#handleAsyncOperation",
    "access": "private",
    "description": " ",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 604,
    "kind": "file",
    "name": "src/stage/WithStage.ts",
    "content": "import { Stage } from './Stage';\n\n/**\n * @desc Makes the {@link Stage} object setup in your test runner configuration visible\n * to test steps or test scenarios.\n *\n * When using Cucumber, the {@link Stage} is typically set up using the Cucumber World Constructor.\n * When using Jasmine, the {@link Stage} is typically set up in the `beforeEach` step.\n *\n * @see https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/api_reference.md\n * @see https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/step_definitions.md\n * @see https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n *\n * @example <caption>Usage with Cucumber.js</caption>\n * // features/support/configure_serenity.ts\n * import { WithStage } from '@serenity-js/core';\n * import { setWorldConstructor } from 'cucumber';\n *\n * setWorldConstructor(function (this: WithStage, { parameters }) {\n *   this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n * });\n *\n * // features/step_definitions/some.steps.ts\n * import { WithStage } from '@serenity-js/cucumber';\n *\n * Given(/(.*?) is a registered customer/, function (this: WithStage, actorName: string) {\n *   return this.stage.actor(actorName).attemptsTo(\n *\n *   );\n * });\n *\n * @example <caption>Usage with Jasmine</caption>\n * // spec/some.spec.ts\n * import { serenity, WithStage } from '@serenity-js/core';\n *\n * describe('Using the Stage', () => {\n *   beforeEach(function (this: WithStage) {\n *     this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n *   });\n *\n *   it('makes it easy to access the Actors', function(this: WithStage) {\n *     return this.stage.theActorCalled('Barry').attemptsTo(\n *       // tasks\n *     );\n *   })\n * });\n *\n * @deprecated Please use serenity.actor() and serenity.actorInTheSpotlight() instead\n */\nexport interface WithStage {\n    stage: Stage;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/WithStage.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "WithStage",
    "memberof": "src/stage/WithStage.ts",
    "static": true,
    "longname": "src/stage/WithStage.ts~WithStage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{WithStage}",
    "description": "Makes the {@link Stage} object setup in your test runner configuration visible\nto test steps or test scenarios.\n\nWhen using Cucumber, the {@link Stage} is typically set up using the Cucumber World Constructor.\nWhen using Jasmine, the {@link Stage} is typically set up in the `beforeEach` step.",
    "examples": [
      "<caption>Usage with Cucumber.js</caption>\n// features/support/configure_serenity.ts\nimport { WithStage } from '@serenity-js/core';\nimport { setWorldConstructor } from 'cucumber';\n\nsetWorldConstructor(function (this: WithStage, { parameters }) {\n  this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n});\n\n// features/step_definitions/some.steps.ts\nimport { WithStage } from '@serenity-js/cucumber';\n\nGiven(/(.*?) is a registered customer/, function (this: WithStage, actorName: string) {\n  return this.stage.actor(actorName).attemptsTo(\n\n  );\n});",
      "<caption>Usage with Jasmine</caption>\n// spec/some.spec.ts\nimport { serenity, WithStage } from '@serenity-js/core';\n\ndescribe('Using the Stage', () => {\n  beforeEach(function (this: WithStage) {\n    this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n  });\n\n  it('makes it easy to access the Actors', function(this: WithStage) {\n    return this.stage.theActorCalled('Barry').attemptsTo(\n      // tasks\n    );\n  })\n});"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/api_reference.md",
      "https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/step_definitions.md",
      "https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters"
    ],
    "lineNumber": 57,
    "deprecated": "Please use serenity.actor() and serenity.actorInTheSpotlight() instead",
    "interface": true
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "stage",
    "memberof": "src/stage/WithStage.ts~WithStage",
    "static": false,
    "longname": "src/stage/WithStage.ts~WithStage#stage",
    "access": "public",
    "description": " ",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 607,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "content": "import { ensure, isGreaterThan, property } from 'tiny-types';\nimport {\n    ActivityRelatedArtifactArchived,\n    ActivityRelatedArtifactGenerated,\n    ArtifactArchived,\n    ArtifactGenerated,\n    AsyncOperationAttempted,\n    AsyncOperationCompleted,\n    AsyncOperationFailed,\n    DomainEvent,\n} from '../../../events';\nimport { FileSystem, Path } from '../../../io';\nimport { Artifact, ArtifactType, CorrelationId, Description, Name, Photo, TestReport } from '../../../model';\nimport { Stage } from '../../Stage';\nimport { StageCrewMember } from '../../StageCrewMember';\nimport { Hash } from './Hash';\n\n/**\n * @desc Stores any {@link Artifact}s emitted through {@link ArtifactGenerated} events on the {@link FileSystem}\n *\n * @access public\n */\nexport class ArtifactArchiver implements StageCrewMember {\n\n    static storingArtifactsAt(...destination: string[]): ArtifactArchiver {\n        ensure('Path to destination directory', destination, property('length', isGreaterThan(0)));\n\n        const pathToDestination = destination.map(segment => new Path(segment)).reduce((acc, current) => acc.join(current));\n\n        return new ArtifactArchiver(new FileSystem(pathToDestination));\n    }\n\n    constructor(\n        private readonly fileSystem: FileSystem,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    assignedTo(stage: Stage) {\n        return new ArtifactArchiver(this.fileSystem, stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n\n        if (!(event instanceof ArtifactGenerated)) {\n            // ignore any other events\n            return void 0;\n        }\n\n        if (event.artifact instanceof Photo) {\n            const filename = this.fileNameFor('photo', event.name, event.artifact, 'png');\n\n            this.archive(\n                filename,\n                event.artifact.base64EncodedValue,\n                'base64',\n                this.archivisationAnnouncement(event, filename),\n            );\n        }\n\n        if (event.artifact instanceof TestReport) {\n            const filename = this.fileNameFor('scenario', event.name, event.artifact, 'json');\n\n            this.archive(\n                filename,\n                event.artifact.map(JSON.stringify),\n                'utf8',\n                this.archivisationAnnouncement(event, filename),\n            );\n        }\n    }\n\n    private fileNameFor(prefix: string, artifactName: Name, artifact: Artifact, extension: string): Path {\n        const hash = Hash.of(artifact.base64EncodedValue).short();\n        return Path.fromSanitisedString(\n            // Ensure that the file name is shorter than 250 chars, which is safe with all the filesystems\n            // note: we can't do that in the Path constructor as the Path can be used to join other paths,\n            // so restricting the length of the _path_ itself would not be correct.\n            `${ prefix.substring(0, 10) }-${ artifactName.value.toLocaleLowerCase().substring(0, 220) }-${ hash }.${ extension }`,\n            // characters:     10        1         220                                                 1    10   1    4            < 250\n\n        );\n    }\n\n    private archive(relativePath: Path, contents: string, encoding: string, announce: (absolutePath: Path) => void): void {\n        const id = CorrelationId.create();\n\n        this.stage.announce(new AsyncOperationAttempted(\n            new Description(`[${ this.constructor.name }] Saving '${ relativePath.value }'...`),\n            id,\n        ));\n\n        this.fileSystem.store(relativePath, contents, encoding)\n            .then(absolutePath => {\n                announce(relativePath);\n\n                this.stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Saved '${ absolutePath.value }'`),\n                    id,\n                ));\n            })\n            .catch(error => {\n                this.stage.announce(new AsyncOperationFailed(error, id));\n            });\n    }\n\n    private archivisationAnnouncement(evt: ArtifactGenerated | ActivityRelatedArtifactGenerated, relativePathToArtifact: Path) {\n        return (absolutePath: Path) => {\n            if (evt instanceof ActivityRelatedArtifactGenerated) {\n                this.stage.announce(new ActivityRelatedArtifactArchived(\n                    evt.details,\n                    evt.name,\n                    evt.artifact.constructor as ArtifactType,\n                    relativePathToArtifact,\n                ));\n            } else if (evt instanceof ArtifactGenerated) {\n                this.stage.announce(new ArtifactArchived(\n                    evt.name,\n                    evt.artifact.constructor as ArtifactType,\n                    relativePathToArtifact,\n                ));\n            }\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 608,
    "kind": "class",
    "name": "ArtifactArchiver",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage/crew/artifact-archiver",
    "importStyle": "{ArtifactArchiver}",
    "description": "Stores any {@link Artifact}s emitted through {@link ArtifactGenerated} events on the {@link FileSystem}",
    "lineNumber": 30,
    "interface": false
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "storingArtifactsAt",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.storingArtifactsAt",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArtifactArchiver"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 610,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "fileNameFor",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#fileNameFor",
    "access": "private",
    "description": " ",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Name"
        ],
        "spread": false,
        "optional": false,
        "name": "artifactName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Artifact"
        ],
        "spread": false,
        "optional": false,
        "name": "artifact",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "archive",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#archive",
    "access": "private",
    "description": " ",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativePath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "announce",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "archivisationAnnouncement",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#archivisationAnnouncement",
    "access": "private",
    "description": " ",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtifactGenerated ",
          " ActivityRelatedArtifactGenerated"
        ],
        "spread": false,
        "optional": false,
        "name": "evt",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativePathToArtifact",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/Hash.ts",
    "content": "import { createHash } from 'crypto';\nimport { ensure, isDefined, TinyType } from 'tiny-types';\n\n/**\n * @package\n */\nexport class Hash extends TinyType {\n    static of(value: string): Hash {\n        return new Hash(createHash('sha1').update(value).digest('hex'));\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n\n    long(): string {\n        return this.value;\n    }\n\n    short(): string {\n        return this.value.substring(0, 10);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/Hash.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 617,
    "kind": "class",
    "name": "Hash",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts",
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/stage/crew/artifact-archiver/Hash.ts",
    "importStyle": "{Hash}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ],
    "ignore": true
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "of",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash.of",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Hash"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 619,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "long",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#long",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "short",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#short",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 622,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/index.ts",
    "content": "export * from './ArtifactArchiver';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 623,
    "kind": "file",
    "name": "src/stage/crew/index.ts",
    "content": "export * from './artifact-archiver';\nexport * from './stream-reporter';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 624,
    "kind": "file",
    "name": "src/stage/crew/stream-reporter/StreamReporter.ts",
    "content": "import WriteStream = NodeJS.WriteStream;\nimport { DomainEvent } from '../../../events';\nimport { Stage } from '../../Stage';\nimport { StageCrewMember } from '../../StageCrewMember';\n\n/**\n * @desc\n *  Serialises all the {@link DomainEvent} objects it receives and streams\n *  them as [ndjson](http://ndjson.org/)\n *  to the output stream.\n *\n * @example <caption>Writing DomainEvents to standard output</caption>\n * import { serenity, StreamReporter } form '@serenity-js/core';\n *\n * serenity.configure({\n *     crew: [ new StreamReporter(process.stdout) ],\n * });\n *\n * @example <caption>Writing DomainEvents to a file</caption>\n * import { serenity, StreamReporter } form '@serenity-js/core';\n * import fs = require('fs');\n *\n * serenity.configure({\n *     crew: [ new StreamReporter(fs.createWriteStream('./events.ndjson')) ],\n * });\n *\n * @implements {StageCrewMember}\n */\nexport class StreamReporter implements StageCrewMember {\n\n    /**\n     * @param {WriteStream} output - A WriteStream that should receive the output\n     * @param {Stage} [stage=null] - The stage this {@link StageCrewMember} should be assigned to\n     */\n    constructor(\n        private readonly output: WriteStream = process.stdout,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new StreamReporter(this.output, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link StageManager}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @param {DomainEvent} event\n     * @returns {void}\n     */\n    notifyOf(event: DomainEvent): void {\n        this.output.write(\n            JSON.stringify({ type: event.constructor.name, event: event.toJSON() }) + '\\n',\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/stream-reporter/StreamReporter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 625,
    "kind": "class",
    "name": "StreamReporter",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts",
    "static": true,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage/crew/stream-reporter",
    "importStyle": "{StreamReporter}",
    "description": " Serialises all the {@link DomainEvent} objects it receives and streams\n them as [ndjson](http://ndjson.org/)\n to the output stream.",
    "examples": [
      "<caption>Writing DomainEvents to standard output</caption>\nimport { serenity, StreamReporter } form '@serenity-js/core';\n\nserenity.configure({\n    crew: [ new StreamReporter(process.stdout) ],\n});",
      "<caption>Writing DomainEvents to a file</caption>\nimport { serenity, StreamReporter } form '@serenity-js/core';\nimport fs = require('fs');\n\nserenity.configure({\n    crew: [ new StreamReporter(fs.createWriteStream('./events.ndjson')) ],\n});"
    ],
    "lineNumber": 36,
    "interface": false,
    "implements": [
      "StageCrewMember"
    ]
  },
  {
    "__docId__": 626,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "WriteStream"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "A WriteStream that should receive the output"
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "stage",
        "description": "The stage this {@link StageCrewMember} should be assigned to"
      }
    ]
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link StageManager}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 629,
    "kind": "file",
    "name": "src/stage/crew/stream-reporter/index.ts",
    "content": "export * from './StreamReporter';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/crew/stream-reporter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 630,
    "kind": "file",
    "name": "src/stage/index.ts",
    "content": "export * from './Cast';\nexport * from './Clock';\nexport * from './Cast';\nexport * from './DressingRoom';\nexport * from './crew';\nexport * from './StageCrewMember';\nexport * from './StageManager';\nexport * from './Stage';\nexport * from './WithStage';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/src/stage/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a Node.js library designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\n## Serenity/JS Core\n\nThis module is the heart of the [Serenity/JS](https://serenity-js.org) framework.\n\nIt enables you to configure the framework, manage the actors, and provides the basic building blocks\nto design your tests with.\n\n### Installation\n\n```\nnpm install --save-dev @serenity-js/core\n```\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/core\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Serenity/JS Screenplay, reporting engine and core interfaces.\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"bdd\",\n    \"tdd\",\n    \"test\",\n    \"testing\",\n    \"serenity\",\n    \"screenplay\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"tslint --project tsconfig-lint.json --config ../../tslint.json --format stylish\",\n    \"test\": \"nyc --report-dir ../../target/coverage/core mocha --opts ../../mocha.opts 'spec/**/*.spec.*'\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"dependencies\": {\n    \"cuid\": \"2.1.8\",\n    \"diff\": \"^4.0.1\",\n    \"error-stack-parser\": \"2.0.2\",\n    \"filenamify\": \"^4.1.0\",\n    \"graceful-fs\": \"4.2.3\",\n    \"moment\": \"2.24.0\",\n    \"semver\": \"^6.0.0\",\n    \"tiny-types\": \"1.12.2\",\n    \"upath\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.0.1-alpha.126\",\n    \"@types/cuid\": \"1.3.0\",\n    \"@types/diff\": \"^4.0.2\",\n    \"@types/filenamify\": \"^2.0.2\",\n    \"@types/mkdirp\": \"0.5.2\",\n    \"@types/mocha\": \"^5.2.6\",\n    \"@types/semver\": \"^6.0.0\",\n    \"memfs\": \"^3.0.3\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \">= 8\",\n    \"npm\": \">= 5\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"spec\",\n      \"node_modules\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 631,
    "kind": "testFile",
    "name": "spec/Serenity.spec.ts",
    "content": "import sinon = require('sinon');\nimport { ActivityFinished, ActivityStarts, DomainEvent, TestRunnerDetected } from '../src/events';\nimport { Name } from '../src/model';\nimport { Actor, Interaction } from '../src/screenplay';\nimport { Serenity } from '../src/Serenity';\nimport { Cast, Clock, Stage, StageCrewMember } from '../src/stage';\nimport { expect } from './expect';\n\ndescribe('Serenity', () => {\n\n    it('constructs a Stage and connects it with a provided Cast', () => {\n\n        const prepareSpy = sinon.spy();\n\n        // no-op actors with no special Abilities\n        class Extras implements Cast {\n            prepare(actor: Actor): Actor {\n                prepareSpy(actor);\n                return actor;\n            }\n        }\n\n        const serenity = new Serenity(new Clock());\n\n        serenity.configure({\n            actors: new Extras(),\n        });\n\n        const Joe = serenity.theActorCalled('Joe');\n\n        expect(prepareSpy).to.have.been.calledOnce;                      // tslint:disable-line:no-unused-expression\n        expect(prepareSpy.getCall(0).args[0]).to.equal(Joe);\n    });\n\n    it('enables propagation of DomainEvents triggered by Actors\\' Activities and StageCrewMembers', () => {\n\n        class Extras implements Cast {\n            prepare(actor: Actor): Actor {\n                return actor;\n            }\n        }\n\n        const PerformSomeInteraction = () => Interaction.where(`#actor performs some interaction`, actor => {\n            return void 0;\n        });\n\n        const frozenClock = new Clock(() => new Date('1983-07-03'));\n        const serenity = new Serenity(frozenClock);\n        const listener = new Listener<ActivityStarts | ActivityFinished>();\n\n        serenity.configure({\n            actors: new Extras(),\n            crew: [ listener ],\n        });\n\n        return serenity.theActorCalled('Joe').attemptsTo(\n            PerformSomeInteraction(),\n        ).\n        then(() => serenity.waitForNextCue()).\n        then(() => {\n            expect(listener.events).to.have.lengthOf(2);\n\n            expect(listener.events[0]).to.be.instanceOf(ActivityStarts);\n            expect(listener.events[0].value.name.value).to.equal(`Joe performs some interaction`);\n\n            expect(listener.events[1]).to.be.instanceOf(ActivityFinished);\n            expect(listener.events[1].value.name.value).to.equal(`Joe performs some interaction`);\n        });\n    });\n\n    it('allows for external parties, such as test runner adapters, to announce DomainEvents', () => {\n\n        const frozenClock = new Clock(() => new Date('1983-07-03'));\n        const serenity = new Serenity(frozenClock);\n        const listener = new Listener<TestRunnerDetected>();\n\n        const testRunnerName = new Name('mocha');\n\n        serenity.configure({ crew: [ listener ] });\n\n        serenity.announce(new TestRunnerDetected(testRunnerName, serenity.currentTime()));\n\n        return serenity.waitForNextCue().\n            then(() => {\n                expect(listener.events).to.have.lengthOf(1);\n\n                expect(listener.events[0]).to.be.instanceOf(TestRunnerDetected);\n                expect(listener.events[0].value).to.equal(testRunnerName);\n            });\n    });\n\n    class Listener<Event_Type extends DomainEvent> implements StageCrewMember {\n        public readonly events: Event_Type[] = [];\n\n        constructor(private stage: Stage = null) {\n        }\n\n        assignedTo(stage: Stage): StageCrewMember {\n            this.stage = stage;\n\n            return this;\n        }\n\n        notifyOf(event: Event_Type): void {\n            this.events.push(event);\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/Serenity.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 632,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/Serenity.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0",
    "access": null,
    "description": "Serenity",
    "lineNumber": 9
  },
  {
    "__docId__": 633,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.it1",
    "access": null,
    "description": "constructs a Stage and connects it with a provided Cast",
    "lineNumber": 11
  },
  {
    "__docId__": 634,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.it2",
    "access": null,
    "description": "enables propagation of DomainEvents triggered by Actors' Activities and StageCrewMembers",
    "lineNumber": 55
  },
  {
    "__docId__": 635,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.it3",
    "access": null,
    "description": "allows for external parties, such as test runner adapters, to announce DomainEvents",
    "lineNumber": 111
  },
  {
    "__docId__": 636,
    "kind": "testFile",
    "name": "spec/errors/RuntimeError.spec.ts",
    "content": "import 'mocha';\n\nimport { RuntimeError } from '../../src/errors';\nimport { expect } from '../expect';\n\ndescribe('RuntimeError', () => {\n\n    describe('subclass', () => {\n\n        class CustomError extends RuntimeError {\n            constructor(message: string) {\n                super(CustomError, message);\n            }\n        }\n\n        let error: RuntimeError;\n        beforeEach(() => {\n            error = new CustomError('something happened');\n        });\n\n        /** @test {RuntimeError} */\n        it('is recognised as an instance of its type', () => {\n            expect(error).to.be.instanceOf(Error);\n            expect(error).to.be.instanceOf(RuntimeError);\n            expect(error).to.be.instanceOf(CustomError);\n        });\n\n        /** @test {RuntimeError} */\n        it('has a message', () => {\n            expect(error.message).to.equal('something happened');\n        });\n\n        /** @test {RuntimeError} */\n        it('retains the stacktrace', () => {\n            const frames = error.stack.split('\\n');\n\n            expect(frames[0]).to.equal('CustomError: something happened');\n            expect(frames[1]).to.contain(__filename);\n        });\n    });\n\n    describe('when propagating errors', () => {\n\n        class ApplicationError extends RuntimeError {\n            constructor(message: string, cause?: Error) {\n                super(ApplicationError, message, cause);\n            }\n        }\n\n        class IOError extends RuntimeError {\n            constructor(message: string, cause?: Error) {\n                super(IOError, message, cause);\n            }\n        }\n\n        /** @test {RuntimeError} */\n        it('includes the stack trace of the original errors', () => {\n\n            const fsError  = new Error('ENOENT: no such file or directory');\n            const ioError  = new IOError(`Directory not writable`, fsError);\n            const appError = new ApplicationError('Report could not be saved', ioError);\n\n            const significantFrames = appError.stack.split('\\n').filter(frame => ! frame.startsWith('    '));\n\n            expect(significantFrames).to.deep.equal([\n                'ApplicationError: Report could not be saved',\n                'Caused by: IOError: Directory not writable',\n                'Caused by: Error: ENOENT: no such file or directory',\n            ]);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/errors/RuntimeError.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 637,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "spec/errors/RuntimeError.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4",
    "access": null,
    "description": "RuntimeError",
    "lineNumber": 6
  },
  {
    "__docId__": 638,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4",
    "testDepth": 1,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe5",
    "access": null,
    "description": "subclass",
    "lineNumber": 8
  },
  {
    "__docId__": 639,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe5.it6",
    "access": null,
    "description": "is recognised as an instance of its type",
    "lineNumber": 29,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 640,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe5.it7",
    "access": null,
    "description": "has a message",
    "lineNumber": 36,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 641,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe5.it8",
    "access": null,
    "description": "retains the stacktrace",
    "lineNumber": 41,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 642,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4",
    "testDepth": 1,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe9",
    "access": null,
    "description": "when propagating errors",
    "lineNumber": 49
  },
  {
    "__docId__": 643,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe4.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe4.describe9.it10",
    "access": null,
    "description": "includes the stack trace of the original errors",
    "lineNumber": 78,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 644,
    "kind": "testFile",
    "name": "spec/io/ErrorSerialiser.spec.ts",
    "content": "import { AssertionError } from '../../src/errors';\nimport { ErrorSerialiser } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe ('ErrorSerialiser', () => {\n\n    /** @test {ErrorSerialiser} */\n    it('serialises an Error object to JSON', () => {\n        const e = new Error(`Something happened`);\n\n        expect(ErrorSerialiser.serialise(e)).to.deep.equal({\n            name: 'Error',\n            message: 'Something happened',\n            stack: e.stack,\n        });\n    });\n\n    /** @test {ErrorSerialiser} */\n    it('deserialises a serialised Error object from JSON', () => {\n        const stack = [\n            'Error: Something happened',\n            '    at /app/index.js:38:20',\n            '    at Generator.next (<anonymous>)',\n        ].join('\\n');\n\n        const error = ErrorSerialiser.deserialise({\n            name: 'Error',\n            message: 'Something happened',\n            stack,\n        });\n\n        expect(error).to.be.instanceOf(Error);\n        expect(error.name).to.equal(`Error`);\n        expect(error.message).to.equal(`Something happened`);\n        expect(error.stack).to.equal(stack);\n    });\n\n    /** @test {ErrorSerialiser} */\n    it('serialises a custom Error object to JSON', () => {\n        const\n            error = new AssertionError(`Expected false to equal true`, true, false),\n            serialised = ErrorSerialiser.serialise(error);\n\n        expect(serialised.name).to.equal('AssertionError');\n        expect(serialised.message).to.equal('Expected false to equal true');\n    });\n\n    /** @test {ErrorSerialiser} */\n    it('deserialises a serialised custom Error object from JSON', () => {\n        const stack = [\n            'AssertionError: Expected false to equal true',\n            '    at /app/index.js:38:20',\n            '    at Generator.next (<anonymous>)',\n        ].join('\\n');\n\n        const error = ErrorSerialiser.deserialise({\n            name: 'AssertionError',\n            message: 'Expected false to equal true',\n            stack,\n        });\n\n        expect(error).to.be.instanceOf(AssertionError);\n        expect(error.name).to.equal(`AssertionError`);\n        expect(error.message).to.equal(`Expected false to equal true`);\n        expect(error.stack).to.equal(stack);\n    });\n\n    /** @test {ErrorSerialiser} */\n    it('deserialises the error object from a stack trace alone (Cucumber event protocol)', () => {\n        const stack = `Error: Something's wrong\\n    at World.<anonymous> (features/step_definitions/synchronous.steps.ts:9:15)`;\n\n        const error: Error = ErrorSerialiser.deserialiseFromStackTrace(stack);\n\n        expect(error).to.be.instanceOf(Error);\n        expect(error.name).to.equal(`Error`);\n        expect(error.message).to.equal(`Something's wrong`);\n        expect(error.stack).to.equal(stack);\n    });\n\n    /** @test {ErrorSerialiser} */\n    it('deserialises the error object from a string (Cucumber event protocol)', () => {\n        const stack = `function has 2 arguments, should have 3 (if synchronous or returning a promise) or 4 (if accepting a callback)`;\n\n        const error: Error = ErrorSerialiser.deserialiseFromStackTrace(stack);\n\n        expect(error).to.be.instanceOf(Error);\n        expect(error.name).to.equal(`Error`);\n        expect(error.message).to.equal(`function has 2 arguments, should have 3 (if synchronous or returning a promise) or 4 (if accepting a callback)`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/ErrorSerialiser.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 645,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "spec/io/ErrorSerialiser.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "access": null,
    "description": "ErrorSerialiser",
    "lineNumber": 5
  },
  {
    "__docId__": 646,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it12",
    "access": null,
    "description": "serialises an Error object to JSON",
    "lineNumber": 8,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 647,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it13",
    "access": null,
    "description": "deserialises a serialised Error object from JSON",
    "lineNumber": 19,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 648,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it14",
    "access": null,
    "description": "serialises a custom Error object to JSON",
    "lineNumber": 39,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 649,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it15",
    "access": null,
    "description": "deserialises a serialised custom Error object from JSON",
    "lineNumber": 49,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 650,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it16",
    "access": null,
    "description": "deserialises the error object from a stack trace alone (Cucumber event protocol)",
    "lineNumber": 69,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 651,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe11.it17",
    "access": null,
    "description": "deserialises the error object from a string (Cucumber event protocol)",
    "lineNumber": 81,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 652,
    "kind": "testFile",
    "name": "spec/io/FileSystem.spec.ts",
    "content": "import { FileSystem, Path } from '../../src/io';\nimport { expect } from '../expect';\nimport { FakeFS } from '../FakeFS';\n\n/** @test {FileSystem} */\ndescribe ('FileSystem', () => {\n\n    const\n        image        = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEX/TQBcNTh/AAAAAXRSTlPM0jRW/QAAAApJREFUeJxjYgAAAAYAAzY3fKgAAAAASUVORK5CYII=',\n        imageBuffer  = Buffer.from(image, 'base64'),\n        originalJSON = { name: 'jan' },\n        processCWD   = new Path('/Users/jan/projects/serenityjs');\n\n    describe ('when storing JSON files', () => {\n\n        it ('stores a JSON file in a desired location', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            return expect(out.store(new Path('outlet/some.json'), JSON.stringify(originalJSON))).to.be.fulfilled.then(absolutePath => {\n                expect(fs.existsSync(absolutePath.value)).to.equal(true);\n                expect(jsonFrom(fs.readFileSync(absolutePath.value))).to.eql(originalJSON);\n            });\n        });\n\n        it ('tells the absolute path to a JSON file once it is saved', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs),\n                dest = new Path('outlet/some.json');\n\n            return expect(out.store(dest, JSON.stringify(originalJSON))).to.be.fulfilled.\n                then(result => expect(result.equals(processCWD.resolve(dest))));\n        });\n\n        it (`complains when the file can't be written`, () => {\n            const fs = FakeFS.with(FakeFS.Empty_Directory);\n\n            (fs as any).writeFile = () => { // memfs doesn't support mocking error conditions or permissions\n                throw new Error('EACCES, permission denied');\n            };\n\n            const out = new FileSystem(new Path('/'), fs);\n\n            return expect(out.store(new Path('dir/file.json'), JSON.stringify(originalJSON)))\n                .to.be.eventually.rejectedWith('EACCES, permission denied');\n        });\n    });\n\n    describe ('when storing pictures', () => {\n\n        it ('stores a base64-encoded picture at a desired location', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            return expect(out.store(new Path('outlet/some.png'), imageBuffer)).to.be.fulfilled.then(absolutePath => {\n                expect(fs.existsSync(absolutePath.value)).to.equal(true);\n                expect(pictureAt(fs.readFileSync(absolutePath.value))).to.eql(image);\n            });\n        });\n\n        it ('tells the absolute path to a JSON file once it is saved', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs),\n                dest = new Path('outlet/some.png');\n\n            return expect(out.store(dest, imageBuffer)).to.be.fulfilled.then(absolutePath => {\n                expect(absolutePath.equals(processCWD.join(dest))).to.equal(true);\n            });\n        });\n    });\n\n    describe ('when removing', () => {\n\n        describe('individual files', () => {\n\n            it('removes the file', () => {\n                const\n                    fs = FakeFS.with({\n                        [processCWD.value]: {\n                            outlet: {\n                                subdir: {\n                                    'file-to-be-deleted.json': '{}',\n                                    'file-not-to-be-deleted.json': '{}',\n                                },\n                            },\n                        },\n                    }),\n                    out = new FileSystem(processCWD, fs);\n\n                return expect(out.remove(new Path('outlet/subdir/file-to-be-deleted.json'))).to.be.fulfilled.then(() => {\n\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-to-be-deleted.json')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-not-to-be-deleted.json')).value)).to.equal(true);\n                });\n            });\n        });\n\n        describe('directories', () => {\n\n            it('removes the directory recursively', () => {\n                const\n                    fs = FakeFS.with({\n                        [processCWD.value]: {\n                            outlet: {\n                                subdir: {\n                                    'file-to-be-deleted.json': '{}',\n                                },\n                                another: {\n                                    'file-not-to-be-deleted.json': '{}',\n                                },\n                            },\n                        },\n                    }),\n                    out = new FileSystem(processCWD, fs);\n\n                return expect(out.remove(new Path('outlet/subdir'))).to.be.fulfilled.then(() => {\n\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-to-be-deleted.json')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/another/file-not-to-be-deleted.json')).value)).to.equal(true);\n                });\n            });\n        });\n    });\n\n    function jsonFrom(file: Buffer) {\n        return JSON.parse(file.toString('ascii'));\n    }\n\n    function pictureAt(file: Buffer) {\n        return Buffer.from(file).toString('base64');\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/FileSystem.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "spec/io/FileSystem.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18",
    "access": null,
    "description": "FileSystem",
    "lineNumber": 6,
    "testTargets": [
      "FileSystem"
    ]
  },
  {
    "__docId__": 654,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "spec/io/FileSystem.spec.ts~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe19",
    "access": null,
    "description": "when storing JSON files",
    "lineNumber": 14
  },
  {
    "__docId__": 655,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe19.it20",
    "access": null,
    "description": "stores a JSON file in a desired location",
    "lineNumber": 16
  },
  {
    "__docId__": 656,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe19.it21",
    "access": null,
    "description": "tells the absolute path to a JSON file once it is saved",
    "lineNumber": 29
  },
  {
    "__docId__": 657,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe19.it22",
    "access": null,
    "lineNumber": 41
  },
  {
    "__docId__": 658,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "spec/io/FileSystem.spec.ts~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe23",
    "access": null,
    "description": "when storing pictures",
    "lineNumber": 55
  },
  {
    "__docId__": 659,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe23.it24",
    "access": null,
    "description": "stores a base64-encoded picture at a desired location",
    "lineNumber": 57
  },
  {
    "__docId__": 660,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe23.it25",
    "access": null,
    "description": "tells the absolute path to a JSON file once it is saved",
    "lineNumber": 70
  },
  {
    "__docId__": 661,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/io/FileSystem.spec.ts~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe26",
    "access": null,
    "description": "when removing",
    "lineNumber": 84
  },
  {
    "__docId__": 662,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe26.describe27",
    "access": null,
    "description": "individual files",
    "lineNumber": 86
  },
  {
    "__docId__": 663,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe26.describe27.it28",
    "access": null,
    "description": "removes the file",
    "lineNumber": 88
  },
  {
    "__docId__": 664,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe26.describe29",
    "access": null,
    "description": "directories",
    "lineNumber": 110
  },
  {
    "__docId__": 665,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/io/FileSystem.spec.ts~describe18.describe26.describe29",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe18.describe26.describe29.it30",
    "access": null,
    "description": "removes the directory recursively",
    "lineNumber": 112
  },
  {
    "__docId__": 666,
    "kind": "testFile",
    "name": "spec/io/FileSystemLocation.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { JSONObject } from 'tiny-types';\n\nimport { FileSystemLocation, Path } from '../../src/io';\nimport { expect } from '../expect';\n\n/** @test {FileSystemLocation} */\ndescribe ('FileSystemLocation', () => {\n\n    const path = new Path('/home/jan/file.json');\n\n    given(\n        { description: 'no line or column',                     location: new FileSystemLocation(path)          },\n        { description: 'line available',                        location: new FileSystemLocation(path, 10)      },\n        { description: 'line and column available available',   location: new FileSystemLocation(path, 10, 3)   },\n    ).\n    it('can be serialised and deserialised', ({ location }) => {\n        expect(FileSystemLocation.fromJSON(location.toJSON() as JSONObject))\n            .to.equal(location);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/FileSystemLocation.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 667,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "spec/io/FileSystemLocation.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/FileSystemLocation.spec.ts~describe31",
    "access": null,
    "description": "FileSystemLocation",
    "lineNumber": 9,
    "testTargets": [
      "FileSystemLocation"
    ]
  },
  {
    "__docId__": 668,
    "kind": "testFile",
    "name": "spec/io/ModuleLoader.spec.ts",
    "content": "import 'mocha';\nimport path = require('path');\nimport { ModuleLoader, Version } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe('ModuleLoader', () => {\n\n    it('returns the major version number of a given package', () => {\n        const loader = new ModuleLoader(__dirname);\n\n        const expectedVersion = require('../../package.json').version;\n\n        expect(loader.versionOf('../../')).to.equal(new Version(expectedVersion));\n    });\n\n    it('returns the major version of the npm-resolved package if the local package could not be found', () => {\n        const loader = new ModuleLoader(path.join(__dirname, 'non-existent', 'local', 'directory'));\n\n        const expectedVersion = require('tiny-types/package.json').version;                             // tslint:disable-line:no-submodule-imports\n\n        expect(loader.versionOf('tiny-types')).to.equal(new Version(expectedVersion));\n    });\n\n    it('complains if neither a local version or the npm-resolved version could not be found', () => {\n        const loader = new ModuleLoader(__dirname);\n        expect(() => loader.versionOf('non-existent-module')).to.throw(Error, `Cannot find module 'non-existent-module/package'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/ModuleLoader.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 669,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "spec/io/ModuleLoader.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe32",
    "access": null,
    "description": "ModuleLoader",
    "lineNumber": 6
  },
  {
    "__docId__": 670,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe32.it33",
    "access": null,
    "description": "returns the major version number of a given package",
    "lineNumber": 8
  },
  {
    "__docId__": 671,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe32.it34",
    "access": null,
    "description": "returns the major version of the npm-resolved package if the local package could not be found",
    "lineNumber": 16
  },
  {
    "__docId__": 672,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe32.it35",
    "access": null,
    "description": "complains if neither a local version or the npm-resolved version could not be found",
    "lineNumber": 24
  },
  {
    "__docId__": 673,
    "kind": "testFile",
    "name": "spec/io/Path.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { Path } from '../../src/io';\nimport { expect } from '../expect';\n\n/** @test {Path} */\ndescribe ('Path', () => {\n\n    describe('when used across different operating systems', () => {\n        const linuxPath = new Path(`features/search/full-text.feature`),\n            windowsPath = new Path(`features\\\\search\\\\full-text.feature`);\n\n        it('produces the same result no matter what path it\\'s instantiated with', () => {\n            expect(linuxPath).to.equal(windowsPath);\n        });\n\n        it('exposes the normalised path string', () => {\n            expect(linuxPath.value).to.equal(windowsPath.value);\n            expect(linuxPath.value).to.equal(`features/search/full-text.feature`);\n        });\n\n        it('splits the same', () => {\n            expect(linuxPath.split()).to.deep.equal([\n                'features',\n                'search',\n                'full-text.feature',\n            ]);\n            expect(linuxPath.split()).to.deep.equal(windowsPath.split());\n        });\n    });\n\n    it('can be serialised and deserialised', () => {\n        const path = new Path('/home/jan/file.json');\n\n        expect(Path.fromJSON(path.toJSON() as string)).to.equal(path);\n    });\n\n    it('can join path components into a single path', () => {\n        const\n            p1 = new Path('/home/jan'),\n            p2 = new Path('file.json');\n\n        expect(p1.join(p2)).to.equal(new Path('/home/jan/file.json'));\n    });\n\n    it('can split an absolute path', () => {\n        const\n            p = new Path('/home/jan/directory/file.json');\n\n        expect(p.split()).to.deep.equal([ 'home', 'jan', 'directory', 'file.json' ]);\n    });\n\n    it('can split a relative path', () => {\n        const p = new Path('directory/file.json');\n\n        expect(p.split()).to.deep.equal([ 'directory', 'file.json' ]);\n    });\n\n    it('can resolve two paths', () => {\n        const\n            p1 = new Path('/home/jan/documents'),\n            p2 = new Path('../projects');\n\n        expect(p1.resolve(p2)).to.equal(new Path('/home/jan/projects'));\n    });\n\n    it('knows the root directory', () => {\n        expect(new Path('/home/jan/documents').root()).to.equal(new Path('/'));\n    });\n\n    it(`knows if it's absolute or relative`, () => {\n        expect(new Path('/home/jan/documents').isAbsolute()).to.equal(true);\n        expect(new Path('documents').isAbsolute()).to.equal(false);\n    });\n\n    given(\n        { description: 'file in a sub-directory', path: new Path('/home/jan/file.json'), expected: new Path('/home/jan') },\n        { description: 'sub-directory',           path: new Path('/home/jan'),           expected: new Path('/home') },\n        { description: 'root',                    path: new Path('/'),                   expected: new Path('/') },\n    ).\n    it('can tell the parent directory', ({ path, expected }) => {\n        expect(path.directory()).to.equal(expected);\n    });\n\n    given(\n        { description: 'file in a sub-directory', path: new Path('/home/jan/file.json'), expected: 'file.json' },\n        { description: 'sub-directory',           path: new Path('/home/jan'),           expected: 'jan' },\n        { description: 'root',                    path: new Path('/'),                   expected: '' },\n    ).\n    it('can tell the name of the directory in which the file lives', ({ path, expected }) => {\n        expect(path.basename()).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/Path.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 674,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "spec/io/Path.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36",
    "access": null,
    "description": "Path",
    "lineNumber": 8,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 675,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.describe37",
    "access": null,
    "description": "when used across different operating systems",
    "lineNumber": 10
  },
  {
    "__docId__": 676,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/io/Path.spec.ts~describe36.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.describe37.it38",
    "access": null,
    "description": "produces the same result no matter what path it's instantiated with",
    "lineNumber": 14
  },
  {
    "__docId__": 677,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "spec/io/Path.spec.ts~describe36.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.describe37.it39",
    "access": null,
    "description": "exposes the normalised path string",
    "lineNumber": 18
  },
  {
    "__docId__": 678,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/io/Path.spec.ts~describe36.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.describe37.it40",
    "access": null,
    "description": "splits the same",
    "lineNumber": 23
  },
  {
    "__docId__": 679,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it41",
    "access": null,
    "description": "can be serialised and deserialised",
    "lineNumber": 33
  },
  {
    "__docId__": 680,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it42",
    "access": null,
    "description": "can join path components into a single path",
    "lineNumber": 39
  },
  {
    "__docId__": 681,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it43",
    "access": null,
    "description": "can split an absolute path",
    "lineNumber": 47
  },
  {
    "__docId__": 682,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it44",
    "access": null,
    "description": "can split a relative path",
    "lineNumber": 54
  },
  {
    "__docId__": 683,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it45",
    "access": null,
    "description": "can resolve two paths",
    "lineNumber": 60
  },
  {
    "__docId__": 684,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it46",
    "access": null,
    "description": "knows the root directory",
    "lineNumber": 68
  },
  {
    "__docId__": 685,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/io/Path.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe36.it47",
    "access": null,
    "lineNumber": 72
  },
  {
    "__docId__": 686,
    "kind": "testFile",
    "name": "spec/io/Version.spec.ts",
    "content": "import { Version } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe('Version', () => {\n\n    it('represents a comparable version number', () => {\n        expect(new Version('1.2.3').isAtLeast(new Version('1.0.0'))).to.equal(true);\n    });\n\n    it('grants access to the major version number', () => {\n        expect(new Version('1.2.3').major()).to.equal(1);\n    });\n\n    it('provides a sensible description', () => {\n        expect(new Version('1.2.3').toString()).to.equal('1.2.3');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/Version.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 687,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "spec/io/Version.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe48",
    "access": null,
    "description": "Version",
    "lineNumber": 4
  },
  {
    "__docId__": 688,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/io/Version.spec.ts~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe48.it49",
    "access": null,
    "description": "represents a comparable version number",
    "lineNumber": 6
  },
  {
    "__docId__": 689,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/io/Version.spec.ts~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe48.it50",
    "access": null,
    "description": "grants access to the major version number",
    "lineNumber": 10
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/io/Version.spec.ts~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe48.it51",
    "access": null,
    "description": "provides a sensible description",
    "lineNumber": 14
  },
  {
    "__docId__": 691,
    "kind": "testFile",
    "name": "spec/io/formatted.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport * as util from 'util';\n\nimport { formatted } from '../../src/io';\nimport { Question } from '../../src/screenplay';\nimport { expect } from '../expect';\n\n/** @test {formatted} */\ndescribe ('`formatted` tag function', () => {\n\n    const\n        p  = value => Promise.resolve(value),\n        q  = value => Question.about(`the meaning of life`, actor => value),\n        i  = value => ({ [util.inspect.custom]: () => value }),\n        ts = value => ({ toString: () => value });\n\n    class SomeAttribute {}\n\n    given(\n        { description: 'no parameters',             actual: formatted `Hello World!`,                           expected: 'Hello World!'                              },\n        { description: 'an undefined parameter',    actual: formatted `param: ${ undefined }`,                  expected: 'param: undefined'                          },\n        { description: 'a number parameter',        actual: formatted `Answer: ${ 42 }`,                        expected: 'Answer: 42'                                },\n        { description: 'a string parameter',        actual: formatted `Hello ${ 'World' }!`,                    expected: \"Hello 'World'!\"                            },\n        { description: 'an object parameter',       actual: formatted `${ { twitter: '@JanMolak'} }`,           expected: \"{ twitter: '@JanMolak' }\"                  },\n        { description: 'an empty array',            actual: formatted `${ [] }`,                                expected: '[ ]'                                       },\n        { description: 'an array parameter',        actual: formatted `${ [1, 2, '3'] }`,                       expected: \"[ 1, 2, '3' ]\"                             },\n        { description: 'an array of params',        actual: formatted `${ [ Promise.resolve(1), q('2') ] }`,    expected: '[ a Promise, the meaning of life ]'        },\n        { description: 'an object array parameter', actual: formatted `${ [{ name: 'Jan'}] }`,                  expected: \"[ { name: 'Jan' } ]\"                       },\n        { description: 'a Date parameter',          actual: formatted `${ new Date(818035920000) }`,            expected: '1995-12-04T00:12:00.000Z'                  },\n        { description: 'a promised parameter',      actual: formatted `${ p('something') }`,                    expected: 'a Promise'                                 },\n        { description: 'a question',                actual: formatted `${ q('value') }`,                        expected: 'the meaning of life'                       },\n        { description: 'an inspectable object',     actual: formatted `${ i('result') }`,                       expected: 'result'                                    },\n        { description: 'an \"toStringable\" object',  actual: formatted `${ ts('result') }`,                      expected: 'result'                                    },\n        { description: 'a function parameter',      actual: formatted `${ SomeAttribute }`,                     expected: 'SomeAttribute property'                    },\n    ).\n    it('produces a human-readable description when given a template with', ({ actual, expected }) => {\n        expect(actual).to.equal(expected);\n    });\n\n    /** @test {formatted} */\n    it('produces a human-readable description when given a template with multiple parameters', () => {\n        expect(formatted `Hello, ${ 'World' }! I've got ${ p('result') } for you!`)\n            .to.equal(\"Hello, 'World'! I've got a Promise for you!\");\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/formatted.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "spec/io/formatted.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/formatted.spec.ts~describe52",
    "access": null,
    "description": "`formatted` tag function",
    "lineNumber": 10,
    "testTargets": [
      "formatted"
    ]
  },
  {
    "__docId__": 693,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/io/formatted.spec.ts~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/formatted.spec.ts~describe52.it53",
    "access": null,
    "description": "produces a human-readable description when given a template with multiple parameters",
    "lineNumber": 49,
    "testTargets": [
      "formatted"
    ]
  },
  {
    "__docId__": 694,
    "kind": "testFile",
    "name": "spec/io/trimmed.spec.ts",
    "content": "import 'mocha';\n\nimport { trimmed } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe ('`trimmed` tag function', () => {\n\n    /** @test {trimmed} */\n    it('trims the leading and trailing whitespace', () => {\n        expect(trimmed `  Hello world!  `).to.equal('Hello world!');\n    });\n\n    /** @test {trimmed} */\n    it('leaves the space between the lines if required', () => {\n        expect(trimmed `\n            | --------------------------------------------------------------------------------\n            | features/payments/checkout.feature\n            |\n            | Online Checkout: Paying with a default card\n            |\n            | ✓ Execution successful (10ms)\n        `).to.equal([\n            '--------------------------------------------------------------------------------',\n            'features/payments/checkout.feature',\n            '',\n            'Online Checkout: Paying with a default card',\n            '',\n            '✓ Execution successful (10ms)',\n            '',\n        ].join('\\n'));\n    });\n\n    /** @test {trimmed} */\n    it('trims padded multi-line string', () => {\n        expect(trimmed `\n            | const SomeInteraction = () =>\n            |     Interaction.where(\\`${ '#actor interacts with the system' }\\`, (actor: Actor) => {\n            |         // use actor's abilities to interact with the system under test\n            |     });\n        `).to.equal([\n            `const SomeInteraction = () =>`,\n            `    Interaction.where(\\`#actor interacts with the system\\`, (actor: Actor) => {`,\n            `        // use actor's abilities to interact with the system under test`,\n            `    });`,\n            ``,\n        ].join('\\n'));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/io/trimmed.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "spec/io/trimmed.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe54",
    "access": null,
    "description": "`trimmed` tag function",
    "lineNumber": 6
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/io/trimmed.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe54.it55",
    "access": null,
    "description": "trims the leading and trailing whitespace",
    "lineNumber": 9,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 697,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/io/trimmed.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe54.it56",
    "access": null,
    "description": "leaves the space between the lines if required",
    "lineNumber": 14,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/io/trimmed.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe54.it57",
    "access": null,
    "description": "trims padded multi-line string",
    "lineNumber": 34,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 699,
    "kind": "testFile",
    "name": "spec/model/Artifact.spec.ts",
    "content": "import { Artifact, JSONData, Photo } from '../../src/model';\nimport { expect } from '../expect';\n\ndescribe ('Artifact', () => {\n    describe('Photo', () => {\n\n        const photo = Photo.fromBase64('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEW01FWbeM52AAAACklEQVR4nGNiAAAABgADNjd8qAAAAABJRU5ErkJggg==');\n\n        /** @test {Photo#toJSON} */\n        it('can be serialised', () => {\n            const serialised = photo.toJSON();\n\n            expect(serialised.type).to.equal('Photo');\n            expect(serialised.base64EncodedValue).to.equal(photo.base64EncodedValue);\n        });\n\n        /**\n         * @test {Photo#toJSON}\n         * @test {Artifact.fromJSON}\n         */\n        it('can be de-serialised', () => {\n            const\n                serialised = photo.toJSON(),\n                deserialised = Artifact.fromJSON(serialised);\n\n            expect(deserialised).to.equal(photo);\n        });\n\n        /**\n         * @test {Photo#map}\n         * @test {Photo#base64EncodedValue}\n         */\n        it('allows for its value to be extracted as a Buffer', () => {\n            photo.map(value => expect(value).to.be.instanceOf(Buffer));\n            photo.map(value => expect(value.toString('base64')).to.equal(photo.base64EncodedValue));\n        });\n\n        /**\n         * @test {Photo.fromBuffer}\n         */\n        it('can be instantiated from a Buffer', () => {\n            expect(Photo.fromBuffer(Buffer.from(photo.base64EncodedValue, 'base64'))).to.equal(photo);\n        });\n    });\n\n    describe('JSONData', () => {\n\n        const json = JSONData.fromJSON({\n            key: ['v', 'a', 'l', 'u', 'e'],\n        });\n\n        /** @test {JSONData#toJSON} */\n        it('can be serialised', () => {\n            const serialised = json.toJSON();\n\n            expect(serialised.type).to.equal('JSONData');\n            expect(serialised.base64EncodedValue).to.equal(json.base64EncodedValue);\n        });\n\n        /**\n         * @test {JSONData#toJSON}\n         * @test {Artifact.fromJSON}\n         */\n        it('can be de-serialised', () => {\n            const\n                serialised = json.toJSON(),\n                deserialised = Artifact.fromJSON(serialised);\n\n            expect(deserialised).to.equal(json);\n        });\n\n        /**\n         * @test {JSONData#map}\n         * @test {JSONData#base64EncodedValue}\n         */\n        it('allows for its value to be extracted as a JSON value', () => {\n            json.map(value => expect(value).to.be.instanceOf(Object));\n            json.map(value => expect(value).to.deep.equal({\n                key: ['v', 'a', 'l', 'u', 'e'],\n            }));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/Artifact.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 700,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "spec/model/Artifact.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58",
    "access": null,
    "description": "Artifact",
    "lineNumber": 4
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "spec/model/Artifact.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe59",
    "access": null,
    "description": "Photo",
    "lineNumber": 5
  },
  {
    "__docId__": 702,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe59.it60",
    "access": null,
    "description": "can be serialised",
    "lineNumber": 10,
    "testTargets": [
      "Photo#toJSON"
    ]
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe59.it61",
    "access": null,
    "description": "can be de-serialised",
    "lineNumber": 21,
    "testTargets": [
      "Photo#toJSON",
      "Artifact.fromJSON"
    ]
  },
  {
    "__docId__": 704,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe59.it62",
    "access": null,
    "description": "allows for its value to be extracted as a Buffer",
    "lineNumber": 33,
    "testTargets": [
      "Photo#map",
      "Photo#base64EncodedValue"
    ]
  },
  {
    "__docId__": 705,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe59.it63",
    "access": null,
    "description": "can be instantiated from a Buffer",
    "lineNumber": 41,
    "testTargets": [
      "Photo.fromBuffer"
    ]
  },
  {
    "__docId__": 706,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "spec/model/Artifact.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe64",
    "access": null,
    "description": "JSONData",
    "lineNumber": 46
  },
  {
    "__docId__": 707,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe64.it65",
    "access": null,
    "description": "can be serialised",
    "lineNumber": 53,
    "testTargets": [
      "JSONData#toJSON"
    ]
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe64.it66",
    "access": null,
    "description": "can be de-serialised",
    "lineNumber": 64,
    "testTargets": [
      "JSONData#toJSON",
      "Artifact.fromJSON"
    ]
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/model/Artifact.spec.ts~describe58.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe58.describe64.it67",
    "access": null,
    "description": "allows for its value to be extracted as a JSON value",
    "lineNumber": 76,
    "testTargets": [
      "JSONData#map",
      "JSONData#base64EncodedValue"
    ]
  },
  {
    "__docId__": 710,
    "kind": "testFile",
    "name": "spec/model/Duration.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { Duration } from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Duration} */\ndescribe('Duration', () => {\n\n    describe('represents a duration of time that', () => {\n\n        given<Duration, number>(\n            [ Duration.ofMilliseconds(1),     1                               ],\n            [ Duration.ofSeconds(1),          1 * 1000                        ],\n            [ Duration.ofMinutes(1),          60 * 1 * 1000                   ],\n            [ Duration.ofHours(1),            60 * 60 * 1 * 1000              ],\n            [ Duration.ofDays(1),             24 * 60 * 60 * 1 * 1000         ],\n            [ Duration.ofYears(1),            365 * 24 * 60 * 60 * 1 * 1000   ],\n        ).\n        it('can be easily converted to milliseconds', (duration: Duration, expectedMilliseconds: number) => {\n            expect(duration.inMilliseconds()).to.equal(expectedMilliseconds);\n        });\n\n        given<Duration, string>(\n            [ Duration.ofMilliseconds(100),       '100ms'     ],\n            [ Duration.ofMilliseconds(2200),      '2s 200ms'  ],\n            [ Duration.ofMilliseconds(132000),    '2m 12s'    ],\n            [ Duration.ofMilliseconds(7921000),   '2h 12m 1s' ],\n            [ Duration.ofMilliseconds(190080000), '2d 4h 48m' ],\n        ).\n        it('can be presented in a human-friendly format', (duration: Duration, expected: string) => {\n            expect(duration.toString()).to.equal(expected);\n        });\n    });\n\n    describe('when performing computations', () => {\n        const\n            oneMinute   = Duration.ofMinutes(1),\n            tenSeconds  = Duration.ofSeconds(10);\n\n        it('allows for durations to be added', () => {\n\n            expect(oneMinute.plus(tenSeconds)).to.equal(Duration.ofSeconds(70));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/Duration.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "spec/model/Duration.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe68",
    "access": null,
    "description": "Duration",
    "lineNumber": 8,
    "testTargets": [
      "Duration"
    ]
  },
  {
    "__docId__": 712,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "spec/model/Duration.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe68.describe69",
    "access": null,
    "description": "represents a duration of time that",
    "lineNumber": 10
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "spec/model/Duration.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe68.describe70",
    "access": null,
    "description": "when performing computations",
    "lineNumber": 36
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/model/Duration.spec.ts~describe68.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe68.describe70.it71",
    "access": null,
    "description": "allows for durations to be added",
    "lineNumber": 41
  },
  {
    "__docId__": 715,
    "kind": "testFile",
    "name": "spec/model/ScenarioParameters.spec.ts",
    "content": "import 'mocha';\n\nimport { Description, Name, ScenarioParameters } from '../../src/model';\nimport { expect } from '../expect';\n\ndescribe('ScenarioParameters', () => {\n\n    const\n        name = new Name('set of examples'),\n        desciption = new Description('description of the examples');\n\n    /** @test {ScenarioParameters} */\n    it('can be instantiated using a plain-old JavaScript object', () => {\n\n        const parameters = { Dev: 'jan-molak' };\n        const scenarioParameters = new ScenarioParameters(name, desciption, parameters);\n\n        expect(scenarioParameters.values).to.deep.equal(parameters);\n    });\n\n    /** @test {ScenarioParameters} */\n    it('can be serialised to JSON', () => {\n        const parameters = { Dev: 'jan-molak' };\n        const scenarioParameters = new ScenarioParameters(name, desciption, parameters);\n\n        expect(scenarioParameters.toJSON()).to.deep.equal({\n            name: name.toJSON(),\n            description: desciption.toJSON(),\n            values: parameters,\n        });\n    });\n\n    /** @test {ScenarioParameters} */\n    it('can be deserialised from JSON', () => {\n        const parameters = { Dev: 'jan-molak' };\n\n        expect(new ScenarioParameters(name, desciption, parameters))\n            .to.equal(ScenarioParameters.fromJSON({\n                name: name.toJSON(),\n                description: desciption.toJSON(),\n                values: parameters,\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/ScenarioParameters.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "spec/model/ScenarioParameters.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe72",
    "access": null,
    "description": "ScenarioParameters",
    "lineNumber": 6
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe72.it73",
    "access": null,
    "description": "can be instantiated using a plain-old JavaScript object",
    "lineNumber": 13,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 718,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe72.it74",
    "access": null,
    "description": "can be serialised to JSON",
    "lineNumber": 22,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe72.it75",
    "access": null,
    "description": "can be deserialised from JSON",
    "lineNumber": 34,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 720,
    "kind": "testFile",
    "name": "spec/model/Tag.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { ArbitraryTag, BrowserTag, CapabilityTag, ContextTag, FeatureTag, IssueTag, ManualTag, Tag, Tags, ThemeTag } from '../../src/model';\nimport { expect } from '../expect';\n\n/**\n * @test {Tag}\n * @test {ArbitraryTag}\n * @test {BrowserTag}\n * @test {CapabilityTag}\n * @test {ContextTag}\n * @test {FeatureTag}\n */\ndescribe('Tag', () => {\n\n    given<string, Tag[]>(\n        [ '@manual',                    [ new ManualTag()                                  ] ],\n        [ '@issue:ABC-123',             [ new IssueTag('ABC-123')                          ] ],\n        [ '@issues:ABC-123',            [ new IssueTag('ABC-123')                          ] ],\n        [ '@issue:ABC-123,DEF-456',     [ new IssueTag('ABC-123'), new IssueTag('DEF-456') ] ],\n        [ '@issues:ABC-123,DEF-456',    [ new IssueTag('ABC-123'), new IssueTag('DEF-456') ] ],\n        [ '@regression',                [ new ArbitraryTag('regression')                   ] ],\n    ).\n    it('can be constructed from a string', (stringTag: string, expectedResults: Tag[]) => {\n        const results = Tags.from(stringTag);\n\n        expect(results).to.have.lengthOf(expectedResults.length);\n\n        results.forEach((result: Tag, i: number) => {\n            expect(result).to.equal(expectedResults[i]);\n        });\n    });\n\n    given([\n        new ArbitraryTag('wip'),\n        new BrowserTag('chrome'),\n        new CapabilityTag('checkout'),\n        new ContextTag('mac osx'),\n        new FeatureTag('testability'),\n        new IssueTag('abc-123'),\n        new ManualTag(),\n        new ThemeTag('sales'),\n    ]).\n    it('can be deserialised from a JSON object', (tag: Tag) => {\n        expect(Tag.fromJSON(tag.toJSON())).to.equal(tag);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/Tag.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "spec/model/Tag.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Tag.spec.ts~describe76",
    "access": null,
    "description": "Tag",
    "lineNumber": 15,
    "testTargets": [
      "Tag",
      "ArbitraryTag",
      "BrowserTag",
      "CapabilityTag",
      "ContextTag",
      "FeatureTag"
    ]
  },
  {
    "__docId__": 722,
    "kind": "testFile",
    "name": "spec/model/Timestamp.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { Duration, Timestamp } from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Timestamp} */\ndescribe('Timestamp', () => {\n\n    const\n        current_time         = '01 May 2018 10:00 UTC-2',\n        current_time_ISO8601 = '2018-05-01T12:00:00.000Z',\n        now                  = new Timestamp(new Date(current_time));\n\n    describe('instantiation', () => {\n\n        /** @test {Timestamp} */\n        it('can be instantiated with an arbitrary Date', () => {\n            expect(() => new Timestamp(new Date())).to.not.throw;            // tslint:disable-line:no-unused-expression\n        });\n\n        /** @test {Timestamp} */\n        it('defaults to current time if no argument is provided', () => {\n            expect(() => new Timestamp()).to.not.throw;                      // tslint:disable-line:no-unused-expression\n        });\n\n        given<any>(\n            {},\n            '01 May 2018 10:00 UTC-2',\n            0,\n        ).\n        it('complains if given an incorrect value as a constructor argument', (value: any) => {\n            expect(() => new Timestamp()).to.not.throw('Timestamp should be an instance of Date');\n        });\n    });\n\n    describe('serialisation', () => {\n\n        /** @test {Timestamp} */\n        it('is serialised to an ISO-8601-compliant string', () => {\n            expect(now.toJSON()).to.equal(current_time_ISO8601);\n        });\n\n        /** @test {Timestamp} */\n        it('can be deserialised from an ISO-8601-compliant string', () => {\n            expect(Timestamp.fromJSON(current_time_ISO8601).equals(now)).to.equal(true);\n        });\n\n        given<any>(\n            0,\n            '',\n            null,\n            undefined,\n            {},\n            [],\n        ).\n        it('complains if given an incorrect value to deserialise', (value: any) => {\n            expect(() => Timestamp.fromJSON(value)).to.throw('Timestamp should be an ISO-8601-compliant date');\n        });\n    });\n\n    describe('arithmetic', () => {\n\n        /** @test {Timestamp} */\n        it('allows for calculating a difference between two timestamps', () => {\n\n            const a_bit_later = Timestamp.fromJSON('2018-05-01T12:00:02.752Z');\n\n            expect(now.diff(a_bit_later).equals(Duration.ofMilliseconds(2752))).to.equal(true);\n            expect(a_bit_later.diff(now).equals(Duration.ofMilliseconds(2752))).to.equal(true);\n        });\n\n        /** @test {Timestamp} */\n        it('allows for computing another timestamp, relative to the original one', () => {\n\n            const\n                two_minutes = Duration.ofSeconds(120),\n                four_minutes = Duration.ofSeconds(240);\n\n            expect(now.plus(two_minutes)).to.equal(now.plus(four_minutes).less(two_minutes));\n        });\n    });\n\n    describe('conversion', () => {\n\n        /** @test {Timestamp} */\n        it('can be converted to a numeric unix timestamp', () => {\n            expect(now.toMillisecondTimestamp()).to.equal(Math.floor(now.value.getTime()));\n        });\n\n        /** @test {Timestamp} */\n        it('can be created from a numeric unix timestamp', () => {\n            expect(Timestamp.fromMillisecondTimestamp(Math.floor(now.value.getTime())).toMillisecondTimestamp())\n                .to.equal(now.toMillisecondTimestamp());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/Timestamp.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "spec/model/Timestamp.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77",
    "access": null,
    "description": "Timestamp",
    "lineNumber": 8,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 724,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "spec/model/Timestamp.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe78",
    "access": null,
    "description": "instantiation",
    "lineNumber": 15
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe78.it79",
    "access": null,
    "description": "can be instantiated with an arbitrary Date",
    "lineNumber": 18,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe78.it80",
    "access": null,
    "description": "defaults to current time if no argument is provided",
    "lineNumber": 23,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "spec/model/Timestamp.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe81",
    "access": null,
    "description": "serialisation",
    "lineNumber": 37
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe81.it82",
    "access": null,
    "description": "is serialised to an ISO-8601-compliant string",
    "lineNumber": 40,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe81.it83",
    "access": null,
    "description": "can be deserialised from an ISO-8601-compliant string",
    "lineNumber": 45,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/model/Timestamp.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe84",
    "access": null,
    "description": "arithmetic",
    "lineNumber": 62
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe84.it85",
    "access": null,
    "description": "allows for calculating a difference between two timestamps",
    "lineNumber": 65,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe84.it86",
    "access": null,
    "description": "allows for computing another timestamp, relative to the original one",
    "lineNumber": 74,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "spec/model/Timestamp.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe87",
    "access": null,
    "description": "conversion",
    "lineNumber": 84
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe87.it88",
    "access": null,
    "description": "can be converted to a numeric unix timestamp",
    "lineNumber": 87,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "spec/model/Timestamp.spec.ts~describe77.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe77.describe87.it89",
    "access": null,
    "description": "can be created from a numeric unix timestamp",
    "lineNumber": 92,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 736,
    "kind": "testFile",
    "name": "spec/model/outcomes.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { ImplementationPendingError, TestCompromisedError } from '../../src/errors';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Outcome,\n    ProblemIndication,\n} from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Outcome} */\ndescribe('Outcome', () => {\n\n    /**\n     * @test {ExecutionSkipped}\n     * @test {ExecutionIgnored}\n     * @test {ImplementationPending}\n     * @test {ExecutionSuccessful}\n     */\n    describe('non-error outcome', () => {\n\n        given([\n            new ExecutionSkipped(),\n            new ExecutionIgnored(),\n            new ExecutionSuccessful(),\n        ]).\n        it('can be serialised and deserialised', (outcome: Outcome) => {\n            const deserialised: any = Outcome.fromJSON(outcome.toJSON());\n\n            expect(deserialised).to.be.instanceOf(outcome.constructor);\n        });\n    });\n\n    /**\n     * @test {ExecutionCompromised}\n     * @test {ExecutionFailedWithError}\n     * @test {ExecutionFailedWithAssertionError}\n     */\n    describe('outcome indicating an error', () => {\n\n        given([\n            { outcome: new ExecutionCompromised(new TestCompromisedError('Database is down')), description: ExecutionCompromised.name },\n            { outcome: new ExecutionFailedWithError(new Error(`Something's wrong`)), description: ExecutionFailedWithError.name },\n            { outcome: new ExecutionFailedWithAssertionError(assertionError()), description: ExecutionFailedWithAssertionError.name },\n            { outcome: new ImplementationPending(new ImplementationPendingError('method missing')), description: ImplementationPending.name },\n        ]).\n        it('can be serialised and deserialised', ({ outcome }: { outcome: ProblemIndication }) => {\n            const deserialised: any = Outcome.fromJSON(outcome.toJSON());\n\n            expect(deserialised).to.be.instanceOf(outcome.constructor);\n\n            expect(deserialised.error.name).to.equal(outcome.error.constructor.name);\n            expect(deserialised.error.message).to.equal(outcome.error.message);\n            expect(deserialised.error.stack).to.equal(outcome.error.stack);\n        });\n    });\n\n    function assertionError() {\n        try {\n            expect(true).to.equal(false);\n        } catch (e) {\n            return e;\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/model/outcomes.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "spec/model/outcomes.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe90",
    "access": null,
    "description": "Outcome",
    "lineNumber": 19,
    "testTargets": [
      "Outcome"
    ]
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "spec/model/outcomes.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe90.describe91",
    "access": null,
    "description": "non-error outcome",
    "lineNumber": 27,
    "testTargets": [
      "ExecutionSkipped",
      "ExecutionIgnored",
      "ImplementationPending",
      "ExecutionSuccessful"
    ]
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "spec/model/outcomes.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe90.describe92",
    "access": null,
    "description": "outcome indicating an error",
    "lineNumber": 46,
    "testTargets": [
      "ExecutionCompromised",
      "ExecutionFailedWithError",
      "ExecutionFailedWithAssertionError"
    ]
  },
  {
    "__docId__": 740,
    "kind": "testFile",
    "name": "spec/screenplay/Interaction.spec.ts",
    "content": "import 'mocha';\nimport * as sinon from 'sinon';\n\nimport { ActivityRelatedArtifactGenerated, ArtifactGenerated } from '../../src/events';\nimport { JSONData, Name } from '../../src/model';\nimport { Actor, Interaction } from '../../src/screenplay';\nimport { Stage, StageManager } from '../../src/stage';\nimport { Extras } from '../../src/stage/Extras';\nimport { expect } from '../expect';\n\ndescribe('Interaction', () => {\n\n    let stage: Stage,\n        Ivonne: Actor,\n        stageManager: sinon.SinonStubbedInstance<StageManager>;\n\n    beforeEach(() => {\n        stageManager = sinon.createStubInstance(StageManager);\n\n        stage = new Stage(\n            new Extras(),\n            stageManager as unknown as StageManager,\n        );\n        Ivonne = new Actor('Ivonne', stage);\n    });\n\n    describe('when defining an interaction', () => {\n\n        /** @test {Interaction} */\n        it('provides a convenient factory method for synchronous interactions', () => {\n            const spy = sinon.spy();\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n                spy(actor);\n            });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            ))\n            .to.be.fulfilled\n            .then(() => {\n                expect(spy).to.have.been.calledWith(Ivonne);\n            });\n        });\n\n        /** @test {Interaction} */\n        it('provides a convenient factory method for asynchronous interactions', () => {\n            const spy = sinon.spy();\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n                spy(actor);\n\n                return Promise.resolve();\n            });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            ))\n            .to.be.fulfilled\n            .then(() => {\n                expect(spy).to.have.been.calledWith(Ivonne);\n            });\n        });\n    });\n\n    describe('when handling errors', () => {\n        const error = new Error(`We're sorry, something happened`);\n\n        it('rejects the promise when the interaction function rejects a promise', () => {\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => Promise.reject(error));\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            )).to.be.rejectedWith(error);\n        });\n\n        it('rejects the promise when the interaction function throws an error', () => {\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => { throw error; });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            )).to.be.rejectedWith(error);\n        });\n    });\n\n    /** @test {Interaction} */\n    it('can optionally emit an artifact to be attached to the report or stored', () => {\n        const\n            expectedArtifact = JSONData.fromJSON({ token: '123' }),\n            expectedArtifactName = new Name('Session Token');\n\n        const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n            actor.collect(expectedArtifact, expectedArtifactName);\n        });\n\n        return expect(Ivonne.attemptsTo(\n            InteractWithTheSystem(),\n        ))\n        .to.be.fulfilled\n        .then(() => {\n            const event = stageManager.notifyOf.args[1][0] as ArtifactGenerated;\n\n            expect(event.name).to.equal(expectedArtifactName);\n            expect(event.artifact).to.equal(expectedArtifact);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/Interaction.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "spec/screenplay/Interaction.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93",
    "access": null,
    "description": "Interaction",
    "lineNumber": 11
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe94",
    "access": null,
    "description": "when defining an interaction",
    "lineNumber": 27
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe94.it95",
    "access": null,
    "description": "provides a convenient factory method for synchronous interactions",
    "lineNumber": 30,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe94.it96",
    "access": null,
    "description": "provides a convenient factory method for asynchronous interactions",
    "lineNumber": 47,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe97",
    "access": null,
    "description": "when handling errors",
    "lineNumber": 66
  },
  {
    "__docId__": 746,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe97.it98",
    "access": null,
    "description": "rejects the promise when the interaction function rejects a promise",
    "lineNumber": 69
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.describe97.it99",
    "access": null,
    "description": "rejects the promise when the interaction function throws an error",
    "lineNumber": 77
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe93.it100",
    "access": null,
    "description": "can optionally emit an artifact to be attached to the report or stored",
    "lineNumber": 88,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 749,
    "kind": "testFile",
    "name": "spec/screenplay/Task.spec.ts",
    "content": "import * as sinon from 'sinon';\nimport { ImplementationPendingError } from '../../src/errors';\nimport { ActivityDetails, Name } from '../../src/model';\nimport { Activity, Actor, Interaction, Task } from '../../src/screenplay';\nimport { Stage } from '../../src/stage';\nimport { expect } from '../expect';\n\ndescribe('Task', () => {\n\n    let stage: sinon.SinonStubbedInstance<Stage>;\n\n    beforeEach(() => {\n        stage = sinon.createStubInstance(Stage);\n\n        // activityDetailsFor is a bit more involved than that, but this is a good approximation\n        stage.activityDetailsFor.callsFake((activity: Activity) => new ActivityDetails(new Name(activity.toString())));\n    });\n\n    const\n        Nock    = () => Interaction.where(`#actor places an arrow on the bow`, actor => void 0),\n        Draw    = () => Interaction.where(`#actor pulls back the bow string`, actor => void 0),\n        Loose   = () => Interaction.where(`#actor releases an arrow from the bow`, actor => void 0);\n\n    const ShootAnArrow = () => Task.where(`#actor shoots an arrow`,\n        Nock(),\n        Draw(),\n        Loose(),\n    );\n\n    /** @test {Task} */\n    it('provides a convenient factory method for defining tasks', () => {\n\n        const Lara = new Actor('Lara', stage as unknown as Stage);\n\n        return expect(Lara.attemptsTo(ShootAnArrow())).to.be.fulfilled;\n    });\n\n    /** @test {Task} */\n    it('provides a way to describe a collection of activities', () => {\n        expect(ShootAnArrow().toString()).to.equal(`#actor shoots an arrow`);\n    });\n\n    /** @test {Task} */\n    it('generates a pending task if no activities are provided', () => {\n\n        const Lara = new Actor('Lara', stage as unknown as Stage);\n\n        const ClimbAMountain = () => Task.where(`#actor climbs a mountain`);\n\n        return expect(Lara.attemptsTo(ClimbAMountain()))\n            .to.be.rejectedWith(ImplementationPendingError, `A task where \"#actor climbs a mountain\" has not been implemented yet`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/Task.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "spec/screenplay/Task.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe101",
    "access": null,
    "description": "Task",
    "lineNumber": 8
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/screenplay/Task.spec.ts~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe101.it102",
    "access": null,
    "description": "provides a convenient factory method for defining tasks",
    "lineNumber": 31,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 752,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/screenplay/Task.spec.ts~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe101.it103",
    "access": null,
    "description": "provides a way to describe a collection of activities",
    "lineNumber": 39,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "spec/screenplay/Task.spec.ts~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe101.it104",
    "access": null,
    "description": "generates a pending task if no activities are provided",
    "lineNumber": 44,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 754,
    "kind": "testFile",
    "name": "spec/screenplay/actor.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\nimport { ConfigurationError } from '../../src/errors';\n\nimport { InteractionFinished, InteractionStarts } from '../../src/events';\nimport { ActivityDetails, ExecutionSuccessful, Name, Timestamp } from '../../src/model';\nimport { Ability, Activity, Actor, See } from '../../src/screenplay';\nimport { Stage } from '../../src/stage';\nimport { expect } from '../expect';\nimport {\n    AcousticGuitar,\n    Chords,\n    Guitar,\n    MusicSheets,\n    NumberOfGuitarStringsLeft,\n    PlayAChord,\n    PlayAGuitar,\n    PlayASong,\n} from './example-implementation';\n\nconst equals = (expected: number) => (actual: PromiseLike<number>) => expect(actual).to.equal(expected);\n\ndescribe('Actor', () => {\n\n    let\n        guitar: sinon.SinonStubbedInstance<Guitar>,\n        stage: sinon.SinonStubbedInstance<Stage>;\n\n    beforeEach(() => {\n        guitar = sinon.createStubInstance(AcousticGuitar);\n        stage = sinon.createStubInstance(Stage);\n\n        // activityDetailsFor is a bit more involved than that, but this is a good approximation\n        stage.activityDetailsFor.callsFake((activity: Activity) => new ActivityDetails(new Name(activity.toString())));\n    });\n\n    function actor(name: string) {\n        return new Actor(name, stage as unknown as Stage);\n    }\n\n    /** @test {Actor} */\n    it('can be identified by their name', () => {\n\n        expect(actor('Chris').name).to.equal('Chris');\n    });\n\n    /** @test {Actor} */\n    it('provides a developer-friendly toString', () => {\n        class DoCoolThings implements Ability {\n        }\n\n        expect(actor('Chris').toString()).to.equal('Actor(name=Chris, abilities=[])');\n\n        expect(actor('Chris').whoCan(new DoCoolThings()).toString()).to.equal('Actor(name=Chris, abilities=[DoCoolThings])');\n    });\n\n    /** @test {Actor} */\n    it('has Abilities allowing them to perform Activities and interact with a given Interface of the system under test', () =>\n\n        actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n            PlayAChord.of(Chords.AMajor),\n        ).\n        then(() => {\n            expect(guitar.play).to.have.been.calledWith(Chords.AMajor);\n        }));\n\n    /** @test {Actor} */\n    it('performs composite Tasks recursively to accomplish their Business Goals', () =>\n\n        actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n            PlayASong.from(MusicSheets.Wild_Thing),\n        ).\n        then(() => {\n            expect(guitar.play.getCall(0)).to.have.been.calledWith(Chords.AMajor);\n            expect(guitar.play.getCall(1)).to.have.been.calledWith(Chords.DMajor);\n            expect(guitar.play.getCall(2)).to.have.been.calledWith(Chords.EMajor);\n        }));\n\n    describe('asks Questions about the state of the system', () => {\n        /** @test {Actor} */\n        it('fulfills the promise should the question be answered as expected', () => {\n            guitar.availableStrings.returns(Promise.resolve(['E2', 'A2', 'D3', 'G3', 'B3', 'E4' ]));\n\n            return expect(actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayASong.from(MusicSheets.Wild_Thing),\n                See.if(NumberOfGuitarStringsLeft(), equals(6)),\n            )).to.be.fulfilled;\n        });\n\n        /** @test {Actor} */\n        it('rejects the promise should the answer differ from what was expected', () => {\n            const oneStringMissing = ['E2', 'A2', 'D3', 'G3', 'B3' ];\n            guitar.availableStrings.returns(Promise.resolve(oneStringMissing));\n\n            return expect(actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayASong.from(MusicSheets.Wild_Thing),\n                See.if(NumberOfGuitarStringsLeft(), equals(6)),\n            )).to.be.rejectedWith('expected 5 to equal 6');\n        });\n    });\n\n    /** @test {Actor} */\n    it('admits if it does not have the Ability necessary to accomplish a given Interaction', () =>\n\n        expect(actor('Ben').attemptsTo(\n            PlayAChord.of(Chords.AMajor),\n        )).to.be.eventually.rejectedWith(ConfigurationError, `Ben can't PlayAGuitar yet. Did you give them the ability to do so?`));\n\n    /** @test {Actor} */\n    it('can be instantiated without explicitly specifying the Stage', () => {\n\n        const anActor: Actor = Actor.named('Bob').whoCan(PlayAGuitar.suchAs(guitar));\n\n        expect(anActor.name).to.equal('Bob');\n    });\n\n    describe('DomainEvent handling', () => {\n\n        let Bob: Actor;\n        const now = new Timestamp(new Date('2018-06-10T22:57:07.112Z'));\n        const activityName = new Name('Bob plays the chord of A');\n\n        beforeEach(() => {\n            stage = sinon.createStubInstance(Stage);\n            stage.currentTime.returns(now);\n            stage.activityDetailsFor.returns(new ActivityDetails(activityName));\n\n            Bob = new Actor('Bob', stage as unknown as Stage);\n        });\n\n        describe('announces the events that activities it performs', () => {\n\n            /** @test {Actor} */\n            it('notifies when an activity begins and ends', () => Bob.whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayAChord.of(Chords.AMajor),\n            ).then(() => {\n                expect(stage.announce).to.have.callCount(2);\n\n                const\n                    firstEvent = stage.announce.getCall(0).args[0],\n                    secondEvent = stage.announce.getCall(1).args[0];\n\n                expect(firstEvent).to.be.instanceOf(InteractionStarts);\n                expect(firstEvent).to.have.property('value').property('name').equal(activityName);\n                expect(firstEvent).to.have.property('timestamp').equal(now);\n\n                expect(secondEvent).to.be.instanceOf(InteractionFinished);\n                expect(secondEvent).to.have.property('value').property('name').equal(activityName);\n                expect(secondEvent).to.have.property('outcome').equal(new ExecutionSuccessful());\n                expect(secondEvent).to.have.property('timestamp').equal(now);\n            }));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/actor.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "spec/screenplay/actor.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105",
    "access": null,
    "description": "Actor",
    "lineNumber": 24
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it106",
    "access": null,
    "description": "can be identified by their name",
    "lineNumber": 52,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it107",
    "access": null,
    "description": "provides a developer-friendly toString",
    "lineNumber": 58,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it108",
    "access": null,
    "description": "has Abilities allowing them to perform Activities and interact with a given Interface of the system under test",
    "lineNumber": 75,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it109",
    "access": null,
    "description": "performs composite Tasks recursively to accomplish their Business Goals",
    "lineNumber": 85,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 760,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe110",
    "access": null,
    "description": "asks Questions about the state of the system",
    "lineNumber": 96
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "spec/screenplay/actor.spec.ts~describe105.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe110.it111",
    "access": null,
    "description": "fulfills the promise should the question be answered as expected",
    "lineNumber": 98,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/screenplay/actor.spec.ts~describe105.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe110.it112",
    "access": null,
    "description": "rejects the promise should the answer differ from what was expected",
    "lineNumber": 108,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it113",
    "access": null,
    "description": "admits if it does not have the Ability necessary to accomplish a given Interaction",
    "lineNumber": 120,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.it114",
    "access": null,
    "description": "can be instantiated without explicitly specifying the Stage",
    "lineNumber": 127,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "spec/screenplay/actor.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe115",
    "access": null,
    "description": "DomainEvent handling",
    "lineNumber": 134
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "spec/screenplay/actor.spec.ts~describe105.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe115.describe116",
    "access": null,
    "description": "announces the events that activities it performs",
    "lineNumber": 148
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "spec/screenplay/actor.spec.ts~describe105.describe115.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe105.describe115.describe116.it117",
    "access": null,
    "description": "notifies when an activity begins and ends",
    "lineNumber": 151,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 768,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/See.spec.ts",
    "content": "import { AssertionError } from 'chai';\n\nimport sinon = require('sinon');\nimport { Actor, Question, See } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\n\ndescribe('Interactions', () => {\n\n    describe('See', () => {\n\n        const stage = sinon.createStubInstance(Stage);\n\n        describe('when used with async questions', () => {\n            const SomeAsyncResult = () => Question.about<Promise<string>>('some async result', actor => Promise.resolve('some value'));\n\n            /** @test {See} */\n            it('allows the actor to verify a condition', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeAsyncResult(), r => expect(r).to.equal('some value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.fulfilled;\n            });\n\n            /** @test {See} */\n            it('rejects the promise if the condition is not met', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeAsyncResult(), r => expect(r).to.equal('other value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.rejectedWith(AssertionError, `expected 'some value' to equal 'other value'`);\n            });\n        });\n\n        describe('when used with sync questions', () => {\n            const SomeSyncResult = () => Question.about<string>('some async result', actor => 'some value');\n\n            /** @test {See} */\n            it('allows the actor to verify a condition', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeSyncResult(), r => expect(r).to.equal('some value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.fulfilled;\n            });\n\n            /** @test {See} */\n            it('rejects the promise if the condition is not met', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeSyncResult(), r => expect(r).to.equal('other value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.rejectedWith(AssertionError, `expected 'some value' to equal 'other value'`);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/interactions/See.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 769,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "spec/screenplay/interactions/See.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118",
    "access": null,
    "description": "Interactions",
    "lineNumber": 8
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119",
    "access": null,
    "description": "See",
    "lineNumber": 10
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe120",
    "access": null,
    "description": "when used with async questions",
    "lineNumber": 14
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe120",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe120.it121",
    "access": null,
    "description": "allows the actor to verify a condition",
    "lineNumber": 18,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe120",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe120.it122",
    "access": null,
    "description": "rejects the promise if the condition is not met",
    "lineNumber": 27,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe123",
    "access": null,
    "description": "when used with sync questions",
    "lineNumber": 36
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe123",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe123.it124",
    "access": null,
    "description": "allows the actor to verify a condition",
    "lineNumber": 40,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe123",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe118.describe119.describe123.it125",
    "access": null,
    "description": "rejects the promise if the condition is not met",
    "lineNumber": 49,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 777,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/TakeNote.spec.ts",
    "content": "import * as sinon from 'sinon';\nimport { ActivityDetails, Name } from '../../../src/model';\nimport { Activity, Actor, Note, Question, TakeNote, TakeNotes } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { EnsureSame } from '../EnsureSame';\n\ndescribe('TakeNote', () => {\n\n    const\n        expectedHobby = 'DYI',\n        NameOfAHobby = () => Question.about(`the name of a hobby`, someActor => Promise.resolve(expectedHobby));\n\n    let stage: sinon.SinonStubbedInstance<Stage>,\n        Noah: Actor;\n\n    beforeEach(() => {\n        stage = sinon.createStubInstance(Stage);\n        // activityDetailsFor is a bit more involved than that, but this is a good approximation\n        stage.activityDetailsFor.callsFake((activity: Activity) => new ActivityDetails(new Name(activity.toString())));\n\n        Noah = new Actor('Noah', stage as unknown as Stage).whoCan(TakeNotes.usingAnEmptyNotepad());\n    });\n\n    /**\n     * @test {TakeNotes}\n     * @test {TakeNote}\n     */\n    it('enables the Actor to remember an answer to a Question', () => Noah.attemptsTo(\n        TakeNote.of(NameOfAHobby()),\n        EnsureSame(Note.of(NameOfAHobby()), expectedHobby),\n    ));\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/interactions/TakeNote.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "spec/screenplay/interactions/TakeNote.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeNote.spec.ts~describe126",
    "access": null,
    "description": "TakeNote",
    "lineNumber": 7
  },
  {
    "__docId__": 779,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "spec/screenplay/interactions/TakeNote.spec.ts~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeNote.spec.ts~describe126.it127",
    "access": null,
    "description": "enables the Actor to remember an answer to a Question",
    "lineNumber": 28,
    "testTargets": [
      "TakeNotes",
      "TakeNote"
    ]
  },
  {
    "__docId__": 780,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Note.spec.ts",
    "content": "import * as sinon from 'sinon';\nimport { LogicError } from '../../../src/errors';\nimport { ActivityDetails, Name } from '../../../src/model';\nimport { Ability, Activity, Actor, Log, Note, Question, TakeNotes } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\nimport { EnsureSame } from '../EnsureSame';\n\ndescribe('Note', () => {\n    const\n        expectedHobby = 'DYI',\n        NameOfAHobby = () => Question.about(`the name of a hobby`, someActor => Promise.resolve(expectedHobby));\n\n    let stage: sinon.SinonStubbedInstance<Stage>,\n        Noah: Actor;\n\n    beforeEach(() => {\n        stage = sinon.createStubInstance(Stage);\n        // activityDetailsFor is a bit more involved than that, but this is a good approximation\n        stage.activityDetailsFor.callsFake((activity: Activity) => new ActivityDetails(new Name(activity.toString())));\n\n        Noah = new Actor('Noah', stage as unknown as Stage)\n            .whoCan(TakeNotes.usingAnEmptyNotepad());\n    });\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('enables the actor to recall the answer to a given question', () =>\n        expect(actorWhoCan(new TakeNotes({ [NameOfAHobby().toString()]: 'DYI' })).attemptsTo(\n            EnsureSame(Note.of(NameOfAHobby()), 'DYI'),\n        )));\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('complains if no answer to a given question has ever been remembered', () =>\n        expect(actorWhoCan(TakeNotes.usingAnEmptyNotepad()).attemptsTo(\n            Log.the(Note.of(NameOfAHobby())),\n        )).to.be.rejectedWith(LogicError, 'The answer to \"the name of a hobby\" has never been recorded'));\n\n    function actorWhoCan(...abilities: Ability[]): Actor {\n        return new Actor('Noah', stage as unknown as Stage)\n            .whoCan(...abilities);\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Note.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "spec/screenplay/questions/Note.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe128",
    "access": null,
    "description": "Note",
    "lineNumber": 9
  },
  {
    "__docId__": 782,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe128.it129",
    "access": null,
    "description": "enables the actor to recall the answer to a given question",
    "lineNumber": 30,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe128",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe128.it130",
    "access": null,
    "description": "complains if no answer to a given question has ever been remembered",
    "lineNumber": 39,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 784,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Transform.spec.ts",
    "content": "import { given } from 'mocha-testdata';\nimport * as sinon from 'sinon';\n\nimport { Actor, Answerable, Question, Transform } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\n\n/** @test {TransformAnswer} */\ndescribe('TransformAnswer', () => {\n\n    const stage = sinon.createStubInstance(Stage);\n\n    const expectedAnswer = {\n        headers: { header: 'value' },\n        body: 'some content',\n    };\n\n    type EA = typeof expectedAnswer;\n\n    const actor = new Actor('Bumblebee', stage as unknown as Stage);\n\n    given([\n        expectedAnswer,\n        p(expectedAnswer),\n        q(expectedAnswer),\n        q(p(expectedAnswer)),\n    ]).\n    it('transforms an answer to Answerable<T> to another type', (answerable: Answerable<EA>) =>\n       expect(\n           Transform.the(answerable, complexObject => complexObject.headers.header).answeredBy(actor),\n       ).to.eventually.equal(expectedAnswer.headers.header));\n\n    it('transforms answers to Array<Answerable<T>> to another type', () =>\n        expect(\n            Transform.the(\n                [ q(p(expectedAnswer)), q(expectedAnswer), expectedAnswer],\n                (ea1: EA, ea2: EA, ea3: EA) => ea1.headers.header + ea2.body + Object.keys(ea3).length,\n            ).answeredBy(actor),\n        ).to.eventually.equal(expectedAnswer.headers.header + expectedAnswer.body + Object.keys(expectedAnswer).length));\n\n    it('transforms answers to questions of different types to another type', () =>\n        expect(\n            Transform.the(\n                [ q('the answer to life the universe and everything'), q(p(42)) ],\n                (a1: string, a2: number) => `${ a1 } is ${ a2 }`,\n            ).answeredBy(actor),\n        ).to.eventually.equal(`the answer to life the universe and everything is 42`));\n\n    it('provides a sensible default description', () => {\n        expect(Transform.the(expectedAnswer, _ => _).toString()).to.equal('a transformed answer');\n    });\n\n    it('allows for the default description to be changed', () => {\n        expect(Transform.the(expectedAnswer, _ => _).as('a better description').toString()).to.equal('a better description');\n    });\n\n    function q<T>(value: T): Question<T> {\n        return Question.about(`something`, someActor => value);\n    }\n\n    function p<T>(value: T) {\n        return Promise.resolve(value);\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Transform.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 785,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "spec/screenplay/questions/Transform.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe131",
    "access": null,
    "description": "TransformAnswer",
    "lineNumber": 9,
    "testTargets": [
      "TransformAnswer"
    ]
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe131.it132",
    "access": null,
    "description": "transforms answers to Array<Answerable<T>> to another type",
    "lineNumber": 40
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe131.it133",
    "access": null,
    "description": "transforms answers to questions of different types to another type",
    "lineNumber": 48
  },
  {
    "__docId__": 788,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe131.it134",
    "access": null,
    "description": "provides a sensible default description",
    "lineNumber": 56
  },
  {
    "__docId__": 789,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe131.it135",
    "access": null,
    "description": "allows for the default description to be changed",
    "lineNumber": 60
  },
  {
    "__docId__": 790,
    "kind": "testFile",
    "name": "spec/stage/Stage.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { ConfigurationError, LogicError } from '../../src/errors';\nimport { Actor, Interaction } from '../../src/screenplay';\nimport { Cast, Stage, StageManager } from '../../src/stage';\nimport { expect } from '../expect';\n\ndescribe('Stage', () => {\n\n    class Extras implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    const stageManager = sinon.createStubInstance(StageManager);\n\n    /**\n     * @test {Stage#actor}\n     * @test {Stage#theActorCalled}\n     */\n    it('provides both the more verbose and more concise way of accessing the actors', () => {\n        const\n            name   = 'Alice',\n            actors = new Extras(),\n            stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n        expect(stage.actor(name)).to.equal(stage.theActorCalled(name));\n    });\n\n    describe('when instantiating actors', () => {\n\n        /** @test {Stage#actor} */\n        it('instantiates a new actor when their name is called for the first time', () => {\n            const\n                name   = 'Alice',\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            sinon.spy(actors, 'prepare');\n\n            const actor = stage.actor(name);\n\n            expect((actors.prepare as any).getCall(0).args[0].name).to.equal(name);\n            expect(actor.name).to.equal('Alice');\n        });\n\n        /** @test {Stage#actor} */\n        it('returns an existing actor if it has already been instantiated before', () => {\n            const\n                name   = 'Alice',\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            sinon.spy(actors, 'prepare');\n\n            const a1 = stage.actor(name);\n            const a2 = stage.actor(name);\n\n            expect((actors.prepare as any).getCall(0).args[0].name).to.equal(name);\n            expect(actors.prepare).to.have.been.calledOnce;                    // tslint:disable-line:no-unused-expression\n\n            expect(a1).to.equal(a2);\n        });\n    });\n\n    describe('when referencing a recently retrieved actor', () => {\n\n        /** @test {Stage#actor} */\n        it('retrieves the current actor, if there is any', () => {\n            const\n                name   = 'Alice',\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            const a1 = stage.actor(name);\n            const a2 = stage.theActorInTheSpotlight();\n\n            expect(a2).to.equal(a1);\n        });\n\n        /**\n         * @test {Stage#theActorInTheSpotlight}\n         * @test {Stage#theActorInTheSpotlight}\n         */\n        it('provides both the more verbose and more concise way of accessing the actors in the spotlight', () => {\n            const\n                name   = 'Alice',\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            const a1 = stage.actor(name);\n            const a2 = stage.theActorCalled(name);\n            const a3 = stage.theActorInTheSpotlight();\n\n            expect(a1).to.equal(a2);\n            expect(a1).to.equal(a3);\n        });\n\n        /**\n         * @test {Stage#theActorInTheSpotlight}\n         * @test {Stage#theActorInTheSpotlight}\n         */\n        it('complains if you try to access the actor in the spotlight, but there isn\\'t any yet', () => {\n            const\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            expect(\n                () => stage.theActorInTheSpotlight(),\n            ).to.throw(LogicError, `There is no actor in the spotlight yet. Make sure you instantiate one with stage.actor(actorName) before calling this method.`);\n        });\n    });\n\n    describe('when correlating activities', () => {\n\n        const SomeActivity = () => Interaction.where(`#actor doesn't do much`, actor => void 0);\n\n        it('provides ActivityDetails for a given Activity', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            const details = stage.activityDetailsFor(SomeActivity(), stage.actor('Alice'));\n\n            expect(details.name.value).to.equal(`Alice doesn't do much`);\n            expect(details.correlationId.value).to.be.a('string');    // tslint:disable-line:no-unused-expression\n        });\n\n        it('allows for the recently ActivityDetails to be retrieved', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            const details = stage.activityDetailsFor(SomeActivity(), stage.actor('Alice'));\n\n            expect(stage.currentActivityDetails()).to.equal(details);\n        });\n\n        it('complains if ActivityDetails attempted to be retrieved before they have been generated', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => stage.currentActivityDetails()).to.throw(LogicError, 'No activity is being performed. Did you call activityDetailsFor before invoking currentActivityDetails?');\n        });\n    });\n\n    describe('when an error occurs', () => {\n\n        it('complains when instantiated with no Cast', () => {\n            expect(() => {\n                const stage = new Stage(null, stageManager as unknown as StageManager);\n            }).to.throw(Error, 'Cast should be defined');\n        });\n\n        it('complains when instantiated with no StageManager', () => {\n            expect(() => {\n                const stage = new Stage(new Extras(), null);\n            }).to.throw(Error, 'StageManager should be defined');\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast does not provide a way to instantiate a given actor', () => {\n            const\n                name   = 'Alice',\n                actors: Cast = {\n                    prepare: (actor: Actor) => undefined,\n                },\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Instead of a new instance of actor \"${ name }\", Cast returned undefined`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast does not provide a way to prepare a given actor and mentions the type of the Cast, when available', () => {\n            class AwesomeActors implements Cast {\n                prepare(actor: Actor): Actor {\n                    return undefined;\n                }\n            }\n\n            const\n                name   = 'Alice',\n                actors = new AwesomeActors(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Instead of a new instance of actor \"${ name }\", AwesomeActors returned undefined`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast throws an error during actor instantiation', () => {\n            const\n                name   = 'Alice',\n                actors: Cast = {\n                    prepare: (actor: Actor) => { throw new Error(`I'm not working today`); },\n                },\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Cast encountered a problem when preparing actor \"${ name }\" for stage`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast throws an error during actor instantiation and mentions the type of the Cast, when available', () => {\n            class MoodyActors implements Cast {\n                prepare(actor: Actor): Actor {\n                    throw new Error(`I'm not working today`);\n                }\n            }\n\n            const\n                name   = 'Alice',\n                actors = new MoodyActors(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `MoodyActors encountered a problem when preparing actor \"${ name }\" for stage`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/stage/Stage.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "spec/stage/Stage.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136",
    "access": null,
    "description": "Stage",
    "lineNumber": 10
  },
  {
    "__docId__": 792,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "spec/stage/Stage.spec.ts~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.it137",
    "access": null,
    "description": "provides both the more verbose and more concise way of accessing the actors",
    "lineNumber": 44,
    "testTargets": [
      "Stage#actor",
      "Stage#theActorCalled"
    ]
  },
  {
    "__docId__": 793,
    "kind": "test",
    "name": "describe138",
    "testId": 138,
    "memberof": "spec/stage/Stage.spec.ts~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe138",
    "access": null,
    "description": "when instantiating actors",
    "lineNumber": 53
  },
  {
    "__docId__": 794,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe138.it139",
    "access": null,
    "description": "instantiates a new actor when their name is called for the first time",
    "lineNumber": 56,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 795,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe138.it140",
    "access": null,
    "description": "returns an existing actor if it has already been instantiated before",
    "lineNumber": 71,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 796,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "spec/stage/Stage.spec.ts~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe141",
    "access": null,
    "description": "when referencing a recently retrieved actor",
    "lineNumber": 89
  },
  {
    "__docId__": 797,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe141.it142",
    "access": null,
    "description": "retrieves the current actor, if there is any",
    "lineNumber": 92,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 798,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe141.it143",
    "access": null,
    "description": "provides both the more verbose and more concise way of accessing the actors in the spotlight",
    "lineNumber": 107,
    "testTargets": [
      "Stage#theActorInTheSpotlight",
      "Stage#theActorInTheSpotlight"
    ]
  },
  {
    "__docId__": 799,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe141.it144",
    "access": null,
    "description": "complains if you try to access the actor in the spotlight, but there isn't any yet",
    "lineNumber": 124,
    "testTargets": [
      "Stage#theActorInTheSpotlight",
      "Stage#theActorInTheSpotlight"
    ]
  },
  {
    "__docId__": 800,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "spec/stage/Stage.spec.ts~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe145",
    "access": null,
    "description": "when correlating activities",
    "lineNumber": 134
  },
  {
    "__docId__": 801,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe145.it146",
    "access": null,
    "description": "provides ActivityDetails for a given Activity",
    "lineNumber": 138
  },
  {
    "__docId__": 802,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe145.it147",
    "access": null,
    "description": "allows for the recently ActivityDetails to be retrieved",
    "lineNumber": 149
  },
  {
    "__docId__": 803,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe145.it148",
    "access": null,
    "description": "complains if ActivityDetails attempted to be retrieved before they have been generated",
    "lineNumber": 159
  },
  {
    "__docId__": 804,
    "kind": "test",
    "name": "describe149",
    "testId": 149,
    "memberof": "spec/stage/Stage.spec.ts~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149",
    "access": null,
    "description": "when an error occurs",
    "lineNumber": 168
  },
  {
    "__docId__": 805,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it150",
    "access": null,
    "description": "complains when instantiated with no Cast",
    "lineNumber": 170
  },
  {
    "__docId__": 806,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it151",
    "access": null,
    "description": "complains when instantiated with no StageManager",
    "lineNumber": 176
  },
  {
    "__docId__": 807,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it152",
    "access": null,
    "description": "complains if the Cast does not provide a way to instantiate a given actor",
    "lineNumber": 183,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 808,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it153",
    "access": null,
    "description": "complains if the Cast does not provide a way to prepare a given actor and mentions the type of the Cast, when available",
    "lineNumber": 197,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 809,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it154",
    "access": null,
    "description": "complains if the Cast throws an error during actor instantiation",
    "lineNumber": 235,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 810,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "spec/stage/Stage.spec.ts~describe136.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe136.describe149.it155",
    "access": null,
    "description": "complains if the Cast throws an error during actor instantiation and mentions the type of the Cast, when available",
    "lineNumber": 249,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 811,
    "kind": "testFile",
    "name": "spec/stage/StageManager.spec.ts",
    "content": "import 'mocha';\n\nimport { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent } from '../../src/events';\nimport { CorrelationId, Description, Duration } from '../../src/model';\nimport { Clock, StageManager } from '../../src/stage';\n\nimport { expect } from '../expect';\nimport { Recorder } from '../Recorder';\n\ndescribe('StageManager', () => {\n\n    class TestEvent extends DomainEvent {\n        constructor() {\n            super();\n        }\n    }\n\n    const testEvent = new TestEvent();\n\n    /** @test {StageManager} */\n    it('broadcasts the domain event it receives to all the registered subscribers', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n        const crewMember1 = new Recorder();\n        const crewMember2 = new Recorder();\n\n        stageManager.register(crewMember1, crewMember2);\n\n        stageManager.notifyOf(testEvent);\n\n        expect(crewMember1.events).to.have.lengthOf(1);\n        expect(crewMember1.events[0]).to.be.instanceOf(TestEvent);\n        expect(crewMember2.events).to.have.lengthOf(1);\n        expect(crewMember2.events[0]).to.be.instanceOf(TestEvent);\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     * @test {AsyncOperationCompleted}\n     */\n    it('keeps track of the work in progress', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n\n        const id = CorrelationId.create();\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('Saving a file...'),\n            id,\n        ));\n        stageManager.notifyOf(new AsyncOperationCompleted(\n            new Description('File saved'),\n            id,\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.fulfilled;\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     */\n    it('provides details should the work in progress fail to complete', () => {\n\n        const timeout       = Duration.ofMilliseconds(250);\n        const stageManager = new StageManager(timeout, new Clock());\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('[Service 1] Starting...'),\n            CorrelationId.create(),\n        ));\n\n        setTimeout(() => {\n            stageManager.notifyOf(new AsyncOperationAttempted(\n                new Description('[Service 2] Starting...'),\n                CorrelationId.create(),\n            ));\n        }, 50);\n\n        return expect(stageManager.waitForNextCue()).to.be.rejected.then(error => {\n            const lines = error.message.split('\\n');\n\n            expect(lines[0]).to.equal('Some of the 2 async operations have failed to complete within 250ms:');\n            expect(lines[1]).to.match(/^[\\d]+ms - \\[Service 1\\] Starting...$/);\n            expect(lines[2]).to.match(/^[\\d]+ms - \\[Service 2\\] Starting...$/);\n        });\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     * @test {AsyncOperationFailed}\n     */\n    it('provides details should the work in progress fail with an error', () => {\n\n        const timeout       = Duration.ofMilliseconds(100);\n        const stageManager  = new StageManager(timeout, new Clock());\n        const correlationId = CorrelationId.create();\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('[Service 1] Starting...'),\n            correlationId,\n        ));\n\n        stageManager.notifyOf(new AsyncOperationFailed(\n            new Error('Something happened'),\n            correlationId,\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.rejected.then(error => {\n            const lines = error.message.split('\\n');\n\n            expect(lines[0]).to.match(/^Some of the async operations have failed:$/);\n            expect(lines[1]).to.equal('[Service 1] Starting... - Error: Something happened');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/stage/StageManager.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 812,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "spec/stage/StageManager.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe156",
    "access": null,
    "description": "StageManager",
    "lineNumber": 10
  },
  {
    "__docId__": 813,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "spec/stage/StageManager.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe156.it157",
    "access": null,
    "description": "broadcasts the domain event it receives to all the registered subscribers",
    "lineNumber": 28,
    "testTargets": [
      "StageManager"
    ]
  },
  {
    "__docId__": 814,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "spec/stage/StageManager.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe156.it158",
    "access": null,
    "description": "keeps track of the work in progress",
    "lineNumber": 49,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted",
      "AsyncOperationCompleted"
    ]
  },
  {
    "__docId__": 815,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/stage/StageManager.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe156.it159",
    "access": null,
    "description": "provides details should the work in progress fail to complete",
    "lineNumber": 71,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted"
    ]
  },
  {
    "__docId__": 816,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "spec/stage/StageManager.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe156.it160",
    "access": null,
    "description": "provides details should the work in progress fail with an error",
    "lineNumber": 102,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted",
      "AsyncOperationFailed"
    ]
  },
  {
    "__docId__": 817,
    "kind": "testFile",
    "name": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "content": "import 'mocha';\nimport * as sinon from 'sinon';\n\nimport { Actor } from '../../../../src';\nimport { ArtifactArchived, ArtifactGenerated, DomainEvent } from '../../../../src/events';\nimport { FileSystem, Path } from '../../../../src/io';\nimport { Duration, JSONData, Name, TestReport } from '../../../../src/model';\nimport { ArtifactArchiver, Cast, Clock, Stage, StageManager } from '../../../../src/stage';\n\nimport { expect } from '../../../expect';\nimport { photo } from '../samples';\n\n/** @test {ArtifactArchiver} */\ndescribe('ArtifactArchiver', () => {\n\n    const\n        json = { key: 'value' },\n        jsonValueShortHash = '64cdd772d3',\n        photoShortHash = '6808b2e9fe';\n\n    let stage:          Stage,\n        fs:             sinon.SinonStubbedInstance<FileSystem>,\n        archiver:       ArtifactArchiver;\n\n    class Extras implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    beforeEach(() => {\n        fs = sinon.createStubInstance(FileSystem);\n        fs.store.callsFake((path: Path, contents: any) => Promise.resolve(path));\n    });\n\n    describe('stores the artifacts generated by the other stage crew members', () => {\n\n        beforeEach(() => {\n            stage = new Stage(new Extras(), new StageManager(Duration.ofMilliseconds(250), new Clock()));\n\n            archiver = new ArtifactArchiver(fs as any, stage);\n            stage.assign(archiver);\n        });\n\n        const\n            jsonArtifactName = new Name('Scenario Name'),\n            expectedJsonFileName = 'scenario-name',\n            pngArtifactName  = new Name('PNG Artifact name'),\n            expectedPngFileName = 'png-artifact-name';\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('notifies the StageManager when an artifact is saved so that the promise of a stage cue can be fulfilled', () => {\n            stage.announce(new ArtifactGenerated(\n                jsonArtifactName,\n                JSONData.fromJSON(json),\n            ));\n\n            return expect(stage.waitForNextCue()).to.be.fulfilled;\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('notifies the StageManager when an artifact cannot be saved so that the promise of a stage cue can be rejected', () => {\n            fs.store.returns(Promise.reject(new Error('Something happened')));\n\n            stage.announce(new ArtifactGenerated(\n                pngArtifactName,\n                photo,\n            ));\n\n            return expect(stage.waitForNextCue()).to.be.rejected;\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('correctly saves the test report to a unique file', () => {\n            stage.announce(new ArtifactGenerated(\n                jsonArtifactName,\n                TestReport.fromJSON(json),\n            ));\n\n            return stage.waitForNextCue().then(() => {\n                expect(fs.store).to.have.been.calledWith(\n                    new Path(`scenario-${ expectedJsonFileName }-${ jsonValueShortHash }.json`),\n                    JSON.stringify(json),\n                );\n            });\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('correctly saves PNG content to a file', () => {\n            stage.announce(new ArtifactGenerated(\n                pngArtifactName,\n                photo,\n            ));\n\n            return stage.waitForNextCue().then(() => {\n                expect(fs.store).to.have.been.calledWith(\n                    new Path(`photo-${ expectedPngFileName }-${ photoShortHash }.png`),\n                    photo.base64EncodedValue,\n                    'base64',\n                );\n            });\n        });\n    });\n\n    describe('when it encounters events it\\'s not interested in', () => {\n\n        class SomeEvent extends DomainEvent {\n            constructor() {\n                super();\n            }\n        }\n\n        const someEvent = new SomeEvent();\n\n        /**\n         * @test {ArtifactArchiver}\n         */\n        it('ignores them', () => {\n            const stageManager = sinon.createStubInstance(StageManager);\n\n            fs           = sinon.createStubInstance(FileSystem);\n            stage        = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            archiver     = new ArtifactArchiver(fs as any);\n            stage.assign(archiver);\n\n            archiver.notifyOf(\n                someEvent,\n            );\n\n            expect(stageManager.notifyOf).to.not.have.been.called;            // tslint:disable-line:no-unused-expression\n            expect(fs.store).to.not.have.been.called;                         // tslint:disable-line:no-unused-expression\n        });\n    });\n\n    /**\n     * @test {ArtifactArchiver}\n     * @test {ArtifactGenerated}\n     * @test {ArtifactArchived}\n     */\n    it('notifies the StageManager when the artifact is correctly archived', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n\n        stage = new Stage(new Extras(), stageManager);\n\n        archiver = new ArtifactArchiver(fs as any);\n        stage.assign(archiver);\n\n        const notifyOf = sinon.spy(stageManager, 'notifyOf');\n\n        stageManager.notifyOf(new ArtifactGenerated(\n            new Name('Some Report Name'),\n            TestReport.fromJSON(json),\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.fulfilled.then(() => {\n\n            const archived: ArtifactArchived = notifyOf.getCall(2).lastArg;\n\n            expect(archived).to.be.instanceOf(ArtifactArchived);\n            expect(archived.name).to.equal(new Name('Some Report Name'));\n            expect(archived.type).to.equal(TestReport);\n            expect(archived.path).to.equal(new Path(`scenario-some-report-name-${ jsonValueShortHash }.json`));\n        });\n    });\n\n    describe('when instantiated using a factory method', () => {\n        it('joins the path segments provided so that the developer doesn\\'t need to worry about cross-OS compatibility of the path', () => {\n            archiver = ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target', 'site/serenity');\n\n            expect((archiver as any).fileSystem.root).to.equal(new Path(process.cwd()).join(new Path('target/site/serenity')));\n        });\n\n        it('complains if the destination is not provided', () => {\n            expect(() => ArtifactArchiver.storingArtifactsAt()).to.throw(Error, `Path to destination directory should have a property \"length\" that is greater than 0`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/core/spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161",
    "access": null,
    "description": "ArtifactArchiver",
    "lineNumber": 14,
    "testTargets": [
      "ArtifactArchiver"
    ]
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162",
    "access": null,
    "description": "stores the artifacts generated by the other stage crew members",
    "lineNumber": 56
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162.it163",
    "access": null,
    "description": "notifies the StageManager when an artifact is saved so that the promise of a stage cue can be fulfilled",
    "lineNumber": 75,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162.it164",
    "access": null,
    "description": "notifies the StageManager when an artifact cannot be saved so that the promise of a stage cue can be rejected",
    "lineNumber": 88,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162.it165",
    "access": null,
    "description": "correctly saves the test report to a unique file",
    "lineNumber": 103,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 823,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe162.it166",
    "access": null,
    "description": "correctly saves PNG content to a file",
    "lineNumber": 121,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 824,
    "kind": "test",
    "name": "describe167",
    "testId": 167,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe167",
    "access": null,
    "description": "when it encounters events it's not interested in",
    "lineNumber": 137
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe167.it168",
    "access": null,
    "description": "ignores them",
    "lineNumber": 157,
    "testTargets": [
      "ArtifactArchiver"
    ]
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.it169",
    "access": null,
    "description": "notifies the StageManager when the artifact is correctly archived",
    "lineNumber": 180,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated",
      "ArtifactArchived"
    ]
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe170",
    "access": null,
    "description": "when instantiated using a factory method",
    "lineNumber": 207
  },
  {
    "__docId__": 828,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe170.it171",
    "access": null,
    "description": "joins the path segments provided so that the developer doesn't need to worry about cross-OS compatibility of the path",
    "lineNumber": 208
  },
  {
    "__docId__": 829,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe161.describe170.it172",
    "access": null,
    "description": "complains if the destination is not provided",
    "lineNumber": 214
  }
]