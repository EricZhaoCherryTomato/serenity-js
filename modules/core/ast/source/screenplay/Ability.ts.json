{
  "type": "File",
  "start": 0,
  "end": 2729,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 85,
      "column": 0
    }
  },
  "errors": [],
  "program": {
    "type": "Program",
    "start": 0,
    "end": 2729,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 85,
        "column": 0
      }
    },
    "sourceType": "module",
    "interpreter": null,
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 2652,
        "end": 2728,
        "loc": {
          "start": {
            "line": 83,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc \n *  \n * @lineNumber \n * 76 \n ",
            "start": 1,
            "end": 46,
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 7,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import { Ability, Actor, Initialisable, Discardable, Interaction } from '@serenity-js/core';\n *  import { Client } from 'pg';\n *\n *  class UsePostgreSQLDatabase implements Initialisable, Discardable, Ability {\n *      static using(client: Client) {\n *          return new UsePostgreSQLDatabase(client);\n *      }\n *\n *      static as(actor: UsePostgreSQLDatabase): MakesPhoneCalls {\n *          return actor.abilityTo(UsePostgreSQLDatabase);\n *      }\n *\n *      constructor(private readonly client: Client) {}\n *\n *      // Connect to the database automatically the first time\n *      // actor.attemptsTo() is called.\n *      // See Initialisable for details\n *      async initialise(): Promise<void> {\n *          await this.client.connect();\n *      }\n *\n *      // Disconnect when the actor is dismissed.\n *      // See Discardable for details\n *      async discard(): Promise<void> {\n *          await this.client.end();\n *      }\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      query(queryText: string, ...params: string[]) {\n *          return this.client(queryText, params);\n *      }\n *  }\n *\n *  const ResultsFor = (queryText: string, params: string[]) =>\n *      Question.about(`results for ${ queryText } with params: ${ params }`,\n *          actor => UsePostgreSQLDatabase.as(actor).query(queryText, params));\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
            "start": 48,
            "end": 2651,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 82,
                "column": 16
              }
            }
          }
        ],
        "exportKind": "value",
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 2659,
          "end": 2728,
          "loc": {
            "start": {
              "line": 83,
              "column": 7
            },
            "end": {
              "line": 84,
              "column": 1
            }
          },
          "abstract": true,
          "id": {
            "type": "Identifier",
            "start": 2674,
            "end": 2681,
            "loc": {
              "start": {
                "line": 83,
                "column": 22
              },
              "end": {
                "line": 83,
                "column": 29
              },
              "identifierName": "Ability"
            },
            "name": "Ability"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 2682,
            "end": 2728,
            "loc": {
              "start": {
                "line": 83,
                "column": 30
              },
              "end": {
                "line": 84,
                "column": 1
              }
            },
            "innerComments": [
              {
                "type": "CommentLine",
                "value": " tslint:disable-line:no-empty-interface",
                "start": 2685,
                "end": 2726,
                "loc": {
                  "start": {
                    "line": 83,
                    "column": 33
                  },
                  "end": {
                    "line": 83,
                    "column": 74
                  }
                }
              }
            ],
            "body": []
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc \n *  \n * @lineNumber \n * 76 \n ",
              "start": 1,
              "end": 46,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 0
                },
                "end": {
                  "line": 7,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import { Ability, Actor, Initialisable, Discardable, Interaction } from '@serenity-js/core';\n *  import { Client } from 'pg';\n *\n *  class UsePostgreSQLDatabase implements Initialisable, Discardable, Ability {\n *      static using(client: Client) {\n *          return new UsePostgreSQLDatabase(client);\n *      }\n *\n *      static as(actor: UsePostgreSQLDatabase): MakesPhoneCalls {\n *          return actor.abilityTo(UsePostgreSQLDatabase);\n *      }\n *\n *      constructor(private readonly client: Client) {}\n *\n *      // Connect to the database automatically the first time\n *      // actor.attemptsTo() is called.\n *      // See Initialisable for details\n *      async initialise(): Promise<void> {\n *          await this.client.connect();\n *      }\n *\n *      // Disconnect when the actor is dismissed.\n *      // See Discardable for details\n *      async discard(): Promise<void> {\n *          await this.client.end();\n *      }\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      query(queryText: string, ...params: string[]) {\n *          return this.client(queryText, params);\n *      }\n *  }\n *\n *  const ResultsFor = (queryText: string, params: string[]) =>\n *      Question.about(`results for ${ queryText } with params: ${ params }`,\n *          actor => UsePostgreSQLDatabase.as(actor).query(queryText, params));\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
              "start": 48,
              "end": 2651,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 82,
                  "column": 16
                }
              }
            }
          ],
          "trailingComments": []
        }
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc \n *  \n * @lineNumber \n * 76 \n ",
      "start": 1,
      "end": 46,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import { Ability, Actor, Initialisable, Discardable, Interaction } from '@serenity-js/core';\n *  import { Client } from 'pg';\n *\n *  class UsePostgreSQLDatabase implements Initialisable, Discardable, Ability {\n *      static using(client: Client) {\n *          return new UsePostgreSQLDatabase(client);\n *      }\n *\n *      static as(actor: UsePostgreSQLDatabase): MakesPhoneCalls {\n *          return actor.abilityTo(UsePostgreSQLDatabase);\n *      }\n *\n *      constructor(private readonly client: Client) {}\n *\n *      // Connect to the database automatically the first time\n *      // actor.attemptsTo() is called.\n *      // See Initialisable for details\n *      async initialise(): Promise<void> {\n *          await this.client.connect();\n *      }\n *\n *      // Disconnect when the actor is dismissed.\n *      // See Discardable for details\n *      async discard(): Promise<void> {\n *          await this.client.end();\n *      }\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      query(queryText: string, ...params: string[]) {\n *          return this.client(queryText, params);\n *      }\n *  }\n *\n *  const ResultsFor = (queryText: string, params: string[]) =>\n *      Question.about(`results for ${ queryText } with params: ${ params }`,\n *          actor => UsePostgreSQLDatabase.as(actor).query(queryText, params));\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n * @interface ",
      "start": 48,
      "end": 2651,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 82,
          "column": 16
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " tslint:disable-line:no-empty-interface",
      "start": 2685,
      "end": 2726,
      "loc": {
        "start": {
          "line": 83,
          "column": 33
        },
        "end": {
          "line": 83,
          "column": 74
        }
      }
    }
  ]
}