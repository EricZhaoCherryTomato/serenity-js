{
  "type": "File",
  "start": 0,
  "end": 1162,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 44,
      "column": 0
    }
  },
  "errors": [],
  "program": {
    "type": "Program",
    "start": 0,
    "end": 1162,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 44,
        "column": 0
      }
    },
    "sourceType": "module",
    "interpreter": null,
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 1085,
        "end": 1161,
        "loc": {
          "start": {
            "line": 42,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 1092,
          "end": 1161,
          "loc": {
            "start": {
              "line": 42,
              "column": 7
            },
            "end": {
              "line": 43,
              "column": 1
            }
          },
          "abstract": true,
          "id": {
            "type": "Identifier",
            "start": 1107,
            "end": 1114,
            "loc": {
              "start": {
                "line": 42,
                "column": 22
              },
              "end": {
                "line": 42,
                "column": 29
              },
              "identifierName": "Ability"
            },
            "name": "Ability"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 1115,
            "end": 1161,
            "loc": {
              "start": {
                "line": 42,
                "column": 30
              },
              "end": {
                "line": 43,
                "column": 1
              }
            },
            "body": [],
            "innerComments": [
              {
                "type": "CommentLine",
                "value": " tslint:disable-line:no-empty-interface",
                "start": 1118,
                "end": 1159,
                "loc": {
                  "start": {
                    "line": 42,
                    "column": 33
                  },
                  "end": {
                    "line": 42,
                    "column": 74
                  }
                }
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc \n *  \n * @lineNumber \n * 35 \n ",
              "start": 1,
              "end": 46,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 0
                },
                "end": {
                  "line": 7,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n * import { Ability, Actor, Interface } from '@serenity-js/core';\n *\n * class MakePhoneCalls implements Ability {\n *     static as(actor: UsesAbilities): MakesPhoneCalls {\n *         return actor.abilityTo(MakePhoneCalls);\n *     }\n *\n *     static using(phone: Phone) {\n *         return new MakePhoneCalls(phone);\n *     }\n *\n *     constructor(private readonly phone: Phone) {}\n *\n *     // some method that allows us to interact with the external interface of the system under test\n *     dial(phoneNumber: string) {\n *       // ...\n *     }\n * }\n *\n * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *  MakePhoneCalls.as(actor).dial(phoneNumber);\n * );\n *\n * @access public\n * @interface ",
              "start": 48,
              "end": 1084,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 41,
                  "column": 16
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc \n *  \n * @lineNumber \n * 35 \n ",
            "start": 1,
            "end": 46,
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 7,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n * import { Ability, Actor, Interface } from '@serenity-js/core';\n *\n * class MakePhoneCalls implements Ability {\n *     static as(actor: UsesAbilities): MakesPhoneCalls {\n *         return actor.abilityTo(MakePhoneCalls);\n *     }\n *\n *     static using(phone: Phone) {\n *         return new MakePhoneCalls(phone);\n *     }\n *\n *     constructor(private readonly phone: Phone) {}\n *\n *     // some method that allows us to interact with the external interface of the system under test\n *     dial(phoneNumber: string) {\n *       // ...\n *     }\n * }\n *\n * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *  MakePhoneCalls.as(actor).dial(phoneNumber);\n * );\n *\n * @access public\n * @interface ",
            "start": 48,
            "end": 1084,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 41,
                "column": 16
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc \n *  \n * @lineNumber \n * 35 \n ",
      "start": 1,
      "end": 46,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n * import { Ability, Actor, Interface } from '@serenity-js/core';\n *\n * class MakePhoneCalls implements Ability {\n *     static as(actor: UsesAbilities): MakesPhoneCalls {\n *         return actor.abilityTo(MakePhoneCalls);\n *     }\n *\n *     static using(phone: Phone) {\n *         return new MakePhoneCalls(phone);\n *     }\n *\n *     constructor(private readonly phone: Phone) {}\n *\n *     // some method that allows us to interact with the external interface of the system under test\n *     dial(phoneNumber: string) {\n *       // ...\n *     }\n * }\n *\n * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *  MakePhoneCalls.as(actor).dial(phoneNumber);\n * );\n *\n * @access public\n * @interface ",
      "start": 48,
      "end": 1084,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 16
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " tslint:disable-line:no-empty-interface",
      "start": 1118,
      "end": 1159,
      "loc": {
        "start": {
          "line": 42,
          "column": 33
        },
        "end": {
          "line": 42,
          "column": 74
        }
      }
    }
  ]
}