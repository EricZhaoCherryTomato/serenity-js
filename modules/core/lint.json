[
  {
    "name": "decycle",
    "filePath": "src/io/json/cycle.ts",
    "lines": [
      {
        "lineNumber": 69,
        "line": "function decycle(object: any) {"
      },
      {
        "lineNumber": 70,
        "line": "    const objects = new WeakMap<any, string>();     // object to path mappings"
      },
      {
        "lineNumber": 71,
        "line": ""
      },
      {
        "lineNumber": 72,
        "line": "    // The derez function recurses through the object, producing a deep copy"
      },
      {
        "lineNumber": 73,
        "line": "    return (function derez(value, path) {"
      },
      {
        "lineNumber": 74,
        "line": ""
      },
      {
        "lineNumber": 75,
        "line": "        let old_path,   // The path of an earlier occurance of value"
      },
      {
        "lineNumber": 76,
        "line": "            nu;         // The new object or array"
      },
      {
        "lineNumber": 77,
        "line": ""
      },
      {
        "lineNumber": 78,
        "line": "        if ("
      },
      {
        "lineNumber": 79,
        "line": "            typeof value === 'object'"
      },
      {
        "lineNumber": 80,
        "line": "            && value !== null"
      },
      {
        "lineNumber": 81,
        "line": "            && !(value instanceof Boolean)"
      },
      {
        "lineNumber": 82,
        "line": "            && !(value instanceof Date)"
      },
      {
        "lineNumber": 83,
        "line": "            && !(value instanceof Number)"
      },
      {
        "lineNumber": 84,
        "line": "            && !(value instanceof RegExp)"
      },
      {
        "lineNumber": 85,
        "line": "            && !(value instanceof String)"
      },
      {
        "lineNumber": 86,
        "line": "        ) {"
      },
      {
        "lineNumber": 87,
        "line": "            // If the value is an object or array, look to see if we have already"
      },
      {
        "lineNumber": 88,
        "line": "            // encountered it. If so, return a {\"$ref\":PATH} object."
      },
      {
        "lineNumber": 89,
        "line": ""
      },
      {
        "lineNumber": 90,
        "line": "            old_path = objects.get(value);"
      },
      {
        "lineNumber": 91,
        "line": "            if (old_path !== undefined) {"
      },
      {
        "lineNumber": 92,
        "line": "                return { $ref: old_path };"
      },
      {
        "lineNumber": 93,
        "line": "            }"
      },
      {
        "lineNumber": 94,
        "line": "            // Otherwise, accumulate the unique value and its path."
      },
      {
        "lineNumber": 95,
        "line": ""
      },
      {
        "lineNumber": 96,
        "line": "            objects.set(value, path);"
      },
      {
        "lineNumber": 97,
        "line": ""
      },
      {
        "lineNumber": 98,
        "line": "            // If it is an array, replicate the array."
      },
      {
        "lineNumber": 99,
        "line": ""
      },
      {
        "lineNumber": 100,
        "line": "            if (Array.isArray(value)) {"
      },
      {
        "lineNumber": 101,
        "line": "                nu = [];"
      },
      {
        "lineNumber": 102,
        "line": "                value.forEach(function (element, i) {"
      },
      {
        "lineNumber": 103,
        "line": "                    nu[i] = derez(element, path + '[' + i + ']');"
      },
      {
        "lineNumber": 104,
        "line": "                });"
      }
    ],
    "codeParams": [
      "object"
    ],
    "docParams": [
      "object",
      "replacer"
    ]
  }
]