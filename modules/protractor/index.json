[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Check",
    "externalLink": "/modules/assertions/class/src/Check.ts~Check.html",
    "longname": "@serenity-js/assertions~Check",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "Ensure",
    "externalLink": "/modules/assertions/class/src/Ensure.ts~Ensure.html",
    "longname": "@serenity-js/assertions~Ensure",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "Expectation",
    "externalLink": "/modules/assertions/class/src/Expectation.ts~Expectation.html",
    "longname": "@serenity-js/assertions~Expectation",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "and",
    "externalLink": "/modules/assertions/function/src/expectations/and.ts~and.html",
    "longname": "@serenity-js/assertions/lib/expectations~and",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "contain",
    "externalLink": "/modules/assertions/function/src/expectations/contain.ts~contain.html",
    "longname": "@serenity-js/assertions/lib/expectations~contain",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "containAtLeastOneItemThat",
    "externalLink": "/modules/assertions/function/src/expectations/containAtLeastOneItemThat.ts~containAtLeastOneItemThat.html",
    "longname": "@serenity-js/assertions/lib/expectations~containAtLeastOneItemThat",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "containItemsWhereEachItem",
    "externalLink": "/modules/assertions/function/src/expectations/containItemsWhereEachItem.ts~containItemsWhereEachItem.html",
    "longname": "@serenity-js/assertions/lib/expectations~containItemsWhereEachItem",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "endsWith",
    "externalLink": "/modules/assertions/function/src/expectations/endsWith.ts~endsWith.html",
    "longname": "@serenity-js/assertions/lib/expectations~endsWith",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "equals",
    "externalLink": "/modules/assertions/function/src/expectations/equals.ts~equals.html",
    "longname": "@serenity-js/assertions/lib/expectations~equals",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "includes",
    "externalLink": "/modules/assertions/function/src/expectations/includes.ts~includes.html",
    "longname": "@serenity-js/assertions/lib/expectations~includes",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "isAfter",
    "externalLink": "/modules/assertions/function/src/expectations/isAfter.ts~isAfter.html",
    "longname": "@serenity-js/assertions/lib/expectations~isAfter",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "isBefore",
    "externalLink": "/modules/assertions/function/src/expectations/isBefore.ts~isBefore.html",
    "longname": "@serenity-js/assertions/lib/expectations~isBefore",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "isFalse",
    "externalLink": "/modules/assertions/function/src/expectations/isFalse.ts~isFalse.html",
    "longname": "@serenity-js/assertions/lib/expectations~isFalse",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "isGreaterThan",
    "externalLink": "/modules/assertions/function/src/expectations/isGreaterThan.ts~isGreaterThan.html",
    "longname": "@serenity-js/assertions/lib/expectations~isGreaterThan",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "isLessThan",
    "externalLink": "/modules/assertions/function/src/expectations/isLessThan.ts~isLessThan.html",
    "longname": "@serenity-js/assertions/lib/expectations~isLessThan",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "isTrue",
    "externalLink": "/modules/assertions/function/src/expectations/isTrue.ts~isTrue.html",
    "longname": "@serenity-js/assertions/lib/expectations~isTrue",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "matches",
    "externalLink": "/modules/assertions/function/src/expectations/matches.ts~matches.html",
    "longname": "@serenity-js/assertions/lib/expectations~matches",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "not",
    "externalLink": "/modules/assertions/function/src/expectations/not.ts~not.html",
    "longname": "@serenity-js/assertions/lib/expectations~not",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "or",
    "externalLink": "/modules/assertions/function/src/expectations/or.ts~or.html",
    "longname": "@serenity-js/assertions/lib/expectations~or",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "property",
    "externalLink": "/modules/assertions/function/src/expectations/property.ts~property.html",
    "longname": "@serenity-js/assertions/lib/expectations~property",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "startsWith",
    "externalLink": "/modules/assertions/function/src/expectations/startsWith.ts~startsWith.html",
    "longname": "@serenity-js/assertions/lib/expectations~startsWith",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/assertions/class/src/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/assertions~Outcome",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "ExpectationMet",
    "externalLink": "/modules/assertions/class/src/outcomes.ts~ExpectationMet.html",
    "longname": "@serenity-js/assertions~ExpectationMet",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "ExpectationNotMet",
    "externalLink": "/modules/assertions/class/src/outcomes.ts~ExpectationNotMet.html",
    "longname": "@serenity-js/assertions~ExpectationNotMet",
    "memberof": "src/.imports-from-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Serenity",
    "externalLink": "/modules/core/class/src/Serenity.ts~Serenity.html",
    "longname": "@serenity-js/core~Serenity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "SerenityConfig",
    "externalLink": "/modules/core/class/src/SerenityConfig.ts~SerenityConfig.html",
    "longname": "@serenity-js/core~SerenityConfig",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "AssertionError",
    "externalLink": "/modules/core/class/src/errors/AssertionError.ts~AssertionError.html",
    "longname": "@serenity-js/core/lib/errors~AssertionError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "ConfigurationError",
    "externalLink": "/modules/core/class/src/errors/ConfigurationError.ts~ConfigurationError.html",
    "longname": "@serenity-js/core/lib/errors~ConfigurationError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "ImplementationPendingError",
    "externalLink": "/modules/core/class/src/errors/ImplementationPendingError.ts~ImplementationPendingError.html",
    "longname": "@serenity-js/core/lib/errors~ImplementationPendingError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "LogicError",
    "externalLink": "/modules/core/class/src/errors/LogicError.ts~LogicError.html",
    "longname": "@serenity-js/core/lib/errors~LogicError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "RuntimeError",
    "externalLink": "/modules/core/class/src/errors/RuntimeError.ts~RuntimeError.html",
    "longname": "@serenity-js/core/lib/errors~RuntimeError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "TestCompromisedError",
    "externalLink": "/modules/core/class/src/errors/TestCompromisedError.ts~TestCompromisedError.html",
    "longname": "@serenity-js/core/lib/errors~TestCompromisedError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "UnknownError",
    "externalLink": "/modules/core/class/src/errors/UnknownError.ts~UnknownError.html",
    "longname": "@serenity-js/core/lib/errors~UnknownError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "ActivityFinished",
    "externalLink": "/modules/core/class/src/events/ActivityFinished.ts~ActivityFinished.html",
    "longname": "@serenity-js/core/lib/events~ActivityFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "ActivityRelatedArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactArchived",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "ActivityRelatedArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactGenerated",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "ActivityStarts",
    "externalLink": "/modules/core/class/src/events/ActivityStarts.ts~ActivityStarts.html",
    "longname": "@serenity-js/core/lib/events~ActivityStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "ArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ArtifactArchived.ts~ArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ArtifactArchived",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ArtifactGenerated.ts~ArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ArtifactGenerated",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "AsyncOperationAttempted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationAttempted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "AsyncOperationCompleted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationCompleted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "AsyncOperationFailed",
    "externalLink": "/modules/core/class/src/events/AsyncOperationFailed.ts~AsyncOperationFailed.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationFailed",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "DomainEvent",
    "externalLink": "/modules/core/class/src/events/DomainEvent.ts~DomainEvent.html",
    "longname": "@serenity-js/core/lib/events~DomainEvent",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "FeatureNarrativeDetected",
    "externalLink": "/modules/core/class/src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.html",
    "longname": "@serenity-js/core/lib/events~FeatureNarrativeDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "InteractionFinished",
    "externalLink": "/modules/core/class/src/events/InteractionFinished.ts~InteractionFinished.html",
    "longname": "@serenity-js/core/lib/events~InteractionFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "InteractionStarts",
    "externalLink": "/modules/core/class/src/events/InteractionStarts.ts~InteractionStarts.html",
    "longname": "@serenity-js/core/lib/events~InteractionStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "SceneBackgroundDetected",
    "externalLink": "/modules/core/class/src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneBackgroundDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "SceneDescriptionDetected",
    "externalLink": "/modules/core/class/src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneDescriptionDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "SceneFinished",
    "externalLink": "/modules/core/class/src/events/SceneFinished.ts~SceneFinished.html",
    "longname": "@serenity-js/core/lib/events~SceneFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "SceneFinishes",
    "externalLink": "/modules/core/class/src/events/SceneFinishes.ts~SceneFinishes.html",
    "longname": "@serenity-js/core/lib/events~SceneFinishes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "SceneParametersDetected",
    "externalLink": "/modules/core/class/src/events/SceneParametersDetected.ts~SceneParametersDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneParametersDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "SceneSequenceDetected",
    "externalLink": "/modules/core/class/src/events/SceneSequenceDetected.ts~SceneSequenceDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneSequenceDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "SceneStarts",
    "externalLink": "/modules/core/class/src/events/SceneStarts.ts~SceneStarts.html",
    "longname": "@serenity-js/core/lib/events~SceneStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "SceneTagged",
    "externalLink": "/modules/core/class/src/events/SceneTagged.ts~SceneTagged.html",
    "longname": "@serenity-js/core/lib/events~SceneTagged",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "SceneTemplateDetected",
    "externalLink": "/modules/core/class/src/events/SceneTemplateDetected.ts~SceneTemplateDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneTemplateDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "TaskFinished",
    "externalLink": "/modules/core/class/src/events/TaskFinished.ts~TaskFinished.html",
    "longname": "@serenity-js/core/lib/events~TaskFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "TaskStarts",
    "externalLink": "/modules/core/class/src/events/TaskStarts.ts~TaskStarts.html",
    "longname": "@serenity-js/core/lib/events~TaskStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "TestRunFinished",
    "externalLink": "/modules/core/class/src/events/TestRunFinished.ts~TestRunFinished.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "TestRunFinishes",
    "externalLink": "/modules/core/class/src/events/TestRunFinishes.ts~TestRunFinishes.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinishes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "TestRunnerDetected",
    "externalLink": "/modules/core/class/src/events/TestRunnerDetected.ts~TestRunnerDetected.html",
    "longname": "@serenity-js/core/lib/events~TestRunnerDetected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "TestSuiteFinished",
    "externalLink": "/modules/core/class/src/events/TestSuiteFinished.ts~TestSuiteFinished.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteFinished",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "TestSuiteStarts",
    "externalLink": "/modules/core/class/src/events/TestSuiteStarts.ts~TestSuiteStarts.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteStarts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "serenity",
    "externalLink": "/modules/core/variable/src/instance.ts~serenity.html",
    "longname": "@serenity-js/core~serenity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "configure",
    "externalLink": "/modules/core/function/src/instance.ts~configure.html",
    "longname": "@serenity-js/core~configure",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "engage",
    "externalLink": "/modules/core/function/src/instance.ts~engage.html",
    "longname": "@serenity-js/core~engage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "actorCalled",
    "externalLink": "/modules/core/function/src/instance.ts~actorCalled.html",
    "longname": "@serenity-js/core~actorCalled",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "actorInTheSpotlight",
    "externalLink": "/modules/core/function/src/instance.ts~actorInTheSpotlight.html",
    "longname": "@serenity-js/core~actorInTheSpotlight",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "AssertionReportDiffer",
    "externalLink": "/modules/core/class/src/io/AssertionReportDiffer.ts~AssertionReportDiffer.html",
    "longname": "@serenity-js/core/lib/io~AssertionReportDiffer",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "SerialisedError",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~SerialisedError.html",
    "longname": "@serenity-js/core/lib/io~SerialisedError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "ErrorSerialiser",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~ErrorSerialiser.html",
    "longname": "@serenity-js/core/lib/io~ErrorSerialiser",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "/modules/core/class/src/io/FileSystem.ts~FileSystem.html",
    "longname": "@serenity-js/core/lib/io~FileSystem",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "FileSystemLocation",
    "externalLink": "/modules/core/class/src/io/FileSystemLocation.ts~FileSystemLocation.html",
    "longname": "@serenity-js/core/lib/io~FileSystemLocation",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "ModuleLoader",
    "externalLink": "/modules/core/class/src/io/ModuleLoader.ts~ModuleLoader.html",
    "longname": "@serenity-js/core/lib/io~ModuleLoader",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "Path",
    "externalLink": "/modules/core/class/src/io/Path.ts~Path.html",
    "longname": "@serenity-js/core/lib/io~Path",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "Version",
    "externalLink": "/modules/core/class/src/io/Version.ts~Version.html",
    "longname": "@serenity-js/core/lib/io~Version",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "formatted",
    "externalLink": "/modules/core/function/src/io/formatted.ts~formatted.html",
    "longname": "@serenity-js/core/lib/io~formatted",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "inspected",
    "externalLink": "/modules/core/function/src/io/inspected.ts~inspected.html",
    "longname": "@serenity-js/core/lib/io~inspected",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "trimmed",
    "externalLink": "/modules/core/function/src/io/trimmed.ts~trimmed.html",
    "longname": "@serenity-js/core/lib/io~trimmed",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "ActivityDetails",
    "externalLink": "/modules/core/class/src/model/ActivityDetails.ts~ActivityDetails.html",
    "longname": "@serenity-js/core/lib/model~ActivityDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "Artifact",
    "externalLink": "/modules/core/class/src/model/Artifact.ts~Artifact.html",
    "longname": "@serenity-js/core/lib/model~Artifact",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "Category",
    "externalLink": "/modules/core/class/src/model/Category.ts~Category.html",
    "longname": "@serenity-js/core/lib/model~Category",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "CorrelationId",
    "externalLink": "/modules/core/class/src/model/CorrelationId.ts~CorrelationId.html",
    "longname": "@serenity-js/core/lib/model~CorrelationId",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "Description",
    "externalLink": "/modules/core/class/src/model/Description.ts~Description.html",
    "longname": "@serenity-js/core/lib/model~Description",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "Duration",
    "externalLink": "/modules/core/class/src/model/Duration.ts~Duration.html",
    "longname": "@serenity-js/core/lib/model~Duration",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "Name",
    "externalLink": "/modules/core/class/src/model/Name.ts~Name.html",
    "longname": "@serenity-js/core/lib/model~Name",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "ScenarioDetails",
    "externalLink": "/modules/core/class/src/model/ScenarioDetails.ts~ScenarioDetails.html",
    "longname": "@serenity-js/core/lib/model~ScenarioDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "ScenarioParameters",
    "externalLink": "/modules/core/class/src/model/ScenarioParameters.ts~ScenarioParameters.html",
    "longname": "@serenity-js/core/lib/model~ScenarioParameters",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "TestSuiteDetails",
    "externalLink": "/modules/core/class/src/model/TestSuiteDetails.ts~TestSuiteDetails.html",
    "longname": "@serenity-js/core/lib/model~TestSuiteDetails",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Timestamp",
    "externalLink": "/modules/core/class/src/model/Timestamp.ts~Timestamp.html",
    "longname": "@serenity-js/core/lib/model~Timestamp",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "AssertionReport",
    "externalLink": "/modules/core/class/src/model/artifacts/AssertionReport.ts~AssertionReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~AssertionReport",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "RequestAndResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~RequestAndResponse",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "HTTPRequestResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~HTTPRequestResponse",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "JSONData",
    "externalLink": "/modules/core/class/src/model/artifacts/JSONData.ts~JSONData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~JSONData",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "LogEntry",
    "externalLink": "/modules/core/class/src/model/artifacts/LogEntry.ts~LogEntry.html",
    "longname": "@serenity-js/core/lib/model/artifacts~LogEntry",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "Photo",
    "externalLink": "/modules/core/class/src/model/artifacts/Photo.ts~Photo.html",
    "longname": "@serenity-js/core/lib/model/artifacts~Photo",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "TestReport",
    "externalLink": "/modules/core/class/src/model/artifacts/TestReport.ts~TestReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TestReport",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "TextData",
    "externalLink": "/modules/core/class/src/model/artifacts/TextData.ts~TextData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TextData",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/core/lib/model~Outcome",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "ProblemIndication",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ProblemIndication.html",
    "longname": "@serenity-js/core/lib/model~ProblemIndication",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "ExecutionCompromised",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionCompromised.html",
    "longname": "@serenity-js/core/lib/model~ExecutionCompromised",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "ExecutionFailedWithError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "ExecutionFailedWithAssertionError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithAssertionError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithAssertionError",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "ImplementationPending",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ImplementationPending.html",
    "longname": "@serenity-js/core/lib/model~ImplementationPending",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "ExecutionIgnored",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionIgnored.html",
    "longname": "@serenity-js/core/lib/model~ExecutionIgnored",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "ExecutionSkipped",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSkipped.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSkipped",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "ExecutionSuccessful",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSuccessful.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSuccessful",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "ArbitraryTag",
    "externalLink": "/modules/core/class/src/model/tags/ArbitraryTag.ts~ArbitraryTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ArbitraryTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "BrowserTag",
    "externalLink": "/modules/core/class/src/model/tags/BrowserTag.ts~BrowserTag.html",
    "longname": "@serenity-js/core/lib/model/tags~BrowserTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "CapabilityTag",
    "externalLink": "/modules/core/class/src/model/tags/CapabilityTag.ts~CapabilityTag.html",
    "longname": "@serenity-js/core/lib/model/tags~CapabilityTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "ContextTag",
    "externalLink": "/modules/core/class/src/model/tags/ContextTag.ts~ContextTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ContextTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "ExecutionRetriedTag",
    "externalLink": "/modules/core/class/src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ExecutionRetriedTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "FeatureTag",
    "externalLink": "/modules/core/class/src/model/tags/FeatureTag.ts~FeatureTag.html",
    "longname": "@serenity-js/core/lib/model/tags~FeatureTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "IssueTag",
    "externalLink": "/modules/core/class/src/model/tags/IssueTag.ts~IssueTag.html",
    "longname": "@serenity-js/core/lib/model/tags~IssueTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "ManualTag",
    "externalLink": "/modules/core/class/src/model/tags/ManualTag.ts~ManualTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ManualTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "PlatformTag",
    "externalLink": "/modules/core/class/src/model/tags/PlatformTag.ts~PlatformTag.html",
    "longname": "@serenity-js/core/lib/model/tags~PlatformTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/core/class/src/model/tags/Tag.ts~Tag.html",
    "longname": "@serenity-js/core/lib/model/tags~Tag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "ThemeTag",
    "externalLink": "/modules/core/class/src/model/tags/ThemeTag.ts~ThemeTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ThemeTag",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "Ability",
    "externalLink": "/modules/core/class/src/screenplay/Ability.ts~Ability.html",
    "longname": "@serenity-js/core/lib/screenplay~Ability",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "AbilityType",
    "externalLink": "/modules/core/class/src/screenplay/AbilityType.ts~AbilityType.html",
    "longname": "@serenity-js/core/lib/screenplay~AbilityType",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Activity",
    "externalLink": "/modules/core/class/src/screenplay/Activity.ts~Activity.html",
    "longname": "@serenity-js/core/lib/screenplay~Activity",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "Discardable",
    "externalLink": "/modules/core/class/src/screenplay/Discardable.ts~Discardable.html",
    "longname": "@serenity-js/core/lib/screenplay~Discardable",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "Interaction",
    "externalLink": "/modules/core/class/src/screenplay/Interaction.ts~Interaction.html",
    "longname": "@serenity-js/core/lib/screenplay~Interaction",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "Question",
    "externalLink": "/modules/core/class/src/screenplay/Question.ts~Question.html",
    "longname": "@serenity-js/core/lib/screenplay~Question",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "Task",
    "externalLink": "/modules/core/class/src/screenplay/Task.ts~Task.html",
    "longname": "@serenity-js/core/lib/screenplay~Task",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "TakeNotes",
    "externalLink": "/modules/core/class/src/screenplay/abilities/TakeNotes.ts~TakeNotes.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~TakeNotes",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "Actor",
    "externalLink": "/modules/core/class/src/screenplay/actor/Actor.ts~Actor.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~Actor",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "AnswersQuestions",
    "externalLink": "/modules/core/class/src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~AnswersQuestions",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "CanHaveAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CanHaveAbilities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "CollectsArtifacts",
    "externalLink": "/modules/core/class/src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CollectsArtifacts",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "ListensToDomainEvents",
    "externalLink": "/modules/core/class/src/screenplay/actor/ListensToDomainEvents.ts~ListensToDomainEvents.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~ListensToDomainEvents",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "PerformsActivities",
    "externalLink": "/modules/core/class/src/screenplay/actor/PerformsActivities.ts~PerformsActivities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~PerformsActivities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "UsesAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/UsesAbilities.ts~UsesAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~UsesAbilities",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "Log",
    "externalLink": "/modules/core/class/src/screenplay/interactions/Log.ts~Log.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~Log",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "See",
    "externalLink": "/modules/core/class/src/screenplay/interactions/See.ts~See.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~See",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "TakeNote",
    "externalLink": "/modules/core/class/src/screenplay/interactions/TakeNote.ts~TakeNote.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~TakeNote",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "Note",
    "externalLink": "/modules/core/class/src/screenplay/questions/Note.ts~Note.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Note",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Transform",
    "externalLink": "/modules/core/class/src/screenplay/questions/Transform.ts~Transform.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Transform",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "Cast",
    "externalLink": "/modules/core/class/src/stage/Cast.ts~Cast.html",
    "longname": "@serenity-js/core/lib/stage~Cast",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "Clock",
    "externalLink": "/modules/core/class/src/stage/Clock.ts~Clock.html",
    "longname": "@serenity-js/core/lib/stage~Clock",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "DressingRoom",
    "externalLink": "/modules/core/class/src/stage/DressingRoom.ts~DressingRoom.html",
    "longname": "@serenity-js/core/lib/stage~DressingRoom",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "Stage",
    "externalLink": "/modules/core/class/src/stage/Stage.ts~Stage.html",
    "longname": "@serenity-js/core/lib/stage~Stage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "StageCrewMember",
    "externalLink": "/modules/core/class/src/stage/StageCrewMember.ts~StageCrewMember.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMember",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "StageManager",
    "externalLink": "/modules/core/class/src/stage/StageManager.ts~StageManager.html",
    "longname": "@serenity-js/core/lib/stage~StageManager",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "WithStage",
    "externalLink": "/modules/core/class/src/stage/WithStage.ts~WithStage.html",
    "longname": "@serenity-js/core/lib/stage~WithStage",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "ArtifactArchiver",
    "externalLink": "/modules/core/class/src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.html",
    "longname": "@serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "StreamReporter",
    "externalLink": "/modules/core/class/src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter.html",
    "longname": "@serenity-js/core/lib/stage/crew/stream-reporter~StreamReporter",
    "memberof": "src/.imports-from-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "name": "CucumberConfig",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberConfig",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "AmbiguousStepDefinitionError",
    "externalLink": "/modules/cucumber/class/src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError.html",
    "longname": "@serenity-js/cucumber/lib/errors~AmbiguousStepDefinitionError",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "ASTNode",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/ASTNode.ts~ASTNode.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~ASTNode",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "Background",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Background.ts~Background.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Background",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "Comment",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Comment.ts~Comment.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Comment",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "DataTable",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/DataTable.ts~DataTable.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~DataTable",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "DocString",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/DocString.ts~DocString.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~DocString",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "Examples",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Examples.ts~Examples.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Examples",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "Feature",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Feature.ts~Feature.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Feature",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "GherkinDocument",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/GherkinDocument.ts~GherkinDocument.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~GherkinDocument",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "name": "Location",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Location.ts~Location.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Location",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "Scenario",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Scenario.ts~Scenario.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Scenario",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "ScenarioDefinition",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/ScenarioDefinition.ts~ScenarioDefinition.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~ScenarioDefinition",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "name": "ScenarioOutline",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/ScenarioOutline.ts~ScenarioOutline.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~ScenarioOutline",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "name": "Step",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Step.ts~Step.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Step",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "name": "StepArgument",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/StepArgument.ts~StepArgument.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~StepArgument",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "name": "TableCell",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/TableCell.ts~TableCell.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~TableCell",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "name": "TableRow",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/TableRow.ts~TableRow.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~TableRow",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/cucumber/class/src/gherkin/nodes/Tag.ts~Tag.html",
    "longname": "@serenity-js/cucumber/lib/gherkin/nodes~Tag",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "name": "listenerForCucumber",
    "externalLink": "/modules/cucumber/function/src/listeners/index.ts~listenerForCucumber.html",
    "longname": "@serenity-js/cucumber/lib/listeners~listenerForCucumber",
    "memberof": "src/.imports-from-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "name": "SerenityReporterForJasmine",
    "externalLink": "/modules/jasmine/class/src/SerenityReporterForJasmine.ts~SerenityReporterForJasmine.html",
    "longname": "@serenity-js/jasmine~SerenityReporterForJasmine",
    "memberof": "src/.imports-from-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "name": "JasmineAdapter",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineAdapter.ts~JasmineAdapter.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineAdapter",
    "memberof": "src/.imports-from-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "name": "JasmineConfig",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineConfig",
    "memberof": "src/.imports-from-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "name": "bootstrap",
    "externalLink": "/modules/jasmine/function/src/bootstrap.ts~bootstrap.html",
    "longname": "@serenity-js/jasmine~bootstrap",
    "memberof": "src/.imports-from-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "name": "monkeyPatched",
    "externalLink": "/modules/jasmine/function/src/monkeyPatched.ts~monkeyPatched.html",
    "longname": "@serenity-js/jasmine~monkeyPatched",
    "memberof": "src/.imports-from-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "name": "ManageALocalServer",
    "externalLink": "/modules/local/class/src/screenplay/abilities/ManageALocalServer.ts~ManageALocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/abilities~ManageALocalServer",
    "memberof": "src/.imports-from-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "name": "StartLocalServer",
    "externalLink": "/modules/local/class/src/screenplay/interactions/StartLocalServer.ts~StartLocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/interactions~StartLocalServer",
    "memberof": "src/.imports-from-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "name": "StopLocalServer",
    "externalLink": "/modules/local/class/src/screenplay/interactions/StopLocalServer.ts~StopLocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/interactions~StopLocalServer",
    "memberof": "src/.imports-from-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "name": "LocalServer",
    "externalLink": "/modules/local/class/src/screenplay/questions/LocalServer.ts~LocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/questions~LocalServer",
    "memberof": "src/.imports-from-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "name": "MochaConfig",
    "externalLink": "/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html",
    "longname": "@serenity-js/mocha/lib/adapter~MochaConfig",
    "memberof": "src/.imports-from-mocha.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/adapter/Config.ts",
    "content": "import { SerenityConfig } from '@serenity-js/core';\nimport { Config as ProtractorConfig } from 'protractor';\n\n/**\n * @desc\n *  Protractor configuration object with an additional\n *  section to configure the Serenity/JS framework.\n *\n * @public\n * @interface\n *\n * @see {@link @serenity-js/core~SerenityConfig}\n *\n * @see https://github.com/angular/protractor/blob/master/lib/config.ts\n * @see {@link @serenity-js/core~configure}\n */\nexport interface Config extends ProtractorConfig {\n    serenity: SerenityConfig & { runner?: string };\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/Config.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "Config",
    "memberof": "src/adapter/Config.ts",
    "static": true,
    "longname": "src/adapter/Config.ts~Config",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter",
    "importStyle": "{Config}",
    "description": " Protractor configuration object with an additional\n section to configure the Serenity/JS framework.",
    "see": [
      "{@link @serenity-js/core~SerenityConfig}",
      "https://github.com/angular/protractor/blob/master/lib/config.ts",
      "{@link @serenity-js/core~configure}"
    ],
    "lineNumber": 24,
    "interface": true,
    "extends": [
      "protractor~ProtractorConfig"
    ]
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "serenity",
    "memberof": "src/adapter/Config.ts~Config",
    "static": false,
    "longname": "src/adapter/Config.ts~Config#serenity",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "SerenityConfig & undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/adapter/ProtractorFrameworkAdapter.ts",
    "content": "import { ArtifactArchiver, Serenity } from '@serenity-js/core';\n\nimport deepmerge = require('deepmerge');\nconst isPlainObject = require('is-plain-object');   // tslint:disable-line:no-var-requires fails when using default import\n\nimport { protractor, Runner } from 'protractor';\nimport { BrowserDetector, StandardisedCapabilities } from './browser-detector';\n\nimport { Config } from './Config';\nimport { ProtractorReport, ProtractorReporter } from './reporter';\nimport { TestRunnerDetector } from './TestRunnerDetector';\n\n/**\n * @private\n */\nexport class ProtractorFrameworkAdapter {\n    constructor(\n        private readonly serenity: Serenity,\n        private readonly protractorRunner: Runner,\n        private readonly detector: TestRunnerDetector,\n    ) {\n    }\n\n    /**\n     * @param {string[]} specs\n     *  Paths to spec files\n     *\n     * @return {Promise<ProtractorReport>}\n     */\n    run(specs: string[]): Promise<ProtractorReport> {\n\n        const noop      = () => void 0;\n        const config    = deepmerge<Config>(this.defaultConfig(), this.protractorRunner.getConfig(), {\n            isMergeableObject: isPlainObject,\n        });\n\n        const runner    = this.detector.runnerFor(config);\n        const reporter  = new ProtractorReporter(this.protractorRunner);\n\n        this.serenity.configure({\n            cueTimeout:     config.serenity.cueTimeout,\n            actors:         config.serenity.actors,\n            crew:           [\n                BrowserDetector.with(StandardisedCapabilities.of(() => protractor.browser)),\n                ...config.serenity.crew,\n                reporter,\n            ],\n        });\n\n        return Promise.resolve()\n            .then(() => this.protractorRunner.runTestPreparer(TestRunnerDetector.protractorCliOptions()))\n            .then(() => runner.run(specs))\n            .then(() => Promise.resolve((config.onComplete || noop)()))\n            .then(() => reporter.report());\n    }\n\n    private defaultConfig(): Config {\n        return {\n            serenity: {\n                crew: [\n                    ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),\n                ],\n            },\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/ProtractorFrameworkAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "isPlainObject",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts",
    "static": true,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~isPlainObject",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/adapter/ProtractorFrameworkAdapter.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "ProtractorFrameworkAdapter",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts",
    "static": true,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/ProtractorFrameworkAdapter.ts",
    "importStyle": "{ProtractorFrameworkAdapter}",
    "description": "",
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#run",
    "access": "public",
    "description": "",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": "Paths to spec files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ProtractorReport>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "defaultConfig",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#defaultConfig",
    "access": "private",
    "description": " ",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/adapter/TestRunnerDetector.ts",
    "content": "import { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { Config } from 'protractor';\n\nimport { TestRunner } from './runners/TestRunner';\n\n/**\n * @private\n */\nexport class TestRunnerDetector {\n\n    static protractorCliOptions() {\n        return [\n            'cucumberOpts',\n            'jasmineNodeOpts',\n            'mochaOpts',\n        ];\n    }\n\n    constructor(private readonly loader: ModuleLoader) {\n    }\n\n    // todo: when invoking, merge config\n    //      Object.assign(\n    //          {},\n    //          config.cucumberOpts,\n    //          config.capabilities.cucumberOpts\n    //      )\n    runnerFor(config: Config): TestRunner {\n\n        // todo: simplify and introduce a config object with \"as(String)\", \"as(Object)\", etc. to avoid issues with undefined\n        // todo: and config merge too, using on deepmerge\n\n        const\n            specifiesRunnerFor = (type: string) =>\n                !!config.serenity &&\n                !!config.serenity.runner &&\n                config.serenity.runner === type;\n\n        switch (true) {\n            case specifiesRunnerFor('cucumber'):\n                return this.useCucumber(config);\n            case specifiesRunnerFor('jasmine'):\n                return this.useJasmine(config);\n            case specifiesRunnerFor('mocha'):\n                return this.useMocha(config);\n            case !! config.cucumberOpts:\n                return this.useCucumber(config);\n            case !! config.mochaOpts:\n                return this.useMocha(config);\n            case !! config.jasmineNodeOpts:\n            default:\n                return this.useJasmine(config);\n        }\n    }\n\n    private useCucumber(config: Config): TestRunner {\n        const { CucumberTestRunner } = require('./runners/CucumberTestRunner');\n        return new CucumberTestRunner(config.cucumberOpts || {}, this.loader);\n    }\n\n    private useJasmine(config: Config): TestRunner {\n        const { JasmineTestRunner } = require('./runners/JasmineTestRunner');\n        return new JasmineTestRunner(config.jasmineNodeOpts, this.loader);\n    }\n\n    private useMocha(config: Config): TestRunner {\n        const { MochaTestRunner } = require('./runners/MochaTestRunner');\n        return new MochaTestRunner(config.mochaOpts, this.loader);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/TestRunnerDetector.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "TestRunnerDetector",
    "memberof": "src/adapter/TestRunnerDetector.ts",
    "static": true,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/TestRunnerDetector.ts",
    "importStyle": "{TestRunnerDetector}",
    "description": "",
    "lineNumber": 16,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "protractorCliOptions",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector.protractorCliOptions",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [],
    "return": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "runnerFor",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector#runnerFor",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunner"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "useCucumber",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector#useCucumber",
    "access": "private",
    "description": " ",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunner"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "useJasmine",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector#useJasmine",
    "access": "private",
    "description": " ",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunner"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "useMocha",
    "memberof": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerDetector.ts~TestRunnerDetector#useMocha",
    "access": "private",
    "description": " ",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunner"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/adapter/browser-detector/BrowserDetector.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport { AsyncOperationAttempted, AsyncOperationCompleted, DomainEvent, SceneStarts, SceneTagged } from '@serenity-js/core/lib/events';\nimport { BrowserTag, CorrelationId, Description, PlatformTag } from '@serenity-js/core/lib/model';\nimport { StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { platform } from 'os';\nimport { protractor } from 'protractor';\nimport { StandardisedCapabilities } from './StandardisedCapabilities';\n\n/**\n * @private\n *\n * @see https://github.com/serenity-js/serenity-js/issues/455\n * @see https://github.com/serenity-bdd/serenity-core/pull/1860/files\n * @see https://github.com/serenity-js/serenity-js/issues/132\n */\nexport class BrowserDetector implements StageCrewMember {\n\n    static with(capabilities: StandardisedCapabilities) {\n        return new BrowserDetector(capabilities);\n    }\n\n    constructor(\n        private readonly capabilities: StandardisedCapabilities,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        return new BrowserDetector(this.capabilities, stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            const id = CorrelationId.create();\n\n            this.stage.announce(new AsyncOperationAttempted(\n                new Description(`[${ this.constructor.name }] Detecting web browser details...`),\n                id,\n                this.stage.currentTime(),\n            ));\n\n            Promise.all([\n                this.capabilities.browserName(),\n                this.capabilities.browserVersion(),\n                this.capabilities.platformName(),\n                this.capabilities.platformVersion(),\n            ]).\n            then(([browserName, browserVersion, platformName, platformVersion]) => {\n\n                this.stage.announce(new SceneTagged(\n                    event.value,\n                    new BrowserTag(browserName, browserVersion),\n                    this.stage.currentTime(),\n                ));\n\n                this.stage.announce(new SceneTagged(\n                    event.value,\n                    new PlatformTag(platformName, platformVersion),\n                    this.stage.currentTime(),\n                ));\n\n                this.stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Detected web browser details`),\n                    id,\n                    this.stage.currentTime(),\n                ));\n            });\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/BrowserDetector.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "BrowserDetector",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts",
    "static": true,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/browser-detector/BrowserDetector.ts",
    "importStyle": "{BrowserDetector}",
    "description": "",
    "see": [
      "https://github.com/serenity-js/serenity-js/issues/455",
      "https://github.com/serenity-bdd/serenity-core/pull/1860/files",
      "https://github.com/serenity-js/serenity-js/issues/132"
    ],
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "with",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector.with",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "StandardisedCapabilities"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/adapter/browser-detector/StandardisedCapabilities.ts",
    "content": "import { Capabilities, ProtractorBrowser } from 'protractor';\n\n/**\n * @private\n */\nexport class StandardisedCapabilities {\n    static of(currentBrowser: () => ProtractorBrowser) {\n        return new StandardisedCapabilities(currentBrowser);\n    }\n\n    constructor(private currentBrowser: () => ProtractorBrowser) {\n    }\n\n    browserName(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('browserName'),\n        );\n    }\n\n    browserVersion(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('version'),\n            caps => caps.get('browserVersion'),\n            caps => caps.has('deviceManufacturer') && caps.has('deviceModel')\n                ? `${ caps.get('deviceManufacturer') } ${ caps.get('deviceModel') }`\n                : undefined,\n            caps => caps.has('mobile') && caps.get('mobile').version,\n        ).\n        then(version =>\n            this.get(\n                caps => !! caps.get('mobileEmulationEnabled') && '(mobile emulation)',\n            ).then(suffix =>\n                [\n                    version,\n                    suffix,\n                ].filter(_ => !!_).join(' '),\n            ),\n        );\n    }\n\n    platformName(): PromiseLike<string> {\n        return this.get(\n            caps => (!! caps.get('platformName') && ! /any/i.test(caps.get('platformName')))\n                ? caps.get('platformName')\n                : caps.get('platform'),\n        );\n    }\n\n    platformVersion(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('platformVersion'),\n        );\n    }\n\n    private get(...fetchers: Array<(capabilities: Capabilities) => string>): PromiseLike<string> {\n        return this.currentBrowser().getCapabilities().then(caps => {\n            for (const fetcher of fetchers) {\n                const result = fetcher(caps);\n                if (!! result) {\n                    return result;\n                }\n            }\n            return undefined;\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/StandardisedCapabilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "StandardisedCapabilities",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts",
    "static": true,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/browser-detector/StandardisedCapabilities.ts",
    "importStyle": "{StandardisedCapabilities}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "of",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities.of",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "currentBrowser",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "browserName",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#browserName",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "browserVersion",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#browserVersion",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "platformName",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#platformName",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "platformVersion",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#platformVersion",
    "access": "public",
    "description": " ",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "get",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#get",
    "access": "private",
    "description": " ",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fetchers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/adapter/browser-detector/index.ts",
    "content": "export * from './BrowserDetector';\nexport * from './StandardisedCapabilities';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/adapter/index.ts",
    "content": "export * from './ProtractorFrameworkAdapter';\nexport * from './run';\nexport * from './TestRunnerDetector';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/adapter/reporter/ProtractorReport.ts",
    "content": "import { SpecResult } from 'protractor/built/plugins';              // tslint:disable-line:no-submodule-imports\n\n/**\n * @desc\n *  A JSON object which needs to be returned to Protractor when {@link ProtractorFrameworkAdapter}\n *  is done with executing the test scenarios.\n *\n * @see https://github.com/angular/protractor/blob/master/lib/frameworks/README.md\n *\n * @private\n */\nexport interface ProtractorReport {\n    /**\n     * Total number of failed scenarios\n     */\n    failedCount: number;\n\n    /**\n     * Results per scenario\n     *\n     * Note: duration is not part of the SpecResult, but is being used by the Jasmine reporter\n     * https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L32\n     */\n    specResults: Array<SpecResult & { duration: number }>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/ProtractorReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "ProtractorReport",
    "memberof": "src/adapter/reporter/ProtractorReport.ts",
    "static": true,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/reporter/ProtractorReport.ts",
    "importStyle": "{ProtractorReport}",
    "description": " A JSON object which needs to be returned to Protractor when {@link ProtractorFrameworkAdapter}\n is done with executing the test scenarios.",
    "see": [
      "https://github.com/angular/protractor/blob/master/lib/frameworks/README.md"
    ],
    "lineNumber": 19,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "failedCount",
    "memberof": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport#failedCount",
    "access": "public",
    "description": "Total number of failed scenarios ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "specResults",
    "memberof": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport#specResults",
    "access": "public",
    "description": "Results per scenario\n\nNote: duration is not part of the SpecResult, but is being used by the Jasmine reporter\nhttps://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L32 ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/adapter/reporter/ProtractorReporter.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent, SceneFinished, SceneFinishes, SceneStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Description, ExecutionSuccessful, ProblemIndication, Timestamp } from '@serenity-js/core/lib/model';\nimport { StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { Runner } from 'protractor';\nimport { ProtractorReport } from './ProtractorReport';\n\n/**\n * @private\n */\nexport class ProtractorReporter implements StageCrewMember {\n    private readonly startTime: { [key: string ]: Timestamp } = {};\n\n    constructor(\n        private readonly runner: Runner,\n        private readonly reported: ProtractorReport = { failedCount: 0, specResults: [] },\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        return new ProtractorReporter(this.runner, this.reported, stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            this.recordStart(event);\n        }\n\n        else if (event instanceof SceneFinishes) {\n            this.afterEach();\n        }\n\n        else if (event instanceof SceneFinished && event.outcome instanceof ExecutionSuccessful) {\n            this.recordSuccess(event);\n\n            this.runner.emit('testPass', {\n                name:       event.value.name.value,\n                category:   event.value.category.value,\n            });\n        }\n\n        else if (event instanceof SceneFinished && event.outcome instanceof ProblemIndication) {\n            this.recordFailure(event);\n\n            this.runner.emit('testFail', {\n                name:       event.value.name.value,\n                category:   event.value.category.value,\n            });\n        }\n    }\n\n    report(): ProtractorReport {\n        return this.reported;\n    }\n\n    private recordFailure(event: SceneFinished) {\n        const outcome = (event.outcome as ProblemIndication);\n\n        this.reported.failedCount++;\n\n        this.reported.specResults.push({\n            description: `${ event.value.category.value } ${ event.value.name.value }`,\n            duration: event.timestamp.diff(this.startTime[event.value.toString()]).inMilliseconds(),\n            assertions: [{\n                passed: false,\n                errorMsg: outcome.error.message,\n                stackTrace: outcome.error.stack,\n            }],\n        });\n    }\n\n    private recordStart(event: SceneStarts) {\n        this.startTime[event.value.toString()] = event.timestamp;\n    }\n\n    private recordSuccess(event: SceneFinished) {\n        this.reported.specResults.push({\n            description: `${ event.value.category.value } ${ event.value.name.value }`,\n            duration: event.timestamp.diff(this.startTime[event.value.toString()]).inMilliseconds(),\n            assertions: [{\n                passed: true,\n            }],\n        });\n    }\n\n    private afterEach(): PromiseLike<void> {\n        if (! this.runner.afterEach) {\n            return Promise.resolve();\n        }\n\n        const id = CorrelationId.create();\n\n        this.stage.announce(new AsyncOperationAttempted(\n            new Description(`[${ this.constructor.name }] Invoking ProtractorRunner.afterEach...`),\n            id,\n            this.stage.currentTime(),\n        ));\n\n        return Promise.resolve(this.runner.afterEach() as PromiseLike<void> | undefined)\n            .then(\n                () =>\n                    this.stage.announce(new AsyncOperationCompleted(\n                        new Description(`[${ this.constructor.name }] ProtractorRunner.afterEach succeeded`),\n                        id,\n                        this.stage.currentTime(),\n                    )),\n                error =>\n                    this.stage.announce(new AsyncOperationFailed(error, id, this.stage.currentTime())),\n            );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/ProtractorReporter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "ProtractorReporter",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts",
    "static": true,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/reporter/ProtractorReporter.ts",
    "importStyle": "{ProtractorReporter}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#startTime",
    "access": "private",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "report",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#report",
    "access": "public",
    "description": " ",
    "lineNumber": 53,
    "return": {
      "nullable": null,
      "types": [
        "ProtractorReport"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "recordFailure",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordFailure",
    "access": "private",
    "description": " ",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "recordStart",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordStart",
    "access": "private",
    "description": " ",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "recordSuccess",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordSuccess",
    "access": "private",
    "description": " ",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "afterEach",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#afterEach",
    "access": "private",
    "description": " ",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/adapter/reporter/index.ts",
    "content": "export * from './ProtractorReport';\nexport * from './ProtractorReporter';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/adapter/run.ts",
    "content": "/* istanbul ignore file */\n\nimport { serenity } from '@serenity-js/core';\nimport { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { Runner } from 'protractor';\nimport { ProtractorFrameworkAdapter } from './ProtractorFrameworkAdapter';\nimport { ProtractorReport } from './reporter';\nimport { TestRunnerDetector } from './TestRunnerDetector';\n\n/**\n * @param {protractor~Runner} runner\n * @param {string[]} specs\n * @returns {Promise<ProtractorReport>}\n *\n * @see https://github.com/angular/protractor/blob/master/lib/frameworks/README.md#framework-adapters-for-protractor\n */\nexport function run(runner: Runner, specs: string[]): Promise<ProtractorReport> {\n    return new ProtractorFrameworkAdapter(\n        serenity,\n        runner,\n        new TestRunnerDetector(new ModuleLoader(process.cwd())),\n    ).run(specs);\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/run.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "run",
    "memberof": "src/adapter/run.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/run.ts~run",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter",
    "importStyle": "{run}",
    "description": "",
    "see": [
      "https://github.com/angular/protractor/blob/master/lib/frameworks/README.md#framework-adapters-for-protractor"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<ProtractorReport>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Runner"
        ],
        "spread": false,
        "optional": false,
        "name": "runner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ProtractorReport>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/adapter/runners/CucumberTestRunner.ts",
    "content": "import { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { CucumberCLIAdapter, CucumberConfig } from '@serenity-js/cucumber/lib/cli';     // tslint:disable-line:no-submodule-imports\nimport { TestRunner } from './TestRunner';\n\n/**\n * @private\n */\nexport class CucumberTestRunner implements TestRunner {\n    constructor(\n        private readonly config: CucumberConfig,\n        private readonly loader: ModuleLoader,\n    ) {\n    }\n\n    run(pathsToScenarios: string[]): Promise<void> {\n        return new CucumberCLIAdapter(this.config, this.loader).run(pathsToScenarios);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/runners/CucumberTestRunner.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "CucumberTestRunner",
    "memberof": "src/adapter/runners/CucumberTestRunner.ts",
    "static": true,
    "longname": "src/adapter/runners/CucumberTestRunner.ts~CucumberTestRunner",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/runners/CucumberTestRunner.ts",
    "importStyle": "{CucumberTestRunner}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/runners/CucumberTestRunner.ts~CucumberTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/CucumberTestRunner.ts~CucumberTestRunner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/runners/CucumberTestRunner.ts~CucumberTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/CucumberTestRunner.ts~CucumberTestRunner#run",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/adapter/runners/JasmineTestRunner.ts",
    "content": "import { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { JasmineAdapter, JasmineConfig } from '@serenity-js/jasmine/lib/adapter';     // tslint:disable-line:no-submodule-imports\nimport { TestRunner } from './TestRunner';\n\n/**\n * @private\n */\nexport class JasmineTestRunner implements TestRunner {\n    constructor(\n        private readonly config: JasmineConfig,\n        private readonly loader: ModuleLoader,\n    ) {\n    }\n\n    run(pathsToScenarios: string[]): Promise<void> {\n        return new JasmineAdapter(this.config, this.loader).run(pathsToScenarios);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/runners/JasmineTestRunner.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "JasmineTestRunner",
    "memberof": "src/adapter/runners/JasmineTestRunner.ts",
    "static": true,
    "longname": "src/adapter/runners/JasmineTestRunner.ts~JasmineTestRunner",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/runners/JasmineTestRunner.ts",
    "importStyle": "{JasmineTestRunner}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/runners/JasmineTestRunner.ts~JasmineTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/JasmineTestRunner.ts~JasmineTestRunner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/runners/JasmineTestRunner.ts~JasmineTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/JasmineTestRunner.ts~JasmineTestRunner#run",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/adapter/runners/MochaTestRunner.ts",
    "content": "import { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { MochaAdapter, MochaConfig } from '@serenity-js/mocha/lib/adapter';     // tslint:disable-line:no-submodule-imports\nimport { TestRunner } from './TestRunner';\n\n/**\n * @private\n */\nexport class MochaTestRunner implements TestRunner {\n    constructor(\n        private readonly config: MochaConfig,\n        private readonly loader: ModuleLoader,\n    ) {\n    }\n\n    run(pathsToScenarios: string[]): Promise<void> {\n        return new MochaAdapter(this.config, this.loader).run(pathsToScenarios);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/runners/MochaTestRunner.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "MochaTestRunner",
    "memberof": "src/adapter/runners/MochaTestRunner.ts",
    "static": true,
    "longname": "src/adapter/runners/MochaTestRunner.ts~MochaTestRunner",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/runners/MochaTestRunner.ts",
    "importStyle": "{MochaTestRunner}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/runners/MochaTestRunner.ts~MochaTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/MochaTestRunner.ts~MochaTestRunner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/runners/MochaTestRunner.ts~MochaTestRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runners/MochaTestRunner.ts~MochaTestRunner#run",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/adapter/runners/TestRunner.ts",
    "content": "export interface TestRunner {\n    run(pathsToScenarios: string[]): Promise<void>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/adapter/runners/TestRunner.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "src/expectations/ElementFinderExpectation.ts",
    "content": "import { Expectation, ExpectationMet, ExpectationNotMet, Outcome } from '@serenity-js/assertions';\nimport { AnswersQuestions } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { promiseOf } from '../promiseOf';\n\n/**\n * @access private\n */\nexport class ElementFinderExpectation extends Expectation<any, ElementFinder> {\n    static forElementTo(message: string, fn: (actual: ElementFinder) => PromiseLike<boolean>): Expectation<any, ElementFinder> {\n        return new ElementFinderExpectation(message, fn);\n    }\n\n    constructor(\n        private readonly message: string,\n        private readonly fn: (actual: ElementFinder) => PromiseLike<boolean>,\n    ) {\n        super();\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: ElementFinder) => Promise<Outcome<boolean, ElementFinder>> {\n\n        return (actual: ElementFinder) =>\n            promiseOf(this.fn(actual)).then(_ => _\n                ? new ExpectationMet(this.toString(), null, actual)\n                : new ExpectationNotMet(this.toString(), null, actual),\n            );\n    }\n\n    toString(): string {\n        return this.message;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/ElementFinderExpectation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "class",
    "name": "ElementFinderExpectation",
    "memberof": "src/expectations/ElementFinderExpectation.ts",
    "static": true,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/expectations/ElementFinderExpectation.ts",
    "importStyle": "{ElementFinderExpectation}",
    "description": "",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "@serenity-js/assertions~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "forElementTo",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation.forElementTo",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "toString",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/expectations/index.ts",
    "content": "export * from './isActive';\nexport * from './isClickable';\nexport * from './isEnabled';\nexport * from './isPresent';\nexport * from './isSelected';\nexport * from './isVisible';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/expectations/isActive.ts",
    "content": "import { Expectation } from '@serenity-js/assertions';\nimport { ElementFinder, WebElement } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is active.\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isActive(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become active', (actual: ElementFinder) =>\n        actual.getWebElement().then(element =>\n            element.getDriver().switchTo().activeElement().then((active: WebElement) =>\n                actual.equals(active),\n            ),\n        ),\n    );\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isActive.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "isActive",
    "memberof": "src/expectations/isActive.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isActive.ts~isActive",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isActive}",
    "description": " Expectation that the element is active.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "src/expectations/isClickable.ts",
    "content": "import { and, Expectation } from '@serenity-js/assertions';\nimport { ElementFinder } from 'protractor';\nimport { isEnabled } from './isEnabled';\nimport { isVisible } from './isVisible';\n\n/**\n * @desc\n *  Expectation that the element is visible and enabled, and therefore clickable\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isClickable(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become clickable').soThatActual(and(isVisible(), isEnabled()));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isClickable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isClickable",
    "memberof": "src/expectations/isClickable.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isClickable.ts~isClickable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isClickable}",
    "description": " Expectation that the element is visible and enabled, and therefore clickable",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "src/expectations/isEnabled.ts",
    "content": "import { Expectation } from '@serenity-js/assertions';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is enabled.\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isEnabled(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become enabled', actual => actual.isEnabled());\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isEnabled.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "isEnabled",
    "memberof": "src/expectations/isEnabled.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isEnabled.ts~isEnabled",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isEnabled}",
    "description": " Expectation that the element is enabled.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/expectations/isPresent.ts",
    "content": "import { Expectation } from '@serenity-js/assertions';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of a page.\n *  Please note that this does not necessarily mean that the element is visible.\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isPresent(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become present', actual => actual.isPresent());\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isPresent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "isPresent",
    "memberof": "src/expectations/isPresent.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isPresent.ts~isPresent",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isPresent}",
    "description": " Expectation that the element is present in the DOM of a page.\n Please note that this does not necessarily mean that the element is visible.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/expectations/isSelected.ts",
    "content": "import { and, Expectation } from '@serenity-js/assertions';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\nimport { isPresent } from './isPresent';\n\n/**\n * @desc\n *  Expectation that the element is present and selected\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isSelected(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become selected').soThatActual(and(\n        isPresent(),\n        ElementFinderExpectation.forElementTo('become selected', actual => actual.isSelected()),\n    ));\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isSelected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "isSelected",
    "memberof": "src/expectations/isSelected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isSelected.ts~isSelected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isSelected}",
    "description": " Expectation that the element is present and selected",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "src/expectations/isVisible.ts",
    "content": "import { and, Expectation } from '@serenity-js/assertions';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\nimport { isPresent } from './isPresent';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of the page and visible.\n *\n * @returns {Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isVisible(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become visible').soThatActual(and(\n        isPresent(),\n        isDisplayed(),\n    ));\n}\n\nfunction isDisplayed(): Expectation<any, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become displayed', actual => actual.isDisplayed());\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/expectations/isVisible.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "isVisible",
    "memberof": "src/expectations/isVisible.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isVisible.ts~isVisible",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isVisible}",
    "description": " Expectation that the element is present in the DOM of the page and visible.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "isDisplayed",
    "memberof": "src/expectations/isVisible.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isVisible.ts~isDisplayed",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/expectations/isVisible.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 23,
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './expectations';\nexport * from './screenplay';\nexport * from './stage';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "src/promiseOf.ts",
    "content": "/**\n * @desc\n *  Wraps Webdriver promise into a Node-native promise to allow for correct promise chaining.\n *\n * @private\n *\n * @param promiseLike\n * @returns {Promise<T>}\n */\nexport function promiseOf<T>(promiseLike: PromiseLike<T>): Promise<T> {\n    return new Promise((resolve, reject) => {\n        promiseLike.then(resolve, reject);\n    });\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/promiseOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "promiseOf",
    "memberof": "src/promiseOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/promiseOf.ts~promiseOf",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/promiseOf.ts",
    "importStyle": "{promiseOf}",
    "description": " Wraps Webdriver promise into a Node-native promise to allow for correct promise chaining.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "promiseLike",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<T>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "src/screenplay/abilities/BrowseTheWeb.ts",
    "content": "import { Ability, LogicError, UsesAbilities } from '@serenity-js/core';\nimport { ActionSequence, ElementArrayFinder, ElementFinder, Locator, protractor, ProtractorBrowser } from 'protractor';\nimport { Capabilities, Navigation, Options } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\n\n/**\n * @desc\n *  An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link Actor} to interact with web front-ends using {@link protractor}.\n *\n * @example <caption>Using the protractor.browser</caption>\n * import { Actor } from '@serenity-js/core';\n * import { BrowseTheWeb, Navigate, Target } from '@serenity-js/protractor'\n * import { Ensure, equals } from '@serenity-js/assertions';\n * import { by, protractor } from 'protractor';\n *\n * const actor = Actor.named('Wendy').whoCan(\n *     BrowseTheWeb.using(protractor.browser),\n * );\n *\n * const HomePage = {\n *     Title: Target.the('title').located(by.css('h1')),\n * };\n *\n * actor.attemptsTo(\n *     Navigate.to(`https://serenity-js.org`),\n *     Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n * );\n *\n * @see https://www.protractortest.org/\n *\n * @public\n * @implements {@link @serenity-js/core/lib/screenplay~Ability}\n * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n */\nexport class BrowseTheWeb implements Ability {\n\n    /**\n     * @private\n     */\n    private lastScriptExecutionSummary: LastScriptExecutionSummary;\n\n    /**\n     * @desc\n     *  Ability to interact with web front-ends using a given protractor browser instance.\n     *\n     * @param {ProtractorBrowser} browser\n     * @returns {BrowseTheWeb}\n     */\n    static using(browser: ProtractorBrowser): BrowseTheWeb {\n        return new BrowseTheWeb(browser);\n    }\n\n    /**\n     * @desc\n     *  Used to access the Actor's ability to {@link BrowseTheWeb} from within the {@link Interaction} classes,\n     *  such as {@link Navigate}.\n     *\n     * @param {UsesAbilities} actor\n     * @return {BrowseTheWeb}\n     */\n    static as(actor: UsesAbilities): BrowseTheWeb {\n        return actor.abilityTo(BrowseTheWeb);\n    }\n\n    /**\n     * @param {ProtractorBrowser} browser\n     *  An instance of a protractor browser\n     */\n    constructor(private readonly browser: ProtractorBrowser) {\n    }\n\n    /**\n     * @desc\n     *  Navigate to the given destination and loads mock modules before Angular.\n     *  Assumes that the page being loaded uses Angular.\n     *\n     * @param {string} destination\n     * @param {number?} timeoutInMillis\n     *\n     * @returns {Promise<void>}\n     */\n    get(destination: string, timeoutInMillis?: number): Promise<void> {\n        return promiseOf(this.browser.get(destination, timeoutInMillis));\n    }\n\n    /**\n     * @desc\n     *  Interface for navigating back and forth in the browser history.\n     *\n     *  @returns {Navigation}\n     */\n    navigate(): Navigation {\n        return this.browser.navigate();\n    }\n\n    /**\n     * @desc\n     *  Interface for defining sequences of complex user interactions.\n     *  Each sequence will not be executed until `perform` is called.\n     *\n     * @returns {external:selenium-webdriver.ActionSequence}\n     */\n    actions(): ActionSequence {\n        return this.browser.actions();\n    }\n\n    /**\n     * @desc\n     *  Interface for managing browser and driver state.\n     *\n     * @returns {external:selenium-webdriver.Options}\n     */\n    manage(): Options {\n        /*\n        this.browser.manage().deleteCookie();\n        this.browser.manage().deleteAllCookies();\n        return this.browser.manage().getCookie('asd');\n         */\n\n        return this.browser.manage();\n    }\n\n    /**\n     * @desc\n     *  Locates a single element identified by the locator\n     *\n     * @param {Locator} locator\n     * @returns {ElementFinder}\n     */\n    locate(locator: Locator): ElementFinder {\n        return this.browser.element(locator);\n    }\n\n    /**\n     * @desc\n     *  Locates all elements identified by the locator\n     *\n     * @param {Locator} locator\n     * @returns {ElementArrayFinder}\n     */\n    locateAll(locator: Locator): ElementArrayFinder {\n        return this.browser.element.all(locator);\n    }\n\n    /**\n     * @desc\n     * If set to false, Protractor will not wait for Angular $http and $timeout\n     * tasks to complete before interacting with the browser.\n     *\n     * This can be useful when:\n     * - you need to switch to a non-Angular app during your tests (i.e. SSO login gateway)\n     * - your app continuously polls an API with $timeout\n     *\n     * If you're not testing an Angular app, it's better to disable Angular synchronisation completely\n     * in protractor configuration:\n     *\n     * @example <caption>protractor.conf.js</caption>\n     * exports.config = {\n     *     onPrepare: function () {\n     *         return browser.waitForAngularEnabled(false);\n     *     },\n     *\n     *     // ... other config\n     * };\n     *\n     * @param {boolean} enable\n     *\n     * @returns {Promise<boolean>}\n     */\n    enableAngularSynchronisation(enable: boolean): Promise<boolean> {\n        return promiseOf(this.browser.waitForAngularEnabled(enable));\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  The script may refer to any variables accessible from the current window.\n     *  Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n     *  to the current document. Any local variables will not be available once the script has finished executing,\n     *  though global variables will persist.\n     *\n     *  If the script has a return value (i.e. if the script contains a `return` statement),\n     *  then the following steps will be taken for resolving this functions return value:\n     *\n     *  For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   return arguments[0].tagName;\n     * `, Target.the('header').located(by.css(h1))\n     *\n     * @see https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeScript\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string} description  - useful for debugging\n     * @param {string | Function} script\n     * @param {any[]} args\n     */\n    executeScript(description: string, script: string | Function, ...args: any[]) {        // tslint:disable-line:ban-types\n        return promiseOf(this.browser.executeScriptWithDescription(script, description, ...args))\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary(\n                    result,\n                );\n                return result;\n            });\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  The following steps will be taken for resolving this functions return value against\n     *  the first argument to the script's callback function:\n     *\n     *  - For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var delay    = arguments[0];\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   window.setTimeout(callback, delay);\n     * `, 500)\n     *\n     * @example <caption>Return a value asynchronously</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   callback('some return value')\n     * `).then(value => doSomethingWithThe(value))\n     *\n     * @see https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string|Function} script\n     * @param {any[]} args\n     */\n    executeAsyncScript(script: string | Function, ...args: any[]): Promise<any> {   // tslint:disable-line:ban-types\n        return promiseOf(this.browser.executeAsyncScript(script, ...args))\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary(\n                    result,\n                );\n                return result;\n            });\n        // todo: should I wrap this an provide additional diagnostic information? execution time? error handling?\n    }\n\n    /**\n     * @desc\n     *  Schedule a command to take a screenshot. The driver makes a best effort to\n     *  return a base64-encoded screenshot of the following, in order of preference:\n     *\n     *  1. Entire page\n     *  2. Current window\n     *  3. Visible portion of the current frame\n     *  4. The entire display containing the browser\n     *\n     * @return {Promise<string>} A promise that will be resolved to a base64-encoded screenshot PNG\n     */\n    takeScreenshot(): Promise<string> {\n        return promiseOf(this.browser.takeScreenshot());\n    }\n\n    /**\n     * @desc\n     *  Returns the title of the current page.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\n     *\n     * @returns {Promise<string>}\n     */\n    getTitle(): Promise<string> {\n        return promiseOf(this.browser.getTitle());\n    }\n\n    /**\n     * @desc\n     *  Returns the url of the current page.\n     *\n     * @returns {Promise<string>}\n     */\n    getCurrentUrl(): Promise<string> {\n        return promiseOf(this.browser.getCurrentUrl());\n    }\n\n    /**\n     * @desc\n     *  Returns the  capabilities of the browser used in the current session.\n     *\n     *  By default, the session `capabilities` specified in the `protractor.conf.js`\n     *  indicate the _desired_ properties of the remote browser. However, if the remote cannot satisfy\n     *  all the requirements, it will still create a session.\n     *\n     * @returns {Promise<Capabilities>} The actual capabilities of this browser.\n     */\n    getCapabilities(): Promise<Capabilities> {\n        return promiseOf(this.browser.getCapabilities());\n    }\n\n    /**\n     * @desc\n     *  Pause the actor flow for a specified number of milliseconds.\n     *\n     * @returns {Promise<void>}\n     */\n    sleep(millis: number): Promise<void> {\n        return promiseOf(this.browser.sleep(millis));\n    }\n\n    /**\n     * @desc\n     *  Pause the actor flow until the condition is met or the timeout expires.\n     *\n     * @returns {Promise<boolean>}\n     */\n    wait(condition: () => Promise<boolean>, timeout: number): Promise<boolean> {\n        return promiseOf(this.browser.wait(condition, timeout));\n    }\n\n    getLastScriptExecutionResult(): any {\n        if (! this.lastScriptExecutionSummary) {\n            throw new LogicError(`Make sure to execute a script before checking on the result`);\n        }\n\n        return this.lastScriptExecutionSummary.result;\n    }\n}\n\n/**\n * @package\n */\nclass LastScriptExecutionSummary {\n    constructor(public readonly result: any) {}\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/abilities/BrowseTheWeb.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "BrowseTheWeb",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/abilities",
    "importStyle": "{BrowseTheWeb}",
    "description": " An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link Actor} to interact with web front-ends using {@link protractor}.",
    "examples": [
      "<caption>Using the protractor.browser</caption>\nimport { Actor } from '@serenity-js/core';\nimport { BrowseTheWeb, Navigate, Target } from '@serenity-js/protractor'\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { by, protractor } from 'protractor';\n\nconst actor = Actor.named('Wendy').whoCan(\n    BrowseTheWeb.using(protractor.browser),\n);\n\nconst HomePage = {\n    Title: Target.the('title').located(by.css('h1')),\n};\n\nactor.attemptsTo(\n    Navigate.to(`https://serenity-js.org`),\n    Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n);"
    ],
    "see": [
      "https://www.protractortest.org/",
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}"
    ],
    "lineNumber": 42,
    "interface": false,
    "implements": [
      "Ability"
    ]
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "lastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#lastScriptExecutionSummary",
    "access": "private",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "using",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.using",
    "access": "public",
    "description": " Ability to interact with web front-ends using a given protractor browser instance.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BrowseTheWeb}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorBrowser"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.as",
    "access": "public",
    "description": " Used to access the Actor's ability to {@link BrowseTheWeb} from within the {@link Interaction} classes,\n such as {@link Navigate}.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorBrowser"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "An instance of a protractor browser"
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#get",
    "access": "public",
    "description": " Navigate to the given destination and loads mock modules before Angular.\n Assumes that the page being loaded uses Angular.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutInMillis",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "navigate",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#navigate",
    "access": "public",
    "description": " Interface for navigating back and forth in the browser history.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Navigation}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Navigation"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "actions",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#actions",
    "access": "public",
    "description": " Interface for defining sequences of complex user interactions.\n Each sequence will not be executed until `perform` is called.",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{external:selenium-webdriver.ActionSequence}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "external:selenium-webdriver.ActionSequence"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "manage",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#manage",
    "access": "public",
    "description": " Interface for managing browser and driver state.",
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{external:selenium-webdriver.Options}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "external:selenium-webdriver.Options"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "locate",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#locate",
    "access": "public",
    "description": " Locates a single element identified by the locator",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "locateAll",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#locateAll",
    "access": "public",
    "description": " Locates all elements identified by the locator",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementArrayFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementArrayFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "enableAngularSynchronisation",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#enableAngularSynchronisation",
    "access": "public",
    "description": "If set to false, Protractor will not wait for Angular $http and $timeout\ntasks to complete before interacting with the browser.\n\nThis can be useful when:\n- you need to switch to a non-Angular app during your tests (i.e. SSO login gateway)\n- your app continuously polls an API with $timeout\n\nIf you're not testing an Angular app, it's better to disable Angular synchronisation completely\nin protractor configuration:",
    "examples": [
      "<caption>protractor.conf.js</caption>\nexports.config = {\n    onPrepare: function () {\n        return browser.waitForAngularEnabled(false);\n    },\n\n    // ... other config\n};"
    ],
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "executeScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeScript",
    "access": "public",
    "description": " Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n The script may refer to any variables accessible from the current window.\n Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n to the current document. Any local variables will not be available once the script has finished executing,\n though global variables will persist.\n\n If the script has a return value (i.e. if the script contains a `return` statement),\n then the following steps will be taken for resolving this functions return value:\n\n For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  return arguments[0].tagName;\n`, Target.the('header').located(by.css(h1))"
    ],
    "see": [
      "https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeScript",
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-"
    ],
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "useful for debugging"
      },
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "executeAsyncScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeAsyncScript",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n The following steps will be taken for resolving this functions return value against\n the first argument to the script's callback function:\n\n - For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var delay    = arguments[0];\n  var callback = arguments[arguments.length - 1];\n\n  window.setTimeout(callback, delay);\n`, 500)",
      "<caption>Return a value asynchronously</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var callback = arguments[arguments.length - 1];\n\n  callback('some return value')\n`).then(value => doSomethingWithThe(value))"
    ],
    "see": [
      "https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript",
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-"
    ],
    "lineNumber": 435,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "takeScreenshot",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#takeScreenshot",
    "access": "public",
    "description": " Schedule a command to take a screenshot. The driver makes a best effort to\n return a base64-encoded screenshot of the following, in order of preference:\n\n 1. Entire page\n 2. Current window\n 3. Visible portion of the current frame\n 4. The entire display containing the browser",
    "lineNumber": 469,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "A promise that will be resolved to a base64-encoded screenshot PNG"
    },
    "params": []
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getTitle",
    "access": "public",
    "description": " Returns the title of the current page.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title"
    ],
    "lineNumber": 492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "getCurrentUrl",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getCurrentUrl",
    "access": "public",
    "description": " Returns the url of the current page.",
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "getCapabilities",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getCapabilities",
    "access": "public",
    "description": " Returns the  capabilities of the browser used in the current session.\n\n By default, the session `capabilities` specified in the `protractor.conf.js`\n indicate the _desired_ properties of the remote browser. However, if the remote cannot satisfy\n all the requirements, it will still create a session.",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Capabilities>} The actual capabilities of this browser."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Capabilities>"
      ],
      "spread": false,
      "description": "The actual capabilities of this browser."
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#sleep",
    "access": "public",
    "description": " Pause the actor flow for a specified number of milliseconds.",
    "lineNumber": 561,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "millis",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "wait",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#wait",
    "access": "public",
    "description": " Pause the actor flow until the condition is met or the timeout expires.",
    "lineNumber": 586,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "getLastScriptExecutionResult",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getLastScriptExecutionResult",
    "access": "public",
    "description": " ",
    "lineNumber": 353,
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "class",
    "name": "LastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/abilities/BrowseTheWeb.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 620,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 621,
    "undocument": true
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "src/screenplay/abilities/index.ts",
    "content": "export * from './BrowseTheWeb';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/abilities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "src/screenplay/index.ts",
    "content": "export * from './abilities';\nexport * from './interactions';\nexport * from './questions';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/screenplay/interactions/Clear.ts",
    "content": "import { AnswersQuestions, Interaction, LogicError, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder, protractor } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Clear extends Interaction {\n    static theValueOf(field: Question<ElementFinder> | ElementFinder) {\n        return new Clear(field);\n    }\n\n    constructor(private readonly field: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.field, (elf: ElementFinder) =>\n            elf.getAttribute('value').then(value => {\n                if (! value) {\n                    throw new LogicError(\n                        `${ this.capitaliseFirstLetter(this.field.toString()) } doesn't seem to have a 'value' attribute that could be cleared.`,\n                    );\n                }\n\n                return this.removeCharactersFrom(elf, value.length);\n            }));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor clears the value of ${ this.field }`;\n    }\n\n    private capitaliseFirstLetter(text: string) {\n        return text.charAt(0).toUpperCase() + text.substring(1);\n    }\n\n    private removeCharactersFrom(elf: ElementFinder, numberOfCharacters: number): PromiseLike<void> {\n        return numberOfCharacters === 0\n            ? Promise.resolve(void 0)\n            : elf.sendKeys(\n                protractor.Key.END,\n                ...this.times(numberOfCharacters, protractor.Key.BACK_SPACE),\n            );\n    }\n\n    private times(n: number, key: string) {\n        return Array.from(new Array(n)).map(() => key);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Clear.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "Clear",
    "memberof": "src/screenplay/interactions/Clear.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Clear}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "theValueOf",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear.theValueOf",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "capitaliseFirstLetter",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#capitaliseFirstLetter",
    "access": "private",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "removeCharactersFrom",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#removeCharactersFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "elf",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfCharacters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "times",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#times",
    "access": "private",
    "description": " ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/screenplay/interactions/Click.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Click extends Interaction {\n    static on(target: Question<ElementFinder> | ElementFinder): Interaction {\n        return new Click(target);\n    }\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) => elf.click());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor clicks on ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Click.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "class",
    "name": "Click",
    "memberof": "src/screenplay/interactions/Click.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Click}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click.on",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/screenplay/interactions/DeleteCookies.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class DeleteCookies {\n    static called(cookieName: Answerable<string>): Interaction {\n        return new DeleteCookieCalled(cookieName);\n    }\n\n    static all(): Interaction {\n        return new DeletesAllCookies();\n    }\n}\n\n/**\n * @package\n */\nclass DeleteCookieCalled implements Interaction {\n    constructor(private readonly name: Answerable<string>) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return actor.answer(this.name)\n            .then(name => BrowseTheWeb.as(actor).manage().deleteCookie(name));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor deletes the \"${ this.name }\" cookie`;\n    }\n}\n\n/**\n * @package\n */\nclass DeletesAllCookies implements Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).manage().deleteAllCookies());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor deletes all cookies`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "DeleteCookies",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{DeleteCookies}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "called",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies.called",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies.all",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "class",
    "name": "DeleteCookieCalled",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 61,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "class",
    "name": "DeletesAllCookies",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 127,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/screenplay/interactions/DoubleClick.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class DoubleClick extends Interaction {\n    static on(target: Question<ElementFinder> | ElementFinder): Interaction {\n        return new DoubleClick(target);\n    }\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        // Since the deprecation of Webdriver's ControlFlow,\n        // Protractor's doubleClick might behave incorrectly when promises are used.\n        // The mouseMove/doubleClick combo works around that problem.\n        // See https://github.com/angular/protractor/issues/4578\n\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) =>\n            BrowseTheWeb.as(actor).actions()\n                .mouseMove(elf)\n                .perform()\n                .then(() => BrowseTheWeb.as(actor).actions().doubleClick().perform()));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor double-clicks on ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/DoubleClick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "class",
    "name": "DoubleClick",
    "memberof": "src/screenplay/interactions/DoubleClick.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{DoubleClick}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick.on",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 327,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "src/screenplay/interactions/Enter.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Enter extends Interaction {\n    static theValue(value: Answerable<string | number>) {\n        return {\n            into: (field: Question<ElementFinder> | ElementFinder) => new Enter(value, field),\n        };\n    }\n\n    constructor(\n        private readonly value: Answerable<string | number>,\n        private readonly field: Question<ElementFinder> | ElementFinder,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.value)\n            .then(value => withAnswerOf(actor, this.field, (elf: ElementFinder) => elf.sendKeys(value)));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor enters ${this.value} into ${this.field}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Enter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "class",
    "name": "Enter",
    "memberof": "src/screenplay/interactions/Enter.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Enter}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "theValue",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter.theValue",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"into\": *}"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "src/screenplay/interactions/Hover.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Hover extends Interaction {\n    static over(target: Question<ElementFinder> | ElementFinder) {\n        return new Hover(target);\n    }\n\n    constructor(\n        private readonly target: Question<ElementFinder> | ElementFinder,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, elf => BrowseTheWeb.as(actor).actions().mouseMove(elf).perform());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor hovers the mouse over ${this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Hover.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "class",
    "name": "Hover",
    "memberof": "src/screenplay/interactions/Hover.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Hover}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "over",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover.over",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "src/screenplay/interactions/Navigate.ts",
    "content": "import { Answerable, AnswersQuestions, Duration, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate to a specific destination,\n *  as well as back and forth in the browser history.\n *\n * @abstract\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport abstract class Navigate extends Interaction {\n\n    static to(url: Answerable<string>): NavigateToUrl {\n        return new NavigateToUrl(url);\n    }\n\n    static back(): NavigateBack {\n        return new NavigateBack();\n    }\n\n    static forward(): NavigateForward {\n        return new NavigateForward();\n    }\n\n    static reloadPage(): ReloadPage {\n        return new ReloadPage();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    abstract performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void>;\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    abstract toString(): string;\n}\n\n/**\n * @extends {Navigate}\n */\nclass NavigateToUrl extends Navigate {\n    constructor(private readonly url: Answerable<string>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Specifies timeout to wait for an Angular app to load.\n     *  Please note that the timeout is ignored if you disable\n     *  synchronisation with Angular.\n     *\n     * @param {Answerable<Duration>} duration\n     */\n    withTimeout(duration: Answerable<Duration>): Interaction {\n        return new NavigateToUrlWithTimeout(this.url, duration);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.url).then(url =>\n            BrowseTheWeb.as(actor).get(url),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates to ${ this.url }`;\n    }\n}\n\n/**\n * @extends {Navigate}\n */\nclass NavigateToUrlWithTimeout extends Navigate {\n    constructor(private readonly url: Answerable<string>, private readonly timeout: Answerable<Duration>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return Promise.all([\n            actor.answer(this.url),\n            actor.answer(this.timeout),\n        ]).then(([url, timeout]) =>\n            BrowseTheWeb.as(actor).get(url, timeout.inMilliseconds()),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates to ${ this.url } waiting up to ${ this.timeout } for Angular to load`;\n    }\n}\n\n/**\n * @extends {Navigate}\n */\nclass NavigateBack extends Navigate {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().back());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates back in the browser history`;\n    }\n}\n\n/**\n * @extends {Navigate}\n */\nclass NavigateForward extends Navigate {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().forward());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates forward in the browser history`;\n    }\n}\n\n/**\n * @extends {Navigate}\n */\nclass ReloadPage extends Navigate {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().refresh());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor reloads the page`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Navigate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "Navigate",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Navigate}",
    "description": " Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate to a specific destination,\n as well as back and forth in the browser history.",
    "lineNumber": 21,
    "abstract": true,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.to",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NavigateToUrl"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "back",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.back",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "NavigateBack"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "forward",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.forward",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "NavigateForward"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "reloadPage",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.reloadPage",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "ReloadPage"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "NavigateToUrl",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 154,
    "interface": false,
    "extends": [
      "Navigate"
    ],
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "withTimeout",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#withTimeout",
    "access": "public",
    "description": " Specifies timeout to wait for an Angular app to load.\n Please note that the timeout is ignored if you disable\n synchronisation with Angular.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Duration>"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "NavigateToUrlWithTimeout",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 247,
    "interface": false,
    "extends": [
      "Navigate"
    ],
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 357,
    "kind": "class",
    "name": "NavigateBack",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 318,
    "interface": false,
    "extends": [
      "Navigate"
    ],
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "class",
    "name": "NavigateForward",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 381,
    "interface": false,
    "extends": [
      "Navigate"
    ],
    "ignore": true
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 363,
    "kind": "class",
    "name": "ReloadPage",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 444,
    "interface": false,
    "extends": [
      "Navigate"
    ],
    "ignore": true
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "src/screenplay/interactions/Press.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder, Key } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Note that modifier keys, such as Command, won't work on Mac - https://github.com/angular/protractor/issues/690\n */\nexport class Press extends Interaction {\n\n    static the(...keys: string[]) {\n        return {\n            in: (field: Question<ElementFinder> | ElementFinder) => new Press(keys, field),\n        };\n    }\n\n    constructor(\n        private readonly keys: string[],\n        private readonly field: Question<ElementFinder> | ElementFinder,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<any> {\n        return Promise.all(this.keys.map(key => actor.answer(key)))\n            .then(keys => withAnswerOf(actor, this.field, (elf: ElementFinder) => elf.sendKeys(...keys)));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor presses ${ describeSequenceOf(this.keys) } in ${ this.field.toString() }`;\n    }\n}\n\nfunction describeSequenceOf(keys: string[]) {\n    return keys.map(key => [\n        capitalised(nameOf(key)),\n        isModifier(key) ? '-' : ', ',\n    ]).\n    reduce((acc, current) => acc.concat(current), []).\n    slice(0, keys.length * 2 - 1).\n    join('');\n}\n\nfunction isModifier(key: string) {\n    return !! ~ [ Key.ALT, Key.COMMAND, Key.CONTROL, Key.SHIFT ].indexOf(key);\n}\n\nfunction nameOf(key: string) {\n\n    for (const candidate in Key) {\n        if (Key.hasOwnProperty(candidate) && Key[ candidate ] === key) {\n            return candidate;\n        }\n    }\n\n    return key;\n}\n\nfunction capitalised(name: string) {\n    return name.charAt(0).toLocaleUpperCase() + name.slice(1).toLocaleLowerCase();\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Press.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "class",
    "name": "Press",
    "memberof": "src/screenplay/interactions/Press.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Press}",
    "description": " Note that modifier keys, such as Command, won't work on Mac - https://github.com/angular/protractor/issues/690",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press.the",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"in\": *}"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "describeSequenceOf",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~describeSequenceOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "isModifier",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~isModifier",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "nameOf",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~nameOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "capitalised",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~capitalised",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "content": "import { Interaction, UsesAbilities } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class ResizeBrowserWindow {\n    static toMaximum = (): Interaction => new MaximiseBrowserWindow();\n    static to = (width: number, height: number): Interaction => new SetBrowserWindowSize(width, height);\n}\n\nclass MaximiseBrowserWindow implements Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    performAs(actor: UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).manage().window().maximize();\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor maximises the browser window`;\n    }\n}\n\nclass SetBrowserWindowSize implements Interaction {\n    constructor(private width: number, private height: number) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    performAs(actor: UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).manage().window().setSize(this.width, this.height);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor sets the size of the browser window to ${this.width} x ${this.height}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "class",
    "name": "ResizeBrowserWindow",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{ResizeBrowserWindow}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "toMaximum",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow.toMaximum",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "to",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow.to",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "class",
    "name": "MaximiseBrowserWindow",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 9,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 383,
    "kind": "class",
    "name": "SetBrowserWindowSize",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 37,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 387,
    "kind": "file",
    "name": "src/screenplay/interactions/Scroll.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Scroll extends Interaction {\n    static to(target: Question<ElementFinder> | ElementFinder) {\n        return new Scroll(target);\n    }\n\n    constructor(\n        private readonly target: Question<ElementFinder> | ElementFinder,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) => BrowseTheWeb.as(actor).actions().mouseMove(elf).perform());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor scrolls to ${this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Scroll.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "class",
    "name": "Scroll",
    "memberof": "src/screenplay/interactions/Scroll.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Scroll}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll.to",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "file",
    "name": "src/screenplay/interactions/TakeScreenshot.ts",
    "content": "import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Name, Photo } from '@serenity-js/core/lib/model';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class TakeScreenshot extends Interaction {\n    static of(name: Answerable<string>): Interaction {\n        return new TakeScreenshot(name);\n    }\n\n    constructor(private readonly name: Answerable<string>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions & CollectsArtifacts} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions & CollectsArtifacts): PromiseLike<void> {\n        return Promise.all([\n            BrowseTheWeb.as(actor).takeScreenshot(),\n            actor.answer(this.name),\n        ]).then(([ screenshot, name ]) => actor.collect(\n            Photo.fromBase64(screenshot),\n            new Name(name),\n        ));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor takes a screenshot of ${this.name}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/TakeScreenshot.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 394,
    "kind": "class",
    "name": "TakeScreenshot",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts",
    "static": true,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{TakeScreenshot}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot.of",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions & CollectsArtifacts"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "file",
    "name": "src/screenplay/interactions/UseAngular.ts",
    "content": "import { Interaction } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class UseAngular {\n    static disableSynchronisation(): Interaction {\n        return Interaction.where(`#actor disables synchronisation with Angular`, actor =>\n            BrowseTheWeb.as(actor).enableAngularSynchronisation(false).then(() => void 0));\n    }\n\n    static enableSynchronisation(): Interaction {\n        return Interaction.where(`#actor enables synchronisation with Angular`, actor =>\n            BrowseTheWeb.as(actor).enableAngularSynchronisation(true).then(() => void 0));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/UseAngular.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "UseAngular",
    "memberof": "src/screenplay/interactions/UseAngular.ts",
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{UseAngular}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "disableSynchronisation",
    "memberof": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular.disableSynchronisation",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "enableSynchronisation",
    "memberof": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular.enableSynchronisation",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 403,
    "kind": "file",
    "name": "src/screenplay/interactions/Wait.ts",
    "content": "import { Expectation, ExpectationMet, Outcome } from '@serenity-js/assertions';\nimport { Answerable, AnswersQuestions, AssertionError, Duration, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Wait {\n    static Default_Timeout = Duration.ofSeconds(5);\n\n    static for(duration: Answerable<Duration>): Interaction {\n        return new WaitFor(duration);\n    }\n\n    static upTo(duration: Duration) {\n        return {    // esdoc doesn't understand the fat arrow notation with generics, hence this 'function' here\n            until: function until<Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction {\n                return new WaitUntil(actual, expectation, duration);\n            },\n        };\n    }\n\n    static until<Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction {\n        return new WaitUntil(actual, expectation, Wait.Default_Timeout);\n    }\n}\n\n/**\n * @package\n */\nclass WaitFor extends Interaction {\n    constructor(private readonly duration: Answerable<Duration>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.duration).then(duration => BrowseTheWeb.as(actor).sleep(duration.inMilliseconds()));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits for ${ this.duration }`;\n    }\n}\n\n/**\n * @package\n */\nclass WaitUntil<Actual> extends Interaction {\n    constructor(\n        private readonly actual: Answerable<Actual>,\n        private readonly expectation: Expectation<any, Actual>,\n        private readonly timeout: Duration,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        const\n            actual      = this.actual,\n            expectation = this.expectation.answeredBy(actor);\n\n        let expectationOutcome: Outcome<any, Actual>;\n\n        return BrowseTheWeb.as(actor)\n            .wait(function () {\n                    return actor.answer(actual)\n                        .then(act => expectation(act))\n                        .then(outcome => {\n                            expectationOutcome = outcome;\n\n                            return outcome instanceof ExpectationMet;\n                        });\n                },\n                this.timeout.inMilliseconds(),\n            )\n            .then(_ => void 0)\n            .catch(error => {\n                if (!! expectationOutcome) {\n                    throw new AssertionError(\n                        `Waited ${ this.timeout.toString() } for ${ formatted `${ this.actual }` } to ${ this.expectation.toString() }`,\n                        expectationOutcome.expected,\n                        expectationOutcome.actual,\n                        error,\n                    );\n                }\n\n                throw error;\n            });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits up to ${ this.timeout } until ${ this.actual } does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Wait.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 404,
    "kind": "class",
    "name": "Wait",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Wait}",
    "description": " ",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "Default_Timeout",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.Default_Timeout",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "for",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.for",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "upTo",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.upTo",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"until\": *}"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "until",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.until",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 409,
    "kind": "class",
    "name": "WaitFor",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 100,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "WaitUntil",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 166,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { BrowseTheWeb } from '../../abilities';\nimport { ExecuteScriptWithArguments } from './ExecuteScriptWithArguments';\n\n/**\n * @package\n */\nexport class ExecuteAsynchronousScript extends ExecuteScriptWithArguments {\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteAsynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeAsyncScript(this.script, ...args);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes an asynchronous script with arguments: ${ this.args }`\n            : `#actor executes an asynchronous script`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "class",
    "name": "ExecuteAsynchronousScript",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts",
    "importStyle": "{ExecuteAsynchronousScript}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.js~ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteAsynchronousScript.ts~ExecuteAsynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 422,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/ExecuteScript.ts",
    "content": "import { Interaction } from '@serenity-js/core';\n\nimport { ExecuteAsynchronousScript } from './ExecuteAsynchronousScript';\nimport { ExecuteScriptFromUrl } from './ExecuteScriptFromUrl';\nimport { ExecuteScriptWithArguments } from './ExecuteScriptWithArguments';\nimport { ExecuteSynchronousScript } from './ExecuteSynchronousScript';\n\n/**\n * @public\n */\nexport class ExecuteScript {\n    static from(sourceUrl: string): Interaction {\n        return new ExecuteScriptFromUrl(sourceUrl);\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n     *  or `Target` (`Question<ElementFinder>`).\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  If the script invokes the `callback` with a return value, this will be made available\n     *  via the {@Link LastScriptExecution.result}\n     *\n     *  **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n     *  instead of passing it to the callback function.\n     *\n     * @example <caption>Executing an async script</caption>\n     *  actor.attemptsTo(ExecuteScript.async(\n     *    var callback = arguments[arguments.length - 1];\n     *\n     *    // do stuff\n     *\n     *    callback(result)\n     *  ));\n     *\n     * @example <caption>Passing arguments to an async script</caption>\n     *  actor.attemptsTo(ExecuteScript.async(\n     *    var name = arguments[0];\n     *    var age = arguments[1];\n     *    var callback = arguments[arguments.length - 1];\n     *\n     *    // do stuff\n     *\n     *    callback(result)\n     *  ).withArguments('Bob', 24));\n     *\n     * @example <caption>Passing Target arguments to an async script</caption>\n     * actor.attemptsTo(ExecuteScript.async(\n     *    var header = arguments[0];    // Target gets converted to a WebElement\n     *    var callback = arguments[arguments.length - 1];\n     *\n     *    callback(header.innerText)\n     *  ).withArguments(Target.the('header').located(by.css('h1'))));\n     *\n     * @param {string | Function} script\n     * @returns {ExecuteScriptWithArguments}\n     */\n    static async(script: string | Function): ExecuteScriptWithArguments {                // tslint:disable-line:ban-types\n        return new ExecuteAsynchronousScript(script);\n    }\n\n    static sync(script: string | Function): ExecuteScriptWithArguments {                  // tslint:disable-line:ban-types\n        return new ExecuteSynchronousScript(script);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/ExecuteScript.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 423,
    "kind": "class",
    "name": "ExecuteScript",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions/execute-script",
    "importStyle": "{ExecuteScript}",
    "description": "",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "from",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript.from",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "async",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript.async",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n or `Target` (`Question<ElementFinder>`).\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n If the script invokes the `callback` with a return value, this will be made available\n via the {@Link LastScriptExecution.result}\n\n **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n instead of passing it to the callback function.",
    "examples": [
      "<caption>Executing an async script</caption>\n actor.attemptsTo(ExecuteScript.async(\n   var callback = arguments[arguments.length - 1];\n\n   // do stuff\n\n   callback(result)\n ));",
      "<caption>Passing arguments to an async script</caption>\n actor.attemptsTo(ExecuteScript.async(\n   var name = arguments[0];\n   var age = arguments[1];\n   var callback = arguments[arguments.length - 1];\n\n   // do stuff\n\n   callback(result)\n ).withArguments('Bob', 24));",
      "<caption>Passing Target arguments to an async script</caption>\nactor.attemptsTo(ExecuteScript.async(\n   var header = arguments[0];    // Target gets converted to a WebElement\n   var callback = arguments[arguments.length - 1];\n\n   callback(header.innerText)\n ).withArguments(Target.the('header').located(by.css('h1'))));"
    ],
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExecuteScriptWithArguments}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "sync",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScript.ts~ExecuteScript.sync",
    "access": "public",
    "description": " ",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 427,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts",
    "content": "import { AnswersQuestions, Interaction, LogicError, UsesAbilities } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../../abilities';\n\n/**\n * @package\n *\n * https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n */\nexport class ExecuteScriptFromUrl extends Interaction {\n    constructor(private readonly sourceUrl: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<any> {\n        return BrowseTheWeb.as(actor).executeAsyncScript(`\n            var src = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            var alreadyLoadedScripts = Array.prototype.slice\n                .call(document.getElementsByTagName('script'))\n                .map(script => script.src);\n\n            if (!! ~ alreadyLoadedScripts.indexOf(src)) {\n                return callback(\"Script from \" + src + \" has already been loaded\");\n            }\n\n            var script = document.createElement('script');\n            script.onload = function () {\n                return callback();\n            };\n            script.onerror = function () {\n                return callback(\"Couldn't load script from \" + this.src);\n            };\n\n            script.src = src;\n            script.async = true;\n            document.head.appendChild(script);\n        `, this.sourceUrl).then(errorMessage => {\n            if (!! errorMessage) {\n                throw new LogicError(errorMessage);\n            }\n        });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor executes a script from ${ this.sourceUrl }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 428,
    "kind": "class",
    "name": "ExecuteScriptFromUrl",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts",
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts",
    "importStyle": "{ExecuteScriptFromUrl}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptFromUrl.ts~ExecuteScriptFromUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts",
    "content": "import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { Name, TextData } from '@serenity-js/core/lib/model';\n\n/**\n * @public\n * @abstract\n */\nexport abstract class ExecuteScriptWithArguments extends Interaction {\n\n    constructor(\n        protected readonly script: string | Function,                                   // tslint:disable-line:ban-types\n        protected readonly args: Array<Answerable<any>> = [],\n    ) {\n        super();\n    }\n\n    public abstract withArguments(...args: Array<Answerable<any>>): Interaction;\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & CollectsArtifacts & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & CollectsArtifacts & AnswersQuestions): PromiseLike<void> {\n        return this.answerAll(this.args).as(actor)\n            .then(args => this.executeAs(actor, args))\n            .then(() => actor.collect(\n                TextData.fromJSON({\n                    contentType:    'text/javascript;charset=UTF-8',\n                    data:           this.script.toString(),\n                }),\n                new Name('Script source'),\n            ));\n    }\n\n    protected abstract executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any>;\n\n    /**\n     * @private\n     *\n     * @param {Array<Answerable<any>>} args\n     */\n    private answerAll(args: Array<Answerable<any>>) {\n        return {\n            as: (actor: AnswersQuestions & UsesAbilities): Promise<any[]> => Promise.all(args.map(arg => {\n                const maybeElementFinder = Question.isAQuestion(arg)\n                    ? arg.answeredBy(actor)\n                    : arg;\n\n                const maybePromise = !! maybeElementFinder.getWebElement\n                    ? maybeElementFinder.getWebElement()\n                    : maybeElementFinder;\n\n                return actor.answer(maybePromise);\n            })),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "class",
    "name": "ExecuteScriptWithArguments",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts",
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions/execute-script",
    "importStyle": "{ExecuteScriptWithArguments}",
    "description": "",
    "lineNumber": 15,
    "abstract": true,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ]
  },
  {
    "__docId__": 434,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & CollectsArtifacts & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "answerAll",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.ts~ExecuteScriptWithArguments#answerAll",
    "access": "private",
    "description": "",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "{\"as\": *}"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { BrowseTheWeb } from '../../abilities';\nimport { ExecuteScriptWithArguments } from './ExecuteScriptWithArguments';\n\n/**\n * @package\n */\nexport class ExecuteSynchronousScript extends ExecuteScriptWithArguments {\n\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteSynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeScript(this.toString(), this.script, ...args);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes a synchronous script with arguments: ${ this.args }`\n            : `#actor executes a synchronous script`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "class",
    "name": "ExecuteSynchronousScript",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts",
    "importStyle": "{ExecuteSynchronousScript}",
    "description": "",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/screenplay/interactions/execute-script/ExecuteScriptWithArguments.js~ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/execute-script/ExecuteSynchronousScript.ts~ExecuteSynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 442,
    "kind": "file",
    "name": "src/screenplay/interactions/execute-script/index.ts",
    "content": "export * from './ExecuteScript';\nexport * from './ExecuteScriptFromUrl';\nexport * from './ExecuteScriptWithArguments';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/execute-script/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 443,
    "kind": "file",
    "name": "src/screenplay/interactions/index.ts",
    "content": "export * from './Clear';\nexport * from './Click';\nexport * from './DeleteCookies';\nexport * from './DoubleClick';\nexport * from './Enter';\nexport { ExecuteScript } from './execute-script';\nexport * from './Hover';\nexport * from './Navigate';\nexport * from './Press';\nexport * from './ResizeBrowserWindow';\nexport * from './Scroll';\nexport * from './TakeScreenshot';\nexport * from './UseAngular';\nexport * from './Wait';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "file",
    "name": "src/screenplay/questions/Attribute.ts",
    "content": "import { Answerable, AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Attribute implements Question<Promise<string>> {\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return {\n            called: (name: Answerable<string>) => new Attribute(target, name),\n        };\n    }\n\n    constructor(\n        private readonly target: Question<ElementFinder> | ElementFinder,\n        private readonly name: Answerable<string>,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return actor.answer(this.name)\n            .then(name => withAnswerOf(actor, this.target, elf => elf.getAttribute(name)));\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString(): string {\n        return formatted `the value of the ${ this.name } attribute of ${ this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Attribute.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 445,
    "kind": "class",
    "name": "Attribute",
    "memberof": "src/screenplay/questions/Attribute.ts",
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Attribute}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute.of",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"called\": *}"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "file",
    "name": "src/screenplay/questions/Browser.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { logging } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Browser {\n\n    /**\n     * @desc\n     *  Creates a {@link Question} that reads the entries of the browser log\n     *  so that they can be asserted on.\n     *\n     *  Please note that in order to ensure that the automated test has access to the browser log,\n     *  Protractor needs to be configured with the desired logging level, as per the example below.\n     *\n     * @example <caption>Enabling Protractor browser logging</caption>\n     * // protractor.conf.js\n     * exports.config = {\n     *   capabilities: {\n     *     loggingPrefs: {\n     *         // available options: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL\n     *         browser: 'SEVERE'\n     *     },\n     *   }\n     * }\n     *\n     * @example <caption>Ensure the app didn't log anything to the console during the test</caption>\n     * import { Actor, BrowseTheWeb, Browser } from '@serenity-js/core';\n     * import { Ensure, property, equals } from '@serenity-js/assertions';\n     *\n     * actor.attemptsTo(\n     *   Ensure.that(Browser.log(), property('length', equals(0))),\n     * );\n     *\n     * @example <caption>Mark the test as \"compromised\" if the server responds with a 500 to any AJAX request during the test</caption>\n     * import { Actor, BrowseTheWeb, Browser, TestCompromisedError } from '@serenity-js/core';\n     * import { Ensure, property, equals, not, contrainAtLeastOneItemThat } from '@serenity-js/assertions'\n     *\n     * actor.attemptsTo(\n     *   Ensure.that(Browser.log(),\n     *     not(contrainAtLeastOneItemThat(\n     *       property('message', includes('the server responded with a status of 500'))\n     *     ))\n     *   ).otherwiseFailWith(TestCompromisedError, 'The server is down'),\n     * );\n     *\n     * @see https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#loggingpreferences-json-object\n     * @returns {Question<Promise<logging.Entry[]>>}\n     */\n    static log() {\n        return Question.about<Promise<logging.Entry[]>>(`browser log`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).manage().logs().get('browser')));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Browser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 451,
    "kind": "class",
    "name": "Browser",
    "memberof": "src/screenplay/questions/Browser.ts",
    "static": true,
    "longname": "src/screenplay/questions/Browser.ts~Browser",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Browser}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "log",
    "memberof": "src/screenplay/questions/Browser.ts~Browser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Browser.ts~Browser.log",
    "access": "public",
    "description": " Creates a {@link Question} that reads the entries of the browser log\n so that they can be asserted on.\n\n Please note that in order to ensure that the automated test has access to the browser log,\n Protractor needs to be configured with the desired logging level, as per the example below.",
    "examples": [
      "<caption>Enabling Protractor browser logging</caption>\n// protractor.conf.js\nexports.config = {\n  capabilities: {\n    loggingPrefs: {\n        // available options: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL\n        browser: 'SEVERE'\n    },\n  }\n}",
      "<caption>Ensure the app didn't log anything to the console during the test</caption>\nimport { Actor, BrowseTheWeb, Browser } from '@serenity-js/core';\nimport { Ensure, property, equals } from '@serenity-js/assertions';\n\nactor.attemptsTo(\n  Ensure.that(Browser.log(), property('length', equals(0))),\n);",
      "<caption>Mark the test as \"compromised\" if the server responds with a 500 to any AJAX request during the test</caption>\nimport { Actor, BrowseTheWeb, Browser, TestCompromisedError } from '@serenity-js/core';\nimport { Ensure, property, equals, not, contrainAtLeastOneItemThat } from '@serenity-js/assertions'\n\nactor.attemptsTo(\n  Ensure.that(Browser.log(),\n    not(contrainAtLeastOneItemThat(\n      property('message', includes('the server responded with a status of 500'))\n    ))\n  ).otherwiseFailWith(TestCompromisedError, 'The server is down'),\n);"
    ],
    "see": [
      "https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#loggingpreferences-json-object"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<logging.Entry[]>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<logging.Entry[]>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 453,
    "kind": "file",
    "name": "src/screenplay/questions/CSSClasses.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { Attribute } from './Attribute';\nimport { RelativeQuestion } from './RelativeQuestion';\nimport { TargetNestedElement } from './targets';\n\nexport class CSSClasses\n    implements Question<Promise<string[]>>, RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n{\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return new CSSClasses(target);\n    }\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new CSSClasses(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        return Attribute.of(this.target).called('class').answeredBy(actor)\n            .then(attribute => attribute\n                .replace(/\\s+/, ' ')\n                .trim()\n                .split(' ')\n                .filter(cssClass => !! cssClass),\n            );\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString(): string {\n        return formatted `the CSS classes of ${ this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/CSSClasses.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 454,
    "kind": "class",
    "name": "CSSClasses",
    "memberof": "src/screenplay/questions/CSSClasses.ts",
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{CSSClasses}",
    "description": " ",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses.of",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#of",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "file",
    "name": "src/screenplay/questions/Cookie.ts",
    "content": "import { Answerable, AnswersQuestions, Question, Transform, UsesAbilities } from '@serenity-js/core';\nimport { IWebDriverOptionsCookie } from 'selenium-webdriver';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Cookie {\n    static valueOf(cookieName: Answerable<string>): Question<Promise<string>> {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.value)\n            .as(`the value of the \"${ cookieName }\" cookie`);\n    }\n\n    static pathOf(cookieName: Answerable<string>): Question<Promise<string>> {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.path)\n            .as(`the path of the \"${ cookieName }\" cookie`);\n    }\n\n    static domainOf(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.domain)\n            .as(`the domain of the \"${ cookieName }\" cookie`);\n    }\n\n    static isHTTPOnly(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && !! details.httpOnly)\n            .as(`the HTTP-only status of the \"${ cookieName }\" cookie`);\n    }\n\n    static isSecure(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && !! details.secure)\n            .as(`the \"secure\" status of the \"${ cookieName }\" cookie`);\n    }\n\n    static expiryDateOf(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => {\n                // expiry date coming from webdriver is expressed in seconds\n                return details && details.expiry && new Date(Number(details.expiry) * 1000);\n            })\n            .as(`the expiry date of the \"${ cookieName }\" cookie`);\n    }\n}\n\n/**\n * @package\n */\nclass CookieDetails implements Question<Promise<IWebDriverOptionsCookie>> {\n    constructor(private readonly name: Answerable<string>) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<IWebDriverOptionsCookie> {\n        return actor.answer(this.name)\n            .then(name => BrowseTheWeb.as(actor).manage().getCookie(name))\n            .then(details => !! details ? details : undefined);\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `the details of the \"${ this.name } cookie`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Cookie.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "class",
    "name": "Cookie",
    "memberof": "src/screenplay/questions/Cookie.ts",
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Cookie}",
    "description": " ",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.valueOf",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "pathOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.pathOf",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "domainOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.domainOf",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "isHTTPOnly",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.isHTTPOnly",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "isSecure",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.isSecure",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "expiryDateOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.expiryDateOf",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "CookieDetails",
    "memberof": "src/screenplay/questions/Cookie.ts",
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Cookie.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 139,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 469,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 68,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "file",
    "name": "src/screenplay/questions/LastScriptExecution.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class LastScriptExecution {\n\n    /**\n     * @desc\n     *  Enables asserting on the result of a function executed via {@link ExecuteScript}.\n     *\n     * @returns {Question<R>}\n     */\n    static result<R>(): Question<R> {\n        return Question.about(`last script execution result`, actor =>\n            BrowseTheWeb.as(actor).getLastScriptExecutionResult());\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/LastScriptExecution.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 473,
    "kind": "class",
    "name": "LastScriptExecution",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts",
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{LastScriptExecution}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "result",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution.result",
    "access": "public",
    "description": " Enables asserting on the result of a function executed via {@link ExecuteScript}.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<R>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<R>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "src/screenplay/questions/Pick.ts",
    "content": "import { Expectation, ExpectationMet } from '@serenity-js/assertions';\nimport { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { RelativeQuestion } from './RelativeQuestion';\n\nexport interface Collection<T> {\n    filter(fn: (item: T, index?: number) => boolean | Promise<boolean>): Collection<T>;\n    map<O>(fn: (item: T, index?: number) => O): PromiseLike<O[]>;\n    first(): T;\n    last(): T;\n    get(index: number): T;\n    count(): PromiseLike<number> | number;\n}\n\n/**\n * @experimental\n */\nexport class Pick<Item_Type, Collection_Type extends Collection<Item_Type> = Collection<Item_Type>> {\n\n    static from<IT, CT extends Collection<IT> = Collection<IT>>(collection: Question<CT> | CT) {\n        return new Pick<IT, CT>(collection);\n    }\n\n    constructor(\n        private readonly collection: Question<Collection_Type> | Collection_Type,\n        private readonly filters: Filters<Item_Type, Collection_Type> = new Filters<Item_Type, Collection_Type>(),\n    ) {\n    }\n\n    count(): Question<Promise<number>> {\n        return new NumberOfMatchingItems(this.collection, this.filters);\n    }\n\n    all(): Question<Collection_Type> {\n        return new AllMatchingItems(this.collection, this.filters);\n    }\n\n    first(): Question<Item_Type> {\n        return new FirstMatchingItem(this.collection, this.filters);\n    }\n\n    last(): Question<Item_Type> {\n        return new LastMatchingItem(this.collection, this.filters);\n    }\n\n    get(index: number): Question<Item_Type> {\n        return new NthMatchingItem(this.collection, this.filters, index);\n    }\n\n    where<Property_Type>(\n        question: RelativeQuestion<Item_Type, Promise<Property_Type> | Property_Type>,\n        expectation: Expectation<any, Promise<Property_Type> | Property_Type>,\n    ): Pick<Item_Type, Collection_Type> {\n        return new Pick<Item_Type, Collection_Type>(\n            this.collection,\n            this.filters.append(new Filter<Item_Type, Collection_Type, any>(question, expectation)),\n        );\n    }\n}\n\n/**\n * @package\n */\nclass Filters<Item_Type, Collection_Type\n    extends Collection<Item_Type>>\n    implements Question<(ct: Collection_Type) => Collection_Type>\n{\n    constructor(private readonly filters: Array<Filter<Item_Type, Collection_Type, any>> = []) {\n    }\n\n    append(filter: Filter<Item_Type, Collection_Type, any>) {\n        return new Filters(this.filters.concat(filter));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): (ct: Collection_Type) => Collection_Type {\n        return (collection: Collection_Type) =>\n            this.filters.reduce((filteredCollection, filter) =>\n                    filter.answeredBy(actor)(filteredCollection),\n                collection,\n            );\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        const fullDescription = this.filters\n            .reduce((description, filter) => description.concat(filter.toString()), [ ])\n            .join(' and ');\n\n        return fullDescription.length > 0\n            ? `where ${ fullDescription }`\n            : '';\n    }\n}\n\n/**\n * @package\n */\nclass Filter<Item_Type, Collection_Type extends Collection<Item_Type>, Property_Type>\n    implements Question<(ct: Collection_Type) => Collection_Type>\n{\n    constructor(\n        private readonly question: RelativeQuestion<Item_Type, Promise<Property_Type> | Property_Type>,\n        private readonly expectation: Expectation<any, Promise<Property_Type> | Property_Type>,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): (ct: Collection_Type) => Collection_Type {\n        return (collection: Collection_Type) =>\n            collection.filter((item: Item_Type) => {\n                const expectation = this.expectation.answeredBy(actor);\n                return Promise.resolve(this.question.of(item).answeredBy(actor))\n                    .then(answer => expectation(answer))\n                    .then(outcome => outcome instanceof ExpectationMet);\n            }) as Collection_Type;\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return formatted `${ this.question } does ${ this.expectation }`;\n    }\n}\n\n/**\n * @package\n */\nabstract class QuestionAboutCollectionItems<IT, CT extends Collection<IT>, Answer_Type>\n    implements Question<Answer_Type>\n{\n    constructor(\n        protected readonly collection: Question<CT> | CT,\n        private readonly filters: Filters<IT, CT>,\n        private readonly description: string,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    abstract answeredBy(actor: AnswersQuestions & UsesAbilities): Answer_Type;\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `${ this.description } ${ formatted `${ this.collection }`} ${ this.filters.toString() }`.trim();\n    }\n\n    protected collectionFilteredBy(actor: AnswersQuestions & UsesAbilities): CT {\n        const collection = this.isAQuestion(this.collection)\n            ? this.collection.answeredBy(actor)\n            : this.collection;\n\n        return this.filters.answeredBy(actor)(collection);\n    }\n\n    private isAQuestion<T>(h: any): h is Question<T> {\n        return !! (h as any).answeredBy;\n    }\n}\n\n/**\n * @package\n */\nclass NumberOfMatchingItems<IT, CT extends Collection<IT>>\n    extends QuestionAboutCollectionItems<IT, CT, Promise<number>>\n{\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the number of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<number> {\n        return Promise.resolve(this.collectionFilteredBy(actor).count());\n    }\n}\n\n/**\n * @package\n */\nclass AllMatchingItems<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, CT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, '');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): CT {\n        return this.collectionFilteredBy(actor);\n    }\n}\n\n/**\n * @package\n */\nclass FirstMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the first of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).first();\n    }\n}\n\n/**\n * @package\n */\nclass LastMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the last of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).last();\n    }\n}\n\n/**\n * @package\n */\nclass NthMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n    private static ordinalSuffixOf(index: number) {\n        const\n            j = index % 10,\n            k = index % 100;\n\n        switch (true) {\n            case (j === 1 && k !== 11):\n                return index + 'st';\n            case (j === 2 && k !== 12):\n                return index + 'nd';\n            case (j === 3 && k !== 13):\n                return index + 'rd';\n            default:\n                return index + 'th';\n        }\n    }\n\n    constructor(\n        collection: Question<CT> | CT,\n        filters: Filters<IT, CT>,\n        private readonly index: number,\n    ) {\n        super(collection, filters, `the ${ NthMatchingItem.ordinalSuffixOf(index + 1) } of`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).get(this.index);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Pick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "class",
    "name": "Pick",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Pick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Pick}",
    "description": "",
    "lineNumber": 32,
    "experimental": true,
    "interface": false
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "from",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Pick.from",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " CT"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#count",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#all",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#first",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#last",
    "access": "public",
    "description": " ",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#get",
    "access": "public",
    "description": " ",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#where",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "RelativeQuestion"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pick"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "Filters",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Filters",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 170,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "append",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#append",
    "access": "public",
    "description": " ",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Filter"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 98,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "class",
    "name": "Filter",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Filter",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 256,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 491,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filter#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Pick.ts~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filter#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 146,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "class",
    "name": "QuestionAboutCollectionItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 325,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 495,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 181,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "collectionFilteredBy",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#collectionFilteredBy",
    "access": "protected",
    "description": " ",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CT"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "isAQuestion",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#isAQuestion",
    "access": "private",
    "description": " ",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 499,
    "kind": "class",
    "name": "NumberOfMatchingItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 427,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 500,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 430,
    "undocument": true
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 502,
    "kind": "class",
    "name": "AllMatchingItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 474,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 476,
    "undocument": true
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "FirstMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 520,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 522,
    "undocument": true
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 551,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 508,
    "kind": "class",
    "name": "LastMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 566,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 568,
    "undocument": true
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 511,
    "kind": "class",
    "name": "NthMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 612,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "ordinalSuffixOf",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem.ordinalSuffixOf",
    "access": "private",
    "description": " ",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 643,
    "undocument": true
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 515,
    "kind": "file",
    "name": "src/screenplay/questions/RelativeQuestion.ts",
    "content": "import { Question } from '@serenity-js/core';\n\n/**\n * @public\n * @interface\n */\nexport interface RelativeQuestion<Parent, Answer> {\n    name?: string;\n    toString(): string;\n    of(parent: Parent): Question<Answer>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/RelativeQuestion.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 516,
    "kind": "class",
    "name": "RelativeQuestion",
    "memberof": "src/screenplay/questions/RelativeQuestion.ts",
    "static": true,
    "longname": "src/screenplay/questions/RelativeQuestion.ts~RelativeQuestion",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{RelativeQuestion}",
    "description": "",
    "lineNumber": 14,
    "interface": true
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "name",
    "memberof": "src/screenplay/questions/RelativeQuestion.ts~RelativeQuestion",
    "static": false,
    "longname": "src/screenplay/questions/RelativeQuestion.ts~RelativeQuestion#name",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 518,
    "kind": "file",
    "name": "src/screenplay/questions/Value.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\n\nimport { Attribute } from './Attribute';\nimport { RelativeQuestion } from './RelativeQuestion';\nimport { TargetNestedElement } from './targets';\n\nexport class Value\n    implements Question<Promise<string>>, RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n{\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return new Value(target);\n    }\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new Value(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return Attribute.of(this.target).called('value').answeredBy(actor);\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString(): string {\n        return formatted `the value of ${ this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Value.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "class",
    "name": "Value",
    "memberof": "src/screenplay/questions/Value.ts",
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Value}",
    "description": " ",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value.of",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#of",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 525,
    "kind": "file",
    "name": "src/screenplay/questions/Website.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Website {\n    /**\n     * Retrieves the title of the current page.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     */\n    static title(): Question<Promise<string>> {\n        return Question.about(`the title of the current page`, actor =>\n            BrowseTheWeb.as(actor).getTitle(),\n        );\n    }\n\n    /**\n     * Retrieves the url of the current page.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     */\n    static url(): Question<Promise<string>> {\n        return Question.about(`the url of the current page`, actor =>\n            BrowseTheWeb.as(actor).getCurrentUrl(),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Website.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 526,
    "kind": "class",
    "name": "Website",
    "memberof": "src/screenplay/questions/Website.ts",
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Website}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "title",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.title",
    "access": "public",
    "description": "Retrieves the title of the current page. ",
    "lineNumber": 10,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "url",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.url",
    "access": "public",
    "description": "Retrieves the url of the current page. ",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 529,
    "kind": "file",
    "name": "src/screenplay/questions/Window.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ISize } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Window {\n\n    /**\n     * @desc\n     *  Enables asserting on the browser window size.\n     *\n     * @returns {Question<Promise<ISize>>}\n     */\n    static size(): Question<Promise<ISize>> {\n        return Question.about(`browser window size`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).manage().window().getSize()));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Window.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 530,
    "kind": "class",
    "name": "Window",
    "memberof": "src/screenplay/questions/Window.ts",
    "static": true,
    "longname": "src/screenplay/questions/Window.ts~Window",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Window}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "size",
    "memberof": "src/screenplay/questions/Window.ts~Window",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Window.ts~Window.size",
    "access": "public",
    "description": " Enables asserting on the browser window size.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<ISize>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<ISize>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 532,
    "kind": "file",
    "name": "src/screenplay/questions/index.ts",
    "content": "export * from './Attribute';\nexport * from './Browser';\nexport * from './Cookie';\nexport * from './CSSClasses';\nexport * from './LastScriptExecution';\nexport { Pick } from './Pick';\nexport { Target } from './targets';\nexport * from './text';\nexport * from './Value';\nexport * from './Website';\nexport * from './Window';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "src/screenplay/questions/targets/Target.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\nimport { NestedTargetBuilder, TargetBuilder } from './builders';\nimport { TargetElement } from './TargetElement';\nimport { TargetElements } from './TargetElements';\nimport { TargetNestedElement } from './TargetNestedElement';\nimport { TargetNestedElements } from './TargetNestedElements';\n\n/**\n * @desc\n *  Provides a convenient way to retrieve a single web element or multiple web elements,\n *  so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n *\n *  Check out the examples below, as well as the unit tests demonstrating the usage.\n *\n *  @example <caption>Imaginary website under test</caption>\n *  <body>\n *      <ul id=\"basket\">\n *          <li><a href=\"#\">Apple</a></li>\n *          <li><a href=\"#\">Banana</a></li>\n *          <li><a href=\"#\">Coconut</a></li>\n *      </ul>\n *      <div id=\"summary\"><strong class=\"out-of-stock\">Coconut</strong> is not available</div>\n *      <button type=\"submit\">Proceed to Checkout</button>\n *  </body>\n *\n *  @example <caption>Locating a single element</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  const proceedToCheckoutButton =\n *      Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));\n *\n *  @example <caption>Locating multiple elements</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  const basketItems =\n *      Target.all('items in the basket').located(by.css('ul#basket li'));\n *\n *  @example <caption>Locating element relative to another element</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  const summary =\n *      Target.the('summary').located(by.id('message'));\n *\n *  const outOfStockItem =\n *      Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))\n *\n *  @example <caption>Clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Jane')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Click.on(proceedToCheckoutButton),\n *      );\n *\n *  @example <caption>Retrieving text of multiple elements and performing an assertion</caption>\n *  import { Ensure, contain } from '@serenity-js/assertions';\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, Text } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  const basketItemNames = Text.ofAll(basketItems);\n *\n *  actorCalled('Jane')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Ensure.that(basketItemNames, contain('Apple'))\n *      );\n *\n *  @example <caption>Waiting on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, Text, Wait, isClickable } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Jane')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Wait.until(proceedToCheckoutButton, isClickable()),\n *      );\n */\nexport class Target  {\n\n    /**\n     * @desc\n     *  Locates a single web element\n     *\n     * @param {string} name - A human-readable name of the element to be used in the report\n     * @returns {TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}\n     */\n    static the(name: string): TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement> {\n        return {\n            located: (byLocator: Locator): TargetElement =>\n                new TargetElement(name, byLocator),\n\n            of: (parent: Question<ElementFinder> | ElementFinder) => {\n                return {\n                    located: (byLocator: Locator): TargetNestedElement =>\n                        new TargetNestedElement(parent, new TargetElement(name, byLocator)),\n                };\n            },\n        };\n    }\n\n    /**\n     * @desc\n     *  Locates a group of web elements\n     *\n     * @param {string} name - A human-readable name of the elements to be used in the report\n     * @returns {TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}\n     */\n    static all(name: string): TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements> {\n        return {\n            located: (byLocator: Locator): TargetElements =>\n                new TargetElements(name, byLocator),\n\n            of: (parent: Question<ElementFinder> | ElementFinder) => {\n                return {\n                    located: (byLocator: Locator): TargetNestedElements =>\n                        new TargetNestedElements(parent, new TargetElements(name, byLocator)),\n                };\n            },\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/Target.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "Target",
    "memberof": "src/screenplay/questions/targets/Target.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{Target}",
    "description": " Provides a convenient way to retrieve a single web element or multiple web elements,\n so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n\n Check out the examples below, as well as the unit tests demonstrating the usage.",
    "examples": [
      "<caption>Imaginary website under test</caption>\n <body>\n     <ul id=\"basket\">\n         <li><a href=\"#\">Apple</a></li>\n         <li><a href=\"#\">Banana</a></li>\n         <li><a href=\"#\">Coconut</a></li>\n     </ul>\n     <div id=\"summary\"><strong class=\"out-of-stock\">Coconut</strong> is not available</div>\n     <button type=\"submit\">Proceed to Checkout</button>\n </body>",
      "<caption>Locating a single element</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n const proceedToCheckoutButton =\n     Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));",
      "<caption>Locating multiple elements</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n const basketItems =\n     Target.all('items in the basket').located(by.css('ul#basket li'));",
      "<caption>Locating element relative to another element</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n const summary =\n     Target.the('summary').located(by.id('message'));\n\n const outOfStockItem =\n     Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))",
      "<caption>Clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Jane')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(proceedToCheckoutButton),\n     );",
      "<caption>Retrieving text of multiple elements and performing an assertion</caption>\n import { Ensure, contain } from '@serenity-js/assertions';\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, Text } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n const basketItemNames = Text.ofAll(basketItems);\n\n actorCalled('Jane')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Ensure.that(basketItemNames, contain('Apple'))\n     );",
      "<caption>Waiting on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, Text, Wait, isClickable } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Jane')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Wait.until(proceedToCheckoutButton, isClickable()),\n     );"
    ],
    "lineNumber": 94,
    "interface": false
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/questions/targets/Target.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target.the",
    "access": "public",
    "description": " Locates a single web element",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A human-readable name of the element to be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/questions/targets/Target.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target.all",
    "access": "public",
    "description": " Locates a group of web elements",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A human-readable name of the elements to be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetElement.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\nimport { BrowseTheWeb } from '../../abilities';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { override } from './override';\nimport { TargetNestedElement } from './TargetNestedElement';\n\n/**\n * @desc\n *  Locates a single web element.\n *  Instead of using this class directly, please use {@link Target.the} instead.\n *\n * @public\n * @see {@link Target}\n */\nexport class TargetElement\n    implements Question<ElementFinder>, RelativeQuestion<Question<ElementFinder> | ElementFinder, ElementFinder>\n{\n    /**\n     * @desc\n     *\n     * @param {string} description - A human-readable description to be used in the report\n     * @param {protractor~Locator} locator - A locator to be used when locating the element\n     */\n    constructor(\n        protected readonly description: string,\n        protected readonly locator: Locator,\n    ) {\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElement}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElement(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return override(\n            BrowseTheWeb.as(actor).locate(this.locator),\n            'toString',\n            this.toString.bind(this),\n        );\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `the ${ this.description }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "class",
    "name": "TargetElement",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetElement}",
    "description": " Locates a single web element.\n Instead of using this class directly, please use {@link Target.the} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 539,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable description to be used in the report"
      },
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": "A locator to be used when locating the element"
      }
    ]
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#of",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElement}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElement"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 62,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetElements.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder, Locator } from 'protractor';\nimport { BrowseTheWeb } from '../../abilities';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { override } from './override';\nimport { TargetNestedElements } from './TargetNestedElements';\n\n/**\n * @desc\n *  Locates a group of web element.\n *  Instead of using this class directly, please use {@link Target.all} instead.\n *\n * @public\n * @see {@link Target}\n */\nexport class TargetElements\n    implements Question<ElementArrayFinder>, RelativeQuestion<Question<ElementFinder> | ElementFinder, ElementArrayFinder>\n{\n\n    /**\n     * @desc\n     *\n     * @param {string} description - A human-readable description to be used in the report\n     * @param {protractor~Locator} locator - A locator to be used when locating the element\n     */\n    constructor(\n        private readonly description: string,\n        private readonly locator: Locator,\n    ) {\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElements}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElements(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return override(\n            BrowseTheWeb.as(actor).locateAll(this.locator),\n            'toString',\n            this.toString.bind(this),\n        );\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `the ${ this.description }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 544,
    "kind": "class",
    "name": "TargetElements",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetElements}",
    "description": " Locates a group of web element.\n Instead of using this class directly, please use {@link Target.all} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 545,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable description to be used in the report"
      },
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": "A locator to be used when locating the element"
      }
    ]
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#of",
    "access": "public",
    "description": "",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElements}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElements"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 63,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetNestedElement.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { override } from './override';\n\n/**\n * @desc\n *  Locates a single web element located within another web element.\n *  Instead of using this class directly, please use {@link Target.the} instead.\n *\n * @public\n * @see {@link Target}\n */\nexport class TargetNestedElement\n    implements Question<ElementFinder>, RelativeQuestion<Question<ElementFinder> | ElementFinder, ElementFinder>\n{\n\n    /**\n     * @desc\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @param {Question<ElementFinder> | ElementFinder} child\n     */\n    constructor(\n        private readonly parent: Question<ElementFinder> | ElementFinder,\n        private readonly child: Question<ElementFinder> | ElementFinder,\n    ) {\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElement}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElement(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return withAnswerOf<ElementFinder, ElementFinder>(actor, this.parent, parent =>\n            withAnswerOf<ElementFinder, ElementFinder>(actor, this.child, child => override(\n                parent.element(child.locator()),\n                'toString',\n                this.toString.bind(this),\n            )));\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `${ this.child.toString() } of ${ this.parent }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetNestedElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 550,
    "kind": "class",
    "name": "TargetNestedElement",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetNestedElement}",
    "description": " Locates a single web element located within another web element.\n Instead of using this class directly, please use {@link Target.the} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 551,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#of",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElement}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElement"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 63,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetNestedElements.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { override } from './override';\n\n/**\n * @desc\n *  Locates a group of web element located within another web element.\n *  Instead of using this class directly, please use {@link Target.all} instead.\n *\n * @public\n * @see {@link Target}\n */\nexport class TargetNestedElements\n    implements Question<ElementArrayFinder>, RelativeQuestion<Question<ElementFinder> | ElementFinder, ElementArrayFinder>\n{\n\n    /**\n     * @desc\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @param {Question<ElementArrayFinder> | ElementArrayFinder} children\n     */\n    constructor(\n        private readonly parent: Question<ElementFinder> | ElementFinder,\n        private readonly children: Question<ElementArrayFinder> | ElementArrayFinder,\n    ) {\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElements}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElements(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return withAnswerOf<ElementFinder, ElementArrayFinder>(actor, this.parent, parent =>\n            withAnswerOf<ElementArrayFinder, ElementArrayFinder>(actor, this.children, children => override(\n                parent.all(children.locator()),\n                'toString',\n                this.toString.bind(this),\n            )));\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `${ this.children.toString() } of ${ this.parent }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetNestedElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "class",
    "name": "TargetNestedElements",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetNestedElements}",
    "description": " Locates a group of web element located within another web element.\n Instead of using this class directly, please use {@link Target.all} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 557,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementArrayFinder> ",
          " ElementArrayFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#of",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElements}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElements"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 63,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "file",
    "name": "src/screenplay/questions/targets/builders.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\n\nexport interface TargetBuilder<T> {\n    located(byLocator: Locator): T;\n}\n\nexport interface NestedTargetBuilder<T> {\n    of(parent: Question<ElementFinder> | ElementFinder): TargetBuilder<T>;\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/builders.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 562,
    "kind": "file",
    "name": "src/screenplay/questions/targets/index.ts",
    "content": "export * from './Target';\nexport * from './TargetElement';\nexport * from './TargetElements';\nexport * from './TargetNestedElement';\nexport * from './TargetNestedElements';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 563,
    "kind": "file",
    "name": "src/screenplay/questions/targets/override.ts",
    "content": "/**\n * @package\n * @param obj\n * @param name - name of the method or field to override\n * @param implementation\n */\nexport function override<T extends object, K extends keyof T>(obj: T, name: K, implementation: T[K]) {\n    return new Proxy<T>(obj, {\n        get(o: T, prop: string | number) {\n            return prop === name\n                ? implementation\n                : obj[prop];\n        },\n    });\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/override.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 564,
    "kind": "function",
    "name": "override",
    "memberof": "src/screenplay/questions/targets/override.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/override.ts~override",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/targets/override.ts",
    "importStyle": "{override}",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the method or field to override"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "implementation",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "file",
    "name": "src/screenplay/questions/text/Text.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { TextOfMultipleElements } from './TextOfMultipleElements';\nimport { TextOfSingleElement } from './TextOfSingleElement';\n\n/**\n * @public\n */\nexport class Text {\n\n    static of(target: Question<ElementFinder> | ElementFinder):\n        Question<Promise<string>> & RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n    {\n        return new TextOfSingleElement(target);\n    }\n\n    static ofAll(target: Question<ElementArrayFinder> | ElementArrayFinder):\n        Question<Promise<string[]>> & RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n    {\n        return new TextOfMultipleElements(target);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/Text.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 566,
    "kind": "class",
    "name": "Text",
    "memberof": "src/screenplay/questions/text/Text.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/text",
    "importStyle": "{Text}",
    "description": "",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text.of",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question & RelativeQuestion"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "ofAll",
    "memberof": "src/screenplay/questions/text/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text.ofAll",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementArrayFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question & RelativeQuestion"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 569,
    "kind": "file",
    "name": "src/screenplay/questions/text/TextOfMultipleElements.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\n\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { TargetNestedElements } from '../targets';\n\n/**\n * @package\n */\nexport class TextOfMultipleElements\n    implements RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n{\n    constructor(protected readonly target: Question<ElementArrayFinder> | ElementArrayFinder) {\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new TextOfMultipleElements(new TargetNestedElements(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n\n        // protractor ignores type definitions for the ElementArrayFinder, hence the `any`\n        // https://github.com/angular/protractor/blob/c3978ec166760ac07db01e700c4aaaa19d9b5c38/lib/element.ts#L92\n        return withAnswerOf(actor, this.target, eaf => Promise.resolve(eaf.getText() as any) as Promise<string[]>);\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `the text of ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/TextOfMultipleElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 570,
    "kind": "class",
    "name": "TextOfMultipleElements",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/text/TextOfMultipleElements.ts",
    "importStyle": "{TextOfMultipleElements}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#of",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 43,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "file",
    "name": "src/screenplay/questions/text/TextOfSingleElement.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\n\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { RelativeQuestion } from '../RelativeQuestion';\nimport { TargetNestedElement } from '../targets';\n\n/**\n * @package\n */\nexport class TextOfSingleElement\n    implements RelativeQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n{\n    constructor(protected readonly target: Question<ElementFinder> | ElementFinder) {\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new TextOfSingleElement(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return withAnswerOf(actor, this.target, elf => elf.getText() as any);\n    }\n\n    /**\n     * Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}.\n     */\n    toString() {\n        return `the text of ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/TextOfSingleElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 576,
    "kind": "class",
    "name": "TextOfSingleElement",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/text/TextOfSingleElement.ts",
    "importStyle": "{TextOfSingleElement}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 577,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#of",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#toString",
    "access": "public",
    "description": "Description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Question}. ",
    "lineNumber": 40,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "file",
    "name": "src/screenplay/questions/text/index.ts",
    "content": "export * from './Text';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 582,
    "kind": "file",
    "name": "src/screenplay/withAnswerOf.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\n\n/**\n * @private\n * @param actor\n * @param maybeQuestion\n * @param fn\n */\nexport function withAnswerOf<T, O>(\n    actor: AnswersQuestions & UsesAbilities,\n    maybeQuestion: Question<T> | T,\n    fn: (item: T) => O,\n) {\n    const answer = Question.isAQuestion(maybeQuestion)\n        ? maybeQuestion.answeredBy(actor)\n        : maybeQuestion;\n\n    return fn(answer);\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/screenplay/withAnswerOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 583,
    "kind": "function",
    "name": "withAnswerOf",
    "memberof": "src/screenplay/withAnswerOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/withAnswerOf.ts~withAnswerOf",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/withAnswerOf.ts",
    "importStyle": "{withAnswerOf}",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeQuestion",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "file",
    "name": "src/stage/crew/index.ts",
    "content": "export * from './photographer';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 585,
    "kind": "file",
    "name": "src/stage/crew/photographer/Photographer.ts",
    "content": "import { LogicError } from '@serenity-js/core';\nimport { ActivityFinished, ActivityStarts, DomainEvent } from '@serenity-js/core/lib/events';\nimport { Stage, StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { PhotoTakingStrategy } from './strategies';\n\n/**\n * @desc\n *  The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n *  of the web browser the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.\n *\n * @example <caption>Assigning the Photographer to the Stage</caption>\n *\n * const { ArtifactArchiver } = require('@serenity-js/core');\n * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n *\n * exports.config = {\n *\n *     serenity: {\n *         crew: [\n *             ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *             Photographer.whoWill(TakePhotosOfFailures),\n *         ]\n *     },\n *\n *     // ... rest of the config omitted for brevity\n * };\n *\n * @example <caption>Taking photos upon failures only</caption>\n *\n * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosOfFailures)\n *\n * @example <caption>Taking photos of all the interactions</caption>\n *\n * const { Photographer, TakePhotosOfInteractions } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosOfInteractions)\n *\n * @example <caption>Taking photos before and after all the interactions</caption>\n *\n * const { Photographer, TakePhotosBeforeAndAfterInteractions } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosBeforeAndAfterInteractions)\n *\n * @see {@link @serenity-js/core/lib/stage~Stage}\n */\nexport class Photographer implements StageCrewMember {\n\n    /**\n     * @desc\n     *  Instantiates a new {@link Photographer} configured to take photos (screenshots)\n     *  as per the specified {@link PhotoTakingStrategy}.\n     *\n     * @param {Function} strategy - A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}.\n     * @returns {StageCrewMember}\n     */\n    static whoWill(strategy: new () => PhotoTakingStrategy): StageCrewMember {\n        return new Photographer(new strategy());\n    }\n\n    /**\n     * @param {PhotoTakingStrategy} photoTakingStrategy\n     * @param {Stage} stage\n     */\n    constructor(\n        private readonly photoTakingStrategy: PhotoTakingStrategy,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new Photographer(this.photoTakingStrategy, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}\n     *  this {@link StageCrewMember} is assigned to.\n     *\n     * @param {DomainEvent} event\n     * @returns void\n     */\n    notifyOf(event: DomainEvent): void {\n        if (! this.stage) {\n            throw new LogicError(`Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n        }\n\n        if (! this.stage.theShowHasStarted()) {\n            return void 0;\n        }\n\n        if (event instanceof ActivityStarts || event instanceof ActivityFinished) {\n            this.photoTakingStrategy.considerTakingPhoto(event, this.stage);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/Photographer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 586,
    "kind": "class",
    "name": "Photographer",
    "memberof": "src/stage/crew/photographer/Photographer.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer",
    "importStyle": "{Photographer}",
    "description": " The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n of the web browser the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.",
    "examples": [
      "<caption>Assigning the Photographer to the Stage</caption>\n\nconst { ArtifactArchiver } = require('@serenity-js/core');\nconst { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n\nexports.config = {\n\n    serenity: {\n        crew: [\n            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n            Photographer.whoWill(TakePhotosOfFailures),\n        ]\n    },\n\n    // ... rest of the config omitted for brevity\n};",
      "<caption>Taking photos upon failures only</caption>\n\nconst { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosOfFailures)",
      "<caption>Taking photos of all the interactions</caption>\n\nconst { Photographer, TakePhotosOfInteractions } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosOfInteractions)",
      "<caption>Taking photos before and after all the interactions</caption>\n\nconst { Photographer, TakePhotosBeforeAndAfterInteractions } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosBeforeAndAfterInteractions)"
    ],
    "see": [
      "{@link @serenity-js/core/lib/stage~Stage}"
    ],
    "lineNumber": 55,
    "interface": false
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "whoWill",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer.whoWill",
    "access": "public",
    "description": " Instantiates a new {@link Photographer} configured to take photos (screenshots)\n as per the specified {@link PhotoTakingStrategy}.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "strategy",
        "description": "A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "PhotoTakingStrategy"
        ],
        "spread": false,
        "optional": false,
        "name": "photoTakingStrategy",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link Stage}\n this {@link StageCrewMember} is assigned to.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "void"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "void"
    }
  },
  {
    "__docId__": 591,
    "kind": "file",
    "name": "src/stage/crew/photographer/index.ts",
    "content": "export * from './strategies';\nexport * from './Photographer';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 592,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport {\n    ActivityFinished,\n    ActivityRelatedArtifactGenerated,\n    ActivityStarts,\n    AsyncOperationAttempted,\n    AsyncOperationCompleted,\n    AsyncOperationFailed,\n    DomainEvent,\n} from '@serenity-js/core/lib/events';\nimport { CorrelationId, Description, Name, Photo } from '@serenity-js/core/lib/model';\nimport { BrowseTheWeb } from '../../../../screenplay';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n *  of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  under specific conditions.\n *\n * @abstract\n */\nexport abstract class PhotoTakingStrategy {\n\n    /**\n     * @desc\n     *  Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n     *\n     * @param {@serenity-js/core/lib/events~ActivityStarts | @serenity-js/core/lib/events~ActivityFinished} event\n     * @param {@serenity-js/core/lib/stage~Stage} stage - the Stage that holds reference to the Actor in the spotlight\n     * @returns void\n     *\n     * @see {@serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}\n     */\n    considerTakingPhoto(event: ActivityStarts | ActivityFinished, stage: Stage): void {\n        if (this.shouldTakeAPhotoOf(event)) {\n            let browseTheWeb: BrowseTheWeb;\n\n            try {\n                browseTheWeb = BrowseTheWeb.as(stage.theActorInTheSpotlight());\n            } catch (error) {\n                return void 0;\n            }\n\n            const\n                id              = CorrelationId.create(),\n                nameSuffix      = this.photoNameFor(event);\n\n            stage.announce(new AsyncOperationAttempted(\n                new Description(`[Photographer:${ this.constructor.name }] Taking screenshot of '${ nameSuffix }'...`),\n                id,\n            ));\n\n            Promise.all([\n                browseTheWeb.takeScreenshot(),\n                browseTheWeb.getCapabilities(),\n            ]).then(([ screenshot, capabilities ]) => {\n\n                const\n                    context   = [ capabilities.get('platform'), capabilities.get('browserName'), capabilities.get('version') ],\n                    photoName = this.combinedNameFrom(...context, nameSuffix);\n\n                stage.announce(new ActivityRelatedArtifactGenerated(\n                    event.value,\n                    photoName,\n                    Photo.fromBase64(screenshot),\n                ));\n\n                stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Took screenshot of '${ nameSuffix }' on ${ context }`),\n                    id,\n                ));\n            }).catch(error => {\n                stage.announce(new AsyncOperationFailed(error, id));\n            });\n        }\n    }\n\n    protected abstract shouldTakeAPhotoOf(event: DomainEvent): boolean;\n\n    protected abstract photoNameFor(event: DomainEvent): string;\n\n    private combinedNameFrom(...parts: string[]): Name {\n        return new Name(parts.filter(v => !! v).join('-'));\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 593,
    "kind": "class",
    "name": "PhotoTakingStrategy",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{PhotoTakingStrategy}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n under specific conditions.",
    "lineNumber": 30,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "considerTakingPhoto",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#considerTakingPhoto",
    "access": "public",
    "description": " Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.",
    "see": [
      "{@serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}"
    ],
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "void"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ActivityStarts ",
          " @serenity-js/core/lib/events~ActivityFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "the Stage that holds reference to the Actor in the spotlight"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "void"
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "combinedNameFrom",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#combinedNameFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n *  every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n *\n *  *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n *  which will seriously affect the performance of your tests.\n *  For this reason, it's best to use it only for debugging purposes.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosBeforeAndAfterInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionStarts\n            || event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionStarts | InteractionFinished): string {\n        return event instanceof InteractionStarts\n            ? `Before ${ event.value.name.value }`\n            : `After ${ event.value.name.value }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 597,
    "kind": "class",
    "name": "TakePhotosBeforeAndAfterInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosBeforeAndAfterInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n\n *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n which will seriously affect the performance of your tests.\n For this reason, it's best to use it only for debugging purposes.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionStarts ",
          " InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 600,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { ImplementationPending } from '@serenity-js/core/lib/model';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n *\n *  This strategy works best when you are interested in the screenshots only when\n *  the a fails.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosOfFailures extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished\n            && event.outcome.isWorseThan(ImplementationPending);\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.value.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 601,
    "kind": "class",
    "name": "TakePhotosOfFailures",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfFailures}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n\n This strategy works best when you are interested in the screenshots only when\n the a fails.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 604,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n *\n *  This strategy works best when you want the results of your automated tests\n *  to become comprehensive living documentation of your system.\n *\n *  *Please note* that taking screenshots affects the performance of your tests.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosOfInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.value.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "TakePhotosOfInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n\n This strategy works best when you want the results of your automated tests\n to become comprehensive living documentation of your system.\n\n *Please note* that taking screenshots affects the performance of your tests.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/index.ts",
    "content": "export * from './PhotoTakingStrategy';\nexport * from './TakePhotosOfFailures';\nexport * from './TakePhotosOfInteractions';\nexport * from './TakePhotosBeforeAndAfterInteractions';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "file",
    "name": "src/stage/index.ts",
    "content": "export * from './crew';\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/src/stage/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a Node.js library designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\n## Serenity/JS Protractor\n\nThe `@serenity-js/protractor` module is a Screenplay Patter-style adapter for the [Protractor framework](https://www.protractortest.org/), which helps with testing Angular, React, Vue and other frontend web apps.\n\n### Configuring Protractor\n\n```typescript\n// protractor.conf.js\n\n// Import the Serenity/JS reporting services, a.k.a. the \"Stage Crew Members\"\nconst\n    { ArtifactArchiver } = require('@serenity-js/core'),\n    { ConsoleReporter } = require('@serenity-js/console-reporter'),\n    { Photographer, TakePhotosOfFailures, TakePhotosOfInteractions } = require('@serenity-js/protractor'),\n    { SerenityBDDReporter } = require('@serenity-js/serenity-bdd');\n\nexports.config = {\n    // Tell Protractor to use the Serenity/JS framework Protractor Adapter\n    framework:      'custom',\n    frameworkPath:  require.resolve('@serenity-js/protractor/adapter'),\n  \n    // Configure Serenity/JS to use an appropriate test runner\n    // and the Stage Crew Members we've imported at the top of this file\n    serenity: {\n        runner: 'jasmine',\n        // runner: 'cucumber',\n        // runner: 'mocha',\n        crew: [\n            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n            ConsoleReporter.forDarkTerminals(),\n            Photographer.whoWill(TakePhotosOfFailures),     // or Photographer.whoWill(TakePhotosOfInteractions),\n            new SerenityBDDReporter(),\n        ]\n    },\n\n    // configure Cucumber runner\n    cucumberOpts: {\n        // see the Cucumber configuration options below\n    },\n\n    // or configure Jasmine runner\n    jasmineNodeOpts: {\n        // see the Jasmine configuration options below\n    },\n\n    // or configure Mocha runner\n    mochaOpts: {\n        // see the Mocha configuration options below\n    },\n\n    // ... other Protractor-specific configuration   \n};\n```\n\nLearn more about:\n- [Cucumber configuration options](https://serenity-js.org/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html)\n- [Jasmine configuration options](https://serenity-js.org/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html)\n- [Mocha configuration options](https://serenity-js.org/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html)\n- [Protractor configuration file](https://github.com/angular/protractor/blob/master/lib/config.ts).\n\n### Interacting with websites and web apps\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { BrowseTheWeb, Navigate, Target, Text } from '@serenity-js/protractor';\nimport { protractor, by } from 'protractor';\n\nclass SerenityJSWebsite {\n    static header = Target.the('header').located(by.css('h1'));\n}\n\nactorCalled('Priya')\n    .whoCan(\n        BrowseTheWeb.using(protractor.browser_download_url)\n    )\n    .attemptsTo(\n        Navigate.to('https://serenity-js.org'),\n        Ensure.that(Text.of(SerenityJSWebsite.header), equals('Next generation acceptance testing')),\n)\n```\n\n### Template Repositories\n\nThe easiest way for you to start writing web-based acceptance tests using Serenity/JS, Protractor and either [Jasmine](https://jasmine.github.io/) or [Cucumber](https://github.com/cucumber/cucumber-js) is by using one of the below template repositories:\n\n- [Sernity/JS, Jasmine, and Protractor template](https://github.com/serenity-js/serenity-js-jasmine-protractor-template)\n- [Serenity/JS, Cucumber, and Protractor template](https://github.com/serenity-js/serenity-js-jasmine-protractor-template)\n\n\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/protractor\",\n  \"version\": \"2.11.0\",\n  \"description\": \"Test your web apps with Serenity/JS\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/serenity-js\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"serenity-js\",\n    \"ui\",\n    \"frontend\",\n    \"angular\",\n    \"react\",\n    \"vue\",\n    \"bdd\",\n    \"tdd\",\n    \"test\",\n    \"testing\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"tslint --project tsconfig-lint.json --config ../../tslint.json --format stylish\",\n    \"debug\": \"node --inspect-brk node_modules/.bin/protractor ./spec/protractor.conf.js\",\n    \"test\": \"nyc --report-dir ../../target/coverage/protractor protractor ./spec/protractor.conf.js\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \">= 10\",\n    \"npm\": \">= 6\"\n  },\n  \"dependencies\": {\n    \"deepmerge\": \"^4.2.2\",\n    \"is-plain-object\": \"^3.0.0\",\n    \"tiny-types\": \"^1.14.1\"\n  },\n  \"optionalDependencies\": {\n    \"@serenity-js/cucumber\": \"2.11.0\",\n    \"@serenity-js/jasmine\": \"2.11.0\",\n    \"@serenity-js/mocha\": \"2.11.0\"\n  },\n  \"peerDependencies\": {\n    \"@serenity-js/core\": \"2.x\",\n    \"protractor\": \"^5.0.0 || ^7.0.0\",\n    \"selenium-webdriver\": \"^3.6.0\"\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.0.7\",\n    \"@integration/testing-tools\": \"2.11.0\",\n    \"@serenity-js/assertions\": \"2.11.0\",\n    \"@serenity-js/core\": \"2.11.0\",\n    \"@serenity-js/cucumber\": \"2.10.3\",\n    \"@serenity-js/jasmine\": \"2.10.3\",\n    \"@serenity-js/local-server\": \"2.11.0\",\n    \"@serenity-js/mocha\": \"2.10.3\",\n    \"@types/express\": \"^4.17.6\",\n    \"@types/html-minifier\": \"^3.5.3\",\n    \"@types/mocha\": \"^7.0.2\",\n    \"@types/selenium-webdriver\": \"^3.0.17\",\n    \"chromedriver\": \"^83.0.0\",\n    \"express\": \"^4.17.1\",\n    \"html-minifier\": \"^4.0.0\",\n    \"protractor\": \"^7.0.0\",\n    \"selenium-webdriver\": \"^3.6.0\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"node_modules\",\n      \"spec\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 610,
    "kind": "testFile",
    "name": "spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Serenity, Stage } from '@serenity-js/core';\nimport { DomainEvent, SceneFinished, SceneFinishes, SceneStarts } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport { Category, ExecutionFailedWithError, ExecutionSuccessful, Name, ProblemIndication, ScenarioDetails } from '@serenity-js/core/lib/model';\nimport { ArtifactArchiver, Clock, StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { Config, Runner } from 'protractor';\nimport * as sinon from 'sinon';\n\nimport { ProtractorFrameworkAdapter, TestRunnerDetector } from '../../src/adapter';\nimport { TestRunner } from '../../src/adapter/runners/TestRunner';\n\ndescribe('ProtractorFrameworkAdapter', () => {\n\n    /*\n     * Protractor spec:\n     *  https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/README.md#framework-adapters-for-protractor\n     *\n     * Jasmine runner:\n     *  https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L17-L49\n     */\n\n    let protractorRunner:   sinon.SinonStubbedInstance<Runner>,\n        testRunnerDetector: sinon.SinonStubbedInstance<TestRunnerDetector>,\n        testRunner:         TestRunner,\n        serenity:           Serenity,\n        adapter:            ProtractorFrameworkAdapter;\n\n    beforeEach(() => {\n        const discreteClock: Clock = new Clock(function () {\n            let currentTime = 0;\n            return () => {\n                const now = new Date(currentTime);\n                currentTime += 250;\n                return now;\n            };\n        }());\n\n        protractorRunner    = sinon.createStubInstance(Runner);\n        testRunnerDetector  = sinon.createStubInstance(TestRunnerDetector);\n        serenity            = new Serenity(discreteClock);\n        testRunner          = new SimpleTestRunner(serenity);\n\n        testRunnerDetector.runnerFor.returns(testRunner);\n\n        adapter = new ProtractorFrameworkAdapter(serenity, protractorRunner, testRunnerDetector as unknown as TestRunnerDetector);\n    });\n\n    class TestRunnerSimulator implements StageCrewMember {\n        constructor(private readonly stage: Stage = null) {\n        }\n\n        assignedTo(stage: Stage): StageCrewMember {\n            return new TestRunnerSimulator(stage);\n        }\n\n        notifyOf(event: DomainEvent): void {\n            if (event instanceof SceneStarts) {\n                this.stage.announce(new SceneFinishes(event.value, this.stage.currentTime()));\n            }\n        }\n\n    }\n\n    beforeEach(() => {\n        protractorRunner.getConfig.returns({ });\n    });\n\n    const expectedError = new Error(`We're sorry, something happened`);\n    expectedError.stack = `Error: We're sorry, something happened`;\n\n    function sample(type: 'passing.spec.ts' | 'failing.spec.ts' | string) {\n        return type === 'passing.spec.ts'\n            ? { path: 'passing.spec.ts', name: 'passing test', category: 'samples', description: 'samples passing test', outcome: new ExecutionSuccessful() }\n            : { path: 'failing.spec.ts', name: 'failing test', category: 'samples', description: 'samples failing test', outcome: new ExecutionFailedWithError(expectedError) };\n    }\n\n    describe('to meet the requirements described in \"Framework Adapters for Protractor\"', () => {\n\n        describe('produces a Protractor report that', () => {\n\n            it('describes no test results if no tests were executed', () =>\n                expect(adapter.run([]))\n                    .to.eventually.deep.equal({\n                        failedCount: 0,\n                        specResults: [],\n                    }));\n\n            it('describes successful tests', () =>\n                expect(adapter.run([ sample('passing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 0,\n                        specResults: [{\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }],\n                    }));\n\n            it('describes failing tests', () =>\n                expect(adapter.run([ sample('failing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 1,\n                        specResults: [{\n                            description: sample('failing.spec.ts').description,\n                            duration:    2000,\n                            assertions: [{\n                                passed:     false,\n                                errorMsg:   (sample('failing.spec.ts').outcome as ProblemIndication).error.message,\n                                stackTrace: (sample('failing.spec.ts').outcome as ProblemIndication).error.stack,\n                            }],\n                        }],\n                    }));\n\n            it('describes both successful and failing tests', () =>\n                expect(adapter.run([ sample('passing.spec.ts').path, sample('failing.spec.ts').path, sample('passing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 1,\n                        specResults: [{\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }, {\n                            description: sample('failing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     false,\n                                errorMsg:   (sample('failing.spec.ts').outcome as ProblemIndication).error.message,\n                                stackTrace: (sample('failing.spec.ts').outcome as ProblemIndication).error.stack,\n                            }],\n                        }, {\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }],\n                    }));\n        });\n\n        it('invokes runner.runTestPreparer before executing the tests', () => {\n            const testRunnerRunMethod = sinon.spy(testRunner, 'run');\n\n            return expect(adapter.run([])).to.be.fulfilled\n                .then(() => {\n                    sinon.assert.callOrder(\n                        protractorRunner.runTestPreparer,\n                        testRunnerRunMethod,\n                    );\n                });\n        });\n\n        it('invokes runner.getConfig().onComplete() after executing the tests', () => {\n\n            const protractorConfig: Partial<Config> = {\n                onComplete: sinon.stub().returns(Promise.resolve(void 0)),\n            };\n\n            protractorRunner.getConfig.returns(protractorConfig);\n\n            const testRunnerRunMethod = sinon.spy(testRunner, 'run');\n\n            return expect(adapter.run([])).to.be.fulfilled\n                .then(() => {\n                    sinon.assert.callOrder(\n                        testRunnerRunMethod,\n                        protractorConfig.onComplete as sinon.SinonStub,\n                    );\n                });\n        });\n\n        describe('when a test succeeds', () => {\n\n            it('invokes runner.emit with a \"testPass\" message', () =>\n                expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.emit).to.have.been.calledWith('testPass', {\n                            name:       sample('passing.spec.ts').name,\n                            category:   sample('passing.spec.ts').category,\n                        });\n                    }));\n\n            it('invokes runner.afterEach after each test', () =>\n                expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.afterEach).to.have.been.calledTwice;    // tslint:disable-line:no-unused-expression\n                    }));\n        });\n\n        describe('when a test fails', () => {\n\n            it('invokes runner.emit with a \"testFail\" message', () =>\n                expect(adapter.run([\n                        sample('failing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.emit).to.have.been.calledWith('testFail', {\n                            name:       sample('failing.spec.ts').name,\n                            category:   sample('failing.spec.ts').category,\n                        });\n                    }));\n\n            it('invokes runner.afterEach after each test', () =>\n                expect(adapter.run([\n                        sample('failing.spec.ts').path,\n                        sample('failing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled            // promise resolved even upon test failure; test suite failure is determined based on the ProtractorReport\n                    .then(() => {\n                        expect(protractorRunner.afterEach).to.have.been.calledTwice;    // tslint:disable-line:no-unused-expression\n                    }));\n        });\n\n        describe('error handling', function () {\n\n            this.timeout(7000);\n\n            it('fails the test run when runner.afterEach errors out', () => {\n                protractorRunner.afterEach.throws(expectedError);\n\n                return expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.rejectedWith(expectedError);\n            });\n\n            it('fails the test run when runner.afterEach rejects the promise', () => {\n                protractorRunner.afterEach.rejects(expectedError);\n\n                return expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.rejectedWith(Error, [\n                        `Some of the async operations have failed:`,\n                        `[ProtractorReporter] Invoking ProtractorRunner.afterEach... - ${ expectedError.stack }`,\n                        `---`,\n                    ''].join('\\n'));\n            });\n        });\n    });\n\n    describe('configuration', () => {\n        function pickOne<T extends StageCrewMember>(type: new (...args: any[]) => T, crew: StageCrewMember[]): T {\n            const found = crew.filter(member => member instanceof type);\n\n            if (found.length !== 1) {\n                throw new Error(`Found ${ found.length } ${ type.name }s`);\n            }\n\n            return found[0] as T;\n        }\n\n        it('provides sensible defaults when no explicit configuration is provided', () => {\n            protractorRunner.getConfig.returns({});\n\n            return adapter.run([ sample('passing.spec.ts').path ])\n                .then(() => {\n                    const crew = (serenity as any).stage.manager.subscribers;\n\n                    const archiver = pickOne(ArtifactArchiver, crew);\n\n                    expect((archiver as any).fileSystem.root)\n                        .to.equal(new Path(process.cwd() + '/target/site/serenity'));\n                });\n        });\n\n        it('allows for the defaults to be overridden', () => {\n            protractorRunner.getConfig.returns({\n                serenity: {\n                    crew: [\n                        ArtifactArchiver.storingArtifactsAt('./custom/output/path'),\n                    ],\n                },\n            });\n\n            return adapter.run([ sample('passing.spec.ts').path ])\n                .then(() => {\n                    const crew = (serenity as any).stage.manager.subscribers;\n\n                    const archiver = pickOne(ArtifactArchiver, crew);\n\n                    expect((archiver as any).fileSystem.root)\n                        .to.equal(new Path(`./custom/output/path`));\n                });\n        });\n    });\n\n    class SimpleTestRunner implements TestRunner {\n\n        constructor(private readonly serenityInstance: Serenity) {\n        }\n\n        run(scenarios: string[]): Promise<void> {\n\n            return scenarios\n                .reduce((previous, current) => previous.then(() => {\n\n                    const scenario = sample(current);\n\n                    const details = new ScenarioDetails(\n                        new Name(scenario.name),\n                        new Category(scenario.category),\n                        new FileSystemLocation(new Path(scenario.path)),\n                    );\n\n                    this.serenityInstance.announce(new SceneStarts(\n                        details,\n                        this.serenityInstance.currentTime(),\n                    ));\n\n                    // ... an actual test runner would now execute the test and then announce the outcome\n\n                    this.serenityInstance.announce(\n                        new SceneFinishes(details, this.serenityInstance.currentTime()),\n                    );\n\n                    return this.serenityInstance.waitForNextCue()\n                        .then(() => {\n                            this.serenityInstance.announce(\n                                new SceneFinished(details, scenario.outcome, this.serenityInstance.currentTime()),\n                            );\n                        });\n\n                }), Promise.resolve(void 0));\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "access": null,
    "description": "ProtractorFrameworkAdapter",
    "lineNumber": 15
  },
  {
    "__docId__": 612,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "access": null,
    "description": "to meet the requirements described in \"Framework Adapters for Protractor\"",
    "lineNumber": 122
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "access": null,
    "description": "produces a Protractor report that",
    "lineNumber": 124
  },
  {
    "__docId__": 614,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it3",
    "access": null,
    "description": "describes no test results if no tests were executed",
    "lineNumber": 126
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it4",
    "access": null,
    "description": "describes successful tests",
    "lineNumber": 133
  },
  {
    "__docId__": 616,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it5",
    "access": null,
    "description": "describes failing tests",
    "lineNumber": 146
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it6",
    "access": null,
    "description": "describes both successful and failing tests",
    "lineNumber": 161
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.it7",
    "access": null,
    "description": "invokes runner.runTestPreparer before executing the tests",
    "lineNumber": 189
  },
  {
    "__docId__": 619,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.it8",
    "access": null,
    "description": "invokes runner.getConfig().onComplete() after executing the tests",
    "lineNumber": 201
  },
  {
    "__docId__": 620,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "access": null,
    "description": "when a test succeeds",
    "lineNumber": 220
  },
  {
    "__docId__": 621,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9.it10",
    "access": null,
    "description": "invokes runner.emit with a \"testPass\" message",
    "lineNumber": 222
  },
  {
    "__docId__": 622,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9.it11",
    "access": null,
    "description": "invokes runner.afterEach after each test",
    "lineNumber": 234
  },
  {
    "__docId__": 623,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "access": null,
    "description": "when a test fails",
    "lineNumber": 245
  },
  {
    "__docId__": 624,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12.it13",
    "access": null,
    "description": "invokes runner.emit with a \"testFail\" message",
    "lineNumber": 247
  },
  {
    "__docId__": 625,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12.it14",
    "access": null,
    "description": "invokes runner.afterEach after each test",
    "lineNumber": 259
  },
  {
    "__docId__": 626,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "access": null,
    "description": "error handling",
    "lineNumber": 270
  },
  {
    "__docId__": 627,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15.it16",
    "access": null,
    "description": "fails the test run when runner.afterEach errors out",
    "lineNumber": 274
  },
  {
    "__docId__": 628,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15.it17",
    "access": null,
    "description": "fails the test run when runner.afterEach rejects the promise",
    "lineNumber": 283
  },
  {
    "__docId__": 629,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "access": null,
    "description": "configuration",
    "lineNumber": 298
  },
  {
    "__docId__": 630,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18.it19",
    "access": null,
    "description": "provides sensible defaults when no explicit configuration is provided",
    "lineNumber": 322
  },
  {
    "__docId__": 631,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18.it20",
    "access": null,
    "description": "allows for the defaults to be overridden",
    "lineNumber": 336
  },
  {
    "__docId__": 632,
    "kind": "testFile",
    "name": "spec/adapter/TestRunnerDetector.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { ModuleLoader } from '@serenity-js/core/lib/io';\nimport { TestRunnerDetector } from '../../src/adapter';\nimport { CucumberTestRunner } from '../../src/adapter/runners/CucumberTestRunner';\nimport { JasmineTestRunner } from '../../src/adapter/runners/JasmineTestRunner';\nimport { MochaTestRunner } from '../../src/adapter/runners/MochaTestRunner';\n\ndescribe('TestRunnerDetector', () => {\n\n    let detector: TestRunnerDetector;\n\n    beforeEach(() => {\n        detector = new TestRunnerDetector(new ModuleLoader(process.cwd()));\n    });\n\n    describe('when configured with a specific runner', () => {\n\n        it('uses the CucumberTestRunner', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'cucumber',\n                },\n            });\n\n            expect(runner).to.be.instanceOf(CucumberTestRunner);\n        });\n\n        it('uses the CucumberTestRunner even when config for other runners is present as well', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'cucumber',\n                },\n                cucumberOpts: {},\n                jasmineNodeOpts: {},\n                mochaOpts: {},\n            });\n\n            expect(runner).to.be.instanceOf(CucumberTestRunner);\n        });\n\n        it('uses the JasmineTestRunner', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'jasmine',\n                },\n            });\n\n            expect(runner).to.be.instanceOf(JasmineTestRunner);\n        });\n\n        it('uses the JasmineTestRunner even when config for other runners is present as well', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'jasmine',\n                },\n                cucumberOpts: {},\n                jasmineNodeOpts: {},\n                mochaOpts: {},\n            });\n\n            expect(runner).to.be.instanceOf(JasmineTestRunner);\n        });\n\n        it('uses the MochaTestRunner', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'mocha',\n                },\n            });\n\n            expect(runner).to.be.instanceOf(MochaTestRunner);\n        });\n\n        it('uses the MochaTestRunner even when config for other runners is present as well', () => {\n            const runner = detector.runnerFor({\n                serenity: {\n                    runner: 'mocha',\n                },\n                cucumberOpts: {},\n                jasmineNodeOpts: {},\n                mochaOpts: {},\n            });\n\n            expect(runner).to.be.instanceOf(MochaTestRunner);\n        });\n    });\n\n    describe('when no specific test runner is set', () => {\n\n        it('uses the CucumberTestRunner when cucumberOpts are specified', () => {\n            const runner = detector.runnerFor({\n                cucumberOpts: {\n                    require: [\n                        'ts-node/register',\n                        'features/**/*.steps.ts',\n                    ],\n                },\n            });\n\n            expect(runner).to.be.instanceOf(CucumberTestRunner);\n        });\n\n        it('uses the JasmineTestRunner when jasmineNodeOpts are specified', () => {\n            const runner = detector.runnerFor({\n                jasmineNodeOpts: {\n                    grep: 'some spec.*',\n                },\n            });\n\n            expect(runner).to.be.instanceOf(JasmineTestRunner);\n        });\n\n        it('uses the JasmineTestRunner when no other runners are specified', () => {\n            const runner = detector.runnerFor({});\n\n            expect(runner).to.be.instanceOf(JasmineTestRunner);\n        });\n\n        it('uses the MochaTestRunner when mochaOpts are specified', () => {\n            const runner = detector.runnerFor({\n                mochaOpts: {\n                    require: 'ts:ts-node/register',\n                },\n            });\n\n            expect(runner).to.be.instanceOf(MochaTestRunner);\n        });\n    });\n\n    describe('to support test runner options specified in the capabilities section', () => {\n\n        it('merges the cucumberOpts');\n\n        it('merges the mochaOpts');\n\n        it('merges the jasmineNodeOpts');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/adapter/TestRunnerDetector.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 633,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21",
    "access": null,
    "description": "TestRunnerDetector",
    "lineNumber": 10
  },
  {
    "__docId__": 634,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "access": null,
    "description": "when configured with a specific runner",
    "lineNumber": 18
  },
  {
    "__docId__": 635,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it23",
    "access": null,
    "description": "uses the CucumberTestRunner",
    "lineNumber": 20
  },
  {
    "__docId__": 636,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it24",
    "access": null,
    "description": "uses the CucumberTestRunner even when config for other runners is present as well",
    "lineNumber": 30
  },
  {
    "__docId__": 637,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it25",
    "access": null,
    "description": "uses the JasmineTestRunner",
    "lineNumber": 43
  },
  {
    "__docId__": 638,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it26",
    "access": null,
    "description": "uses the JasmineTestRunner even when config for other runners is present as well",
    "lineNumber": 53
  },
  {
    "__docId__": 639,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it27",
    "access": null,
    "description": "uses the MochaTestRunner",
    "lineNumber": 66
  },
  {
    "__docId__": 640,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe22.it28",
    "access": null,
    "description": "uses the MochaTestRunner even when config for other runners is present as well",
    "lineNumber": 76
  },
  {
    "__docId__": 641,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29",
    "access": null,
    "description": "when no specific test runner is set",
    "lineNumber": 90
  },
  {
    "__docId__": 642,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29.it30",
    "access": null,
    "description": "uses the CucumberTestRunner when cucumberOpts are specified",
    "lineNumber": 92
  },
  {
    "__docId__": 643,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29.it31",
    "access": null,
    "description": "uses the JasmineTestRunner when jasmineNodeOpts are specified",
    "lineNumber": 105
  },
  {
    "__docId__": 644,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29.it32",
    "access": null,
    "description": "uses the JasmineTestRunner when no other runners are specified",
    "lineNumber": 115
  },
  {
    "__docId__": 645,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe29.it33",
    "access": null,
    "description": "uses the MochaTestRunner when mochaOpts are specified",
    "lineNumber": 121
  },
  {
    "__docId__": 646,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34",
    "access": null,
    "description": "to support test runner options specified in the capabilities section",
    "lineNumber": 132
  },
  {
    "__docId__": 647,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34.it35",
    "access": null,
    "description": "merges the cucumberOpts",
    "lineNumber": 134
  },
  {
    "__docId__": 648,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34.it36",
    "access": null,
    "description": "merges the mochaOpts",
    "lineNumber": 136
  },
  {
    "__docId__": 649,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/TestRunnerDetector.spec.ts~describe21.describe34.it37",
    "access": null,
    "description": "merges the jasmineNodeOpts",
    "lineNumber": 138
  },
  {
    "__docId__": 650,
    "kind": "testFile",
    "name": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { given } from 'mocha-testdata';\nimport { Capabilities, ProtractorBrowser } from 'protractor';\nimport * as sinon from 'sinon';\n\nimport { StandardisedCapabilities } from '../../../src/adapter/browser-detector';\n\ndescribe('StandardisedCapabilities', () => {\n\n    given([\n        {\n            description: 'Edge on Windows',\n            actual: { browserName: 'MicrosoftEdge', browserVersion: '42.17134.1.0', platformName: 'windows', platform: 'WINDOWS', platformVersion: '10' },\n            expected: { browserName: 'MicrosoftEdge', browserVersion: '42.17134.1.0', platformName: 'windows', platformVersion: '10' },\n        }, {\n            description: 'Chrome on Windows',\n            actual: { browserName: 'chrome', version: '79.0.3945.79', platform: 'WINDOWS' },\n            expected: { browserName: 'chrome', browserVersion: '79.0.3945.79', platformName: 'WINDOWS' },\n        }, {\n            description: 'Edge on Mac',\n            actual: { browserName: 'MicrosoftEdge', version: '79.0.309.18', platform: 'Mac OS X' },\n            expected: { browserName: 'MicrosoftEdge', browserVersion: '79.0.309.18', platformName: 'Mac OS X' },\n        }, {\n            description: 'Firefox on Windows',\n            actual: { browserName: 'firefox', browserVersion: '72.0', platformName: 'windows', platformVersion: '6.1' },\n            expected: { browserName: 'firefox', browserVersion: '72.0', platformName: 'windows', platformVersion: '6.1' },\n        }, {\n            description: 'IE 10 on Windows',\n            actual: { browserName: 'internet explorer', version: '10', platform: 'WINDOWS' },\n            expected: { browserName: 'internet explorer', browserVersion: '10', platformName: 'WINDOWS' },\n        }, {\n            description: 'Chrome on Mac',\n            actual: { browserName: 'chrome', version: '79.0.3945.79', platform: 'MAC' },\n            expected: { browserName: 'chrome', browserVersion: '79.0.3945.79', platformName: 'MAC' },\n        }, {\n            description: 'Chrome (mobile) on Android (Samsung SM-G950F)',\n            actual: { browserName: 'chrome', deviceManufacturer: 'samsung', deviceModel: 'SM-G950F', platformName: 'Android', platform: 'LINUX', platformVersion: '7.0' },\n            expected: { browserName: 'chrome', browserVersion: 'samsung SM-G950F', platformName: 'Android', platformVersion: '7.0' },\n        }, {\n            description: 'Opera on Windows',\n            actual: { browserName: 'opera', version: '12.16', platformName: 'ANY', platform: 'WINDOWS' },\n            expected: { browserName: 'opera', browserVersion: '12.16', platformName: 'WINDOWS' },\n        }, {\n            description: 'Firefox on Mac',\n            actual: { browserName: 'firefox', browserVersion: '72.0', platformName: 'mac', platformVersion: '13.4.0' },\n            expected: { browserName: 'firefox', browserVersion: '72.0', platformName: 'mac', platformVersion: '13.4.0' },\n        }, {\n            description: 'Safari (mobile) on iPhone 7',\n            actual: {\n                browserName: 'safari',\n                version: '',\n                mobile: { browser: 'mobile', version: 'iPhone 7-10.3' },\n                platformName: 'iOS',\n                platform: 'MAC',\n                platformVersion: '11.0',\n            },\n            expected: { browserName: 'safari', browserVersion: 'iPhone 7-10.3', platformName: 'iOS', platformVersion: '11.0' },\n        }, {\n            description: 'Opera on Mac',\n            actual: { browserName: 'opera', version: '12.15', platformName: 'ANY', platform: 'MAC' },\n            expected: { browserName: 'opera', browserVersion: '12.15', platformName: 'MAC' },\n        }, {\n            description: 'Chrome (mobile) on Android (Motorola XT1092)',\n            actual: { browserName: 'chrome', deviceManufacturer: 'motorola', deviceModel: 'XT1092', platformName: 'Android', platform: 'LINUX', platformVersion: '6.0' },\n            expected: { browserName: 'chrome', browserVersion: 'motorola XT1092', platformName: 'Android', platformVersion: '6.0' },\n        }, {\n            description: 'Safari (mobile) on iPhone 8 Plus',\n            actual: {\n                browserName: 'safari',\n                version: '',\n                mobile: { browser: 'mobile', version: 'iPhone 8 Plus-11.0' },\n                platformName: 'iOS',\n                platform: 'MAC',\n                platformVersion: '11.0',\n            },\n            expected: { browserName: 'safari', browserVersion: 'iPhone 8 Plus-11.0', platformName: 'iOS', platformVersion: '11.0' },\n        }, {\n            description: 'Safari on Mac',\n            actual: { browserName: 'safari', version: '7.1.8', platform: 'MAC' },\n            expected: { browserName: 'safari', browserVersion: '7.1.8', platformName: 'MAC' },\n        }, {\n            description: 'IE 6 on Windows',\n            actual: { browserName: 'internet explorer', version: '6', platform: 'WINDOWS' },\n            expected: { browserName: 'internet explorer', browserVersion: '6', platformName: 'WINDOWS' },\n        }, {\n            description: 'Chrome (mobile emulation) on Mac OS X',\n            actual: {\n                browserName: 'chrome', version: '80.0.3987.87', browserVersion: undefined,\n                deviceManufacturer: undefined, deviceModel: undefined, mobile: undefined, mobileEmulationEnabled: true,\n                platformName: undefined, platform: 'Mac OS X', platformVersion: undefined,\n            },\n            expected: {\n                browserName: 'chrome', browserVersion: '80.0.3987.87 (mobile emulation)', platformName: 'Mac OS X',\n            },\n        },\n    ]).\n    it(`standardises the WebDriver capabilities across browsers and platforms`, ({ actual, expected }) => {\n        const fakeBrowser = {\n            getCapabilities: () => Promise.resolve(new Capabilities(actual)),\n        };\n\n        const capabilities = StandardisedCapabilities.of(() => fakeBrowser as unknown as ProtractorBrowser);\n\n        return Promise.all([\n            expect(capabilities.browserName()).to.eventually.equal(expected.browserName),\n            expect(capabilities.browserVersion()).to.eventually.equal(expected.browserVersion),\n            expect(capabilities.platformName()).to.eventually.equal(expected.platformName),\n            expect(capabilities.platformVersion()).to.eventually.equal(expected.platformVersion),\n        ]);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 651,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts~describe38",
    "access": null,
    "description": "StandardisedCapabilities",
    "lineNumber": 10
  },
  {
    "__docId__": 652,
    "kind": "testFile",
    "name": "spec/adapter/reporter/ProtractorReporter.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Serenity } from '@serenity-js/core';\nimport { ArtifactGenerated, SceneFinished } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport { Category, ExecutionSkipped, Name, ScenarioDetails, TextData } from '@serenity-js/core/lib/model';\nimport { Runner } from 'protractor';\nimport * as sinon from 'sinon';\nimport { ProtractorReporter } from '../../../src/adapter/reporter';\n\n/**\n * See the {@link ProtractorFrameworkAdapter} specs to see how the {@link ProtractorReporter} is used in the context\n */\ndescribe('ProtractorReporter', () => {\n\n    let reporter:           ProtractorReporter,\n        protractorRunner:   Runner,\n        serenity:           Serenity;\n\n    beforeEach(() => {\n        protractorRunner    = sinon.createStubInstance(Runner);\n        reporter            = new ProtractorReporter(protractorRunner);\n        serenity            = new Serenity();\n\n        serenity.configure({ crew: [ reporter ] });\n    });\n\n    const details = new ScenarioDetails(\n        new Name('scenario name'),\n        new Category('scenario category'),\n        new FileSystemLocation(new Path('./some/scenario.spec.ts')),\n    );\n\n    /** @test {ProtractorReporter} */\n    it('ignores events outcomes Protractor doesn\\'t care about', () => {\n\n        expect(reporter.notifyOf(new SceneFinished(details, new ExecutionSkipped()))).to.be.undefined;  // tslint:disable-line:no-unused-expression\n\n        expect(reporter.report()).to.deep.equal({\n            failedCount: 0,\n            specResults: [],\n        });\n    });\n\n    /** @test {ProtractorReporter} */\n    it('ignores domain events Protractor doesn\\'t care about', () => {\n\n        const artifact = TextData.fromJSON({ contentType: 'text/plain', data: 'one,two,three'});\n\n        expect(reporter.notifyOf(new ArtifactGenerated(new Name('report.csv'), artifact))).to.be.undefined;  // tslint:disable-line:no-unused-expression\n\n        expect(reporter.report()).to.deep.equal({\n            failedCount: 0,\n            specResults: [],\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/adapter/reporter/ProtractorReporter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe39",
    "access": null,
    "description": "See the {@link ProtractorFrameworkAdapter} specs to see how the {@link ProtractorReporter} is used in the context",
    "lineNumber": 13
  },
  {
    "__docId__": 654,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe39.it40",
    "access": null,
    "description": "ignores events outcomes Protractor doesn't care about",
    "lineNumber": 34,
    "testTargets": [
      "ProtractorReporter"
    ]
  },
  {
    "__docId__": 655,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe39.it41",
    "access": null,
    "description": "ignores domain events Protractor doesn't care about",
    "lineNumber": 45,
    "testTargets": [
      "ProtractorReporter"
    ]
  },
  {
    "__docId__": 656,
    "kind": "testFile",
    "name": "spec/expectations/isActive.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, not } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Click, isActive, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isActive', function () {\n\n    const Page = {\n        Active_Input:       Target.the('active input').located(by.id('active')),\n        Inactive_Input:     Target.the('inactive input').located(by.id('inactive')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <input type=\"text\" id=\"active\" />\n                    <input type=\"text\" id=\"inactive\" />\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isActive} */\n    it('allows the actor flow to continue when the element is active', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Active_Input, not(isActive())),\n        Ensure.that(Page.Active_Input, not(isActive())),\n        Click.on(Page.Active_Input),\n        Wait.until(Page.Active_Input, isActive()),\n        Ensure.that(Page.Active_Input, isActive()),\n    )).to.be.fulfilled);\n\n    /** @test {isActive} */\n    it('breaks the actor flow when element is inactive', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Inactive_Input, isActive()),\n        )).to.be.rejectedWith(AssertionError, `Expected the inactive input to become active`);\n    });\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Active_Input, isActive()).toString())\n            .to.equal(`#actor ensures that the active input does become active`);\n    });\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Active_Input, isActive()).toString())\n            .to.equal(`#actor waits up to 5s until the active input does become active`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isActive.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 657,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "spec/expectations/isActive.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe42",
    "access": null,
    "description": "isActive",
    "lineNumber": 11
  },
  {
    "__docId__": 658,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/expectations/isActive.spec.ts~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe42.it43",
    "access": null,
    "description": "allows the actor flow to continue when the element is active",
    "lineNumber": 30,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 659,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/expectations/isActive.spec.ts~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe42.it44",
    "access": null,
    "description": "breaks the actor flow when element is inactive",
    "lineNumber": 39,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 660,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/expectations/isActive.spec.ts~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe42.it45",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 46,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 661,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/expectations/isActive.spec.ts~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe42.it46",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 52,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 662,
    "kind": "testFile",
    "name": "spec/expectations/isClickable.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isClickable, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isClickable', function () {\n\n    const Page = {\n        Enabled_Button:     Target.the('enabled button').located(by.id('enabled')),\n        Disabled_Button:    Target.the('disabled button').located(by.id('disabled')),\n        Hidden_Button:      Target.the('hidden button').located(by.id('hidden')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <button id=\"enabled\">enabled</button>\n                    <button disabled id=\"disabled\">disabled</button>\n                    <button style=\"display:none;\" id=\"hidden\">hidden</button>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isClickable} */\n    it('allows the actor flow to continue when the element is clickable', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Enabled_Button, isClickable()),\n        Ensure.that(Page.Enabled_Button, isClickable()),\n    )).to.be.fulfilled);\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is disabled', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Disabled_Button, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become enabled`);\n    });\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is not visible', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Hidden_Button, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the hidden button to become displayed`);\n    });\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Enabled_Button, isClickable()).toString())\n            .to.equal(`#actor ensures that the enabled button does become clickable`);\n    });\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Enabled_Button, isClickable()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become clickable`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isClickable.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 663,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "spec/expectations/isClickable.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47",
    "access": null,
    "description": "isClickable",
    "lineNumber": 11
  },
  {
    "__docId__": 664,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/expectations/isClickable.spec.ts~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47.it48",
    "access": null,
    "description": "allows the actor flow to continue when the element is clickable",
    "lineNumber": 32,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 665,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/expectations/isClickable.spec.ts~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47.it49",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 38,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 666,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/expectations/isClickable.spec.ts~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47.it50",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 45,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 667,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/expectations/isClickable.spec.ts~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47.it51",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 52,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 668,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/expectations/isClickable.spec.ts~describe47",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe47.it52",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 58,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 669,
    "kind": "testFile",
    "name": "spec/expectations/isEnabled.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isEnabled, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isEnabled', function () {\n\n    const Page = {\n        Enabled_Button:     Target.the('enabled button').located(by.id('enabled')),\n        Disabled_Button:    Target.the('disabled button').located(by.id('disabled')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <button id=\"enabled\">enabled</button>\n                    <button disabled id=\"disabled\">disabled</button>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isEnabled} */\n    it('allows the actor flow to continue when the element is enabled', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Enabled_Button, isEnabled()),\n        Ensure.that(Page.Enabled_Button, isEnabled()),\n    )).to.be.fulfilled);\n\n    /** @test {isEnabled} */\n    it('breaks the actor flow when element is disabled', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Disabled_Button, isEnabled()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become enabled`);\n    });\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Enabled_Button, isEnabled()).toString())\n            .to.equal(`#actor ensures that the enabled button does become enabled`);\n    });\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Enabled_Button, isEnabled()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become enabled`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isEnabled.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 670,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "spec/expectations/isEnabled.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe53",
    "access": null,
    "description": "isEnabled",
    "lineNumber": 11
  },
  {
    "__docId__": 671,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe53.it54",
    "access": null,
    "description": "allows the actor flow to continue when the element is enabled",
    "lineNumber": 30,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 672,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe53.it55",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 36,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 673,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe53.it56",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 43,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 674,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe53.it57",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 49,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 675,
    "kind": "testFile",
    "name": "spec/expectations/isPresent.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isPresent, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isPresent', function () {\n\n    const Page = {\n        Present_Header:         Target.the('header').located(by.tagName('h1')),\n        Non_Existent_Header:    Target.the('non-existent header').located(by.tagName('h2')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <h1>Hello!</h1>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isPresent} */\n    it('allows the actor flow to continue when the element is present in the DOM', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Present_Header, isPresent()),\n        Ensure.that(Page.Present_Header, isPresent()),\n    )).to.be.fulfilled);\n\n    /** @test {isPresent} */\n    it('breaks the actor flow when element is not present in the DOM', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Non_Existent_Header, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become present`);\n    });\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Present_Header, isPresent()).toString())\n            .to.equal(`#actor ensures that the header does become present`);\n    });\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Present_Header, isPresent()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become present`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isPresent.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 676,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "spec/expectations/isPresent.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe58",
    "access": null,
    "description": "isPresent",
    "lineNumber": 11
  },
  {
    "__docId__": 677,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/expectations/isPresent.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe58.it59",
    "access": null,
    "description": "allows the actor flow to continue when the element is present in the DOM",
    "lineNumber": 29,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 678,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/expectations/isPresent.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe58.it60",
    "access": null,
    "description": "breaks the actor flow when element is not present in the DOM",
    "lineNumber": 35,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 679,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/expectations/isPresent.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe58.it61",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 42,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 680,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/expectations/isPresent.spec.ts~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe58.it62",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 48,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 681,
    "kind": "testFile",
    "name": "spec/expectations/isSelected.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isSelected, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isSelected', function () {\n\n    const Languages = {\n        TypeScript: Target.the('TypeScript option').located(by.css('select[name=\"languages\"] > option[value=\"TypeScript\"]')),\n        JavaScript: Target.the('JavaScript option').located(by.css('select[name=\"languages\"] > option[value=\"JavaScript\"]')),\n        Java:       Target.the('Java option').located(by.css('select[name=\"languages\"] > option[value=\"Java\"]')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <select name=\"languages\">\n                        <option selected value=\"TypeScript\">TypeScript</option>\n                        <option value=\"JavaScript\">JavaScript</option>\n                    </select>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isSelected} */\n    it('allows the actor flow to continue when the element is selected', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Languages.TypeScript, isSelected()),\n        Ensure.that(Languages.TypeScript, isSelected()),\n    )).to.be.fulfilled);\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not selected', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Languages.JavaScript, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the JavaScript option to become selected`);\n    });\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not present', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Languages.Java, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the Java option to become present`);\n    });\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Languages.TypeScript, isSelected()).toString())\n            .to.equal(`#actor ensures that the TypeScript option does become selected`);\n    });\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Languages.TypeScript, isSelected()).toString())\n            .to.equal(`#actor waits up to 5s until the TypeScript option does become selected`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isSelected.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 682,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "spec/expectations/isSelected.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63",
    "access": null,
    "description": "isSelected",
    "lineNumber": 11
  },
  {
    "__docId__": 683,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/expectations/isSelected.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63.it64",
    "access": null,
    "description": "allows the actor flow to continue when the element is selected",
    "lineNumber": 33,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 684,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/expectations/isSelected.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63.it65",
    "access": null,
    "description": "breaks the actor flow when element is not selected",
    "lineNumber": 39,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 685,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/expectations/isSelected.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63.it66",
    "access": null,
    "description": "breaks the actor flow when element is not present",
    "lineNumber": 46,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 686,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/expectations/isSelected.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63.it67",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 53,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 687,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/expectations/isSelected.spec.ts~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe63.it68",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 59,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 688,
    "kind": "testFile",
    "name": "spec/expectations/isVisible.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isVisible, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\n\ndescribe('isVisible', function () {\n\n    const Page = {\n        Visible_Header:        Target.the('header').located(by.tagName('h1')),\n        Invisible_Header:      Target.the('invisible header').located(by.tagName('h2')),\n        Non_Existent_Header:   Target.the('non-existent header').located(by.tagName('h3')),\n    };\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <h1>visible</h1>\n                    <h2 style=\"display:none;\">invisible</h2>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isVisible} */\n    it('allows the actor flow to continue when the element is visible', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Visible_Header, isVisible()),\n        Ensure.that(Page.Visible_Header, isVisible()),\n    )).to.be.fulfilled);\n\n    /** @test {isVisible} */\n    it('breaks the actor flow when element is not visible', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Invisible_Header, isVisible()),\n        )).to.be.rejectedWith(AssertionError, `Expected the invisible header to become displayed`);\n    });\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Visible_Header, isVisible()).toString())\n            .to.equal(`#actor ensures that the header does become visible`);\n    });\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Visible_Header, isVisible()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become visible`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/expectations/isVisible.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 689,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "spec/expectations/isVisible.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe69",
    "access": null,
    "description": "isVisible",
    "lineNumber": 11
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/expectations/isVisible.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe69.it70",
    "access": null,
    "description": "allows the actor flow to continue when the element is visible",
    "lineNumber": 31,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 691,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/expectations/isVisible.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe69.it71",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 37,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/expectations/isVisible.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe69.it72",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 44,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 693,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/expectations/isVisible.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe69.it73",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 50,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 694,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Clear.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Clear, Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Clear', () => {\n\n    const Form = {\n        Field: Target.the('input field').located(by.id('field')),\n    };\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" value=\"Jan\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an number field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"number\" id=\"field\" value=\"42\" >\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of a date field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"date\" id=\"field\" value=\"2019-09-22\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an RTL input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html dir=\"rtl\">\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" value=\"שלום עולם\" dir=\"rtl\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('complains if the element cannot be cleared', () => expect(actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html dir=\"rtl\">\n                <body>\n                    <div id=\"field\">Hello World!</div>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n    )).to.be.rejectedWith(LogicError, `The input field doesn't seem to have a 'value' attribute that could be cleared.`));\n\n    /** @test {Clear#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Clear.theValueOf(Form.Field).toString())\n            .to.equal('#actor clears the value of the input field');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Clear.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "access": null,
    "description": "Clear",
    "lineNumber": 9
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it75",
    "access": null,
    "description": "allows the actor to clear the value of an input field",
    "lineNumber": 17,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 697,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it76",
    "access": null,
    "description": "allows the actor to clear the value of an number field",
    "lineNumber": 35,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it77",
    "access": null,
    "description": "allows the actor to clear the value of a date field",
    "lineNumber": 53,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 699,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it78",
    "access": null,
    "description": "allows the actor to clear the value of an RTL input field",
    "lineNumber": 71,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 700,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it79",
    "access": null,
    "description": "complains if the element cannot be cleared",
    "lineNumber": 89,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it80",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 102,
    "testTargets": [
      "Clear#toString"
    ]
  },
  {
    "__docId__": 702,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Click.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Attribute, Click, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Click', () => {\n\n    const Form = {\n        Checkbox: Target.the('checkbox').located(by.id('no-spam-please')),\n    };\n\n    /** @test {Click} */\n    /** @test {Click.on} */\n    it('allows the actor to click on an element', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"checkbox\" id=\"no-spam-please\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Click.on(Form.Checkbox),\n\n        Ensure.that(Attribute.of(Form.Checkbox).called('checked'), equals('true')),\n    ));\n\n    /** @test {Click#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Click.on(Form.Checkbox).toString())\n            .to.equal('#actor clicks on the checkbox');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Click.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "spec/screenplay/interactions/Click.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe81",
    "access": null,
    "description": "Click",
    "lineNumber": 9
  },
  {
    "__docId__": 704,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe81.it82",
    "access": null,
    "description": "allows the actor to click on an element",
    "lineNumber": 17,
    "testTargets": [
      "Click.on"
    ]
  },
  {
    "__docId__": 705,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe81.it83",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 34,
    "testTargets": [
      "Click#toString"
    ]
  },
  {
    "__docId__": 706,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { DoubleClick, Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('DoubleClick', () => {\n\n    const Interactive_Element = Target.the('interactive element').located(by.id('double-click-me'));\n\n    /** @test {DoubleClick} */\n    /** @test {DoubleClick.on} */\n    it('allows the actor to clear the value of a field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <div id=\"double-click-me\">double-click me!</div>\n                    <script>\n                        const el = document.getElementById('double-click-me');\n\n                        el.addEventListener('dblclick', function (e) {\n                          el.innerText = 'done!';\n                        });\n                    </script>\n                </body>\n            </html>\n        `)),\n\n        DoubleClick.on(Interactive_Element),\n\n        Ensure.that(Text.of(Interactive_Element), equals('done!')),\n    ));\n\n    /** @test {DoubleClick#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(DoubleClick.on(Interactive_Element).toString())\n            .to.equal('#actor double-clicks on the interactive element');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/DoubleClick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 707,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe84",
    "access": null,
    "description": "DoubleClick",
    "lineNumber": 9
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe84.it85",
    "access": null,
    "description": "allows the actor to clear the value of a field",
    "lineNumber": 15,
    "testTargets": [
      "DoubleClick.on"
    ]
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe84.it86",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 37,
    "testTargets": [
      "DoubleClick#toString"
    ]
  },
  {
    "__docId__": 710,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Enter.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Enter, Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Enter', () => {\n\n    const Form = {\n        Field: Target.the('name field').located(by.id('name')),\n        Result: Target.the('result').located(by.id('your-name')),\n    };\n\n    /** @test {Enter} */\n    /** @test {Enter.theValue} */\n    it('allows the actor to enter the value into a field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"name\" onkeyup=\"update()\" />\n                        <div id=\"your-name\" />\n                    </form>\n                    <script>\n                    function update() {\n                      document.getElementById(\"your-name\").textContent = document.getElementById(\"name\").value;\n                    }\n                    </script>\n                </body>\n            </html>\n        `)),\n\n        Enter.theValue(actorCalled('Bernie').name).into(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals(actorCalled('Bernie').name)),\n    ));\n\n    /** @test {Enter#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Enter.theValue(actorCalled('Bernie').name).into(Form.Field).toString())\n            .to.equal(`#actor enters 'Bernie' into the name field`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Enter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe87",
    "access": null,
    "description": "Enter",
    "lineNumber": 9
  },
  {
    "__docId__": 712,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe87.it88",
    "access": null,
    "description": "allows the actor to enter the value into a field",
    "lineNumber": 18,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe87.it89",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 41,
    "testTargets": [
      "Enter#toString"
    ]
  },
  {
    "__docId__": 714,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Hover.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Attribute, Hover, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Hover', function () {\n\n    const pageWithALink = pageFromTemplate(`\n        <html>\n            <body style=\"margin:0; padding:0 0 1024px 0;\">\n                <h1>A page with a link</h1>\n                <a href=\"javascript:void(0)\"\n                   class=\"off\"\n                   onmouseover=\"this.className='on';\" onmouseout=\"this.className='off';\">\n                >link</a>\n            </body>\n        </html>\n    `);\n\n    const Page = {\n        Header: Target.the('header').located(by.css('h1')),\n        Link:   Target.the('link').located(by.css('a')),\n    };\n\n    /** @test {Scroll} */\n    /** @test {Scroll.to} */\n    it('allows the actor to move the mouse to a given target', () => actorCalled('Mickey').attemptsTo(\n        Navigate.to(pageWithALink),\n\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('off')),\n\n        Hover.over(Page.Link),\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('on')),\n\n        Hover.over(Page.Header),\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('off')),\n    ));\n\n    /** @test {Enter#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Hover.over(Page.Link).toString())\n            .to.equal(`#actor hovers the mouse over the link`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Hover.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe90",
    "access": null,
    "description": "Hover",
    "lineNumber": 9
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe90.it91",
    "access": null,
    "description": "allows the actor to move the mouse to a given target",
    "lineNumber": 30,
    "testTargets": [
      "Scroll.to"
    ]
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe90.it92",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 43,
    "testTargets": [
      "Enter#toString"
    ]
  },
  {
    "__docId__": 718,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Navigate.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { endsWith, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Duration } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Text, Website } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Navigate', () => {\n\n    describe('to(url)', () => {\n\n        /** @test {Navigate.to} */\n        it('allows the actor to navigate to a desired destination', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1 id=\"h\">Hello World</h1>\n                    </body>\n                </html>\n            `)),\n\n            Ensure.that(Text.of(Target.the('heading').located(by.id('h'))), equals('Hello World')),\n        ));\n\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.to(`https://serenity-js.org`).toString())\n                .to.equal(`#actor navigates to 'https://serenity-js.org'`);\n        });\n    });\n\n    describe('to(url).withTimeout(duration)', function () {\n\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.to(`https://serenity-js.org`).withTimeout(Duration.ofSeconds(5)).toString())\n                .to.equal(`#actor navigates to 'https://serenity-js.org' waiting up to 5s for Angular to load`);\n        });\n    });\n\n    describe('back', () => {\n\n        /** @test {Navigate.back} */\n        it('allows the actor to navigate back in the browser history', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://version/`),\n            Navigate.to(`chrome://accessibility/`),\n\n            Navigate.back(),\n\n            Ensure.that(Website.url(), endsWith('version/')),\n        ));\n\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.back().toString())\n                .to.equal(`#actor navigates back in the browser history`);\n        });\n    });\n\n    describe('forward', () => {\n\n        /** @test {Navigate.forward} */\n        it('allows the actor to navigate forward in the browser history', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://version/`),\n            Navigate.to(`chrome://accessibility/`),\n\n            Navigate.back(),\n            Navigate.forward(),\n\n            Ensure.that(Website.url(), endsWith('accessibility/')),\n        ));\n\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.forward().toString())\n                .to.equal(`#actor navigates forward in the browser history`);\n        });\n    });\n\n    describe('reloadPage', () => {\n        /** @test {Navigate.to} */\n        it('allows the actor to navigate to a desired destination', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1 id=\"h\">Hello!</h1>\n                    </body>\n                    <script>\n                        if(window.performance.navigation.type === window.performance.navigation.TYPE_RELOAD) {\n                            document.getElementById('h').textContent = 'Reloaded'\n                        }\n                    </script>\n                </html>\n            `)),\n\n            Navigate.reloadPage(),\n\n            Ensure.that(Text.of(Target.the('heading').located(by.id('h'))), equals('Reloaded')),\n        ));\n\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.reloadPage().toString())\n                .to.equal(`#actor reloads the page`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Navigate.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "access": null,
    "description": "Navigate",
    "lineNumber": 11
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe94",
    "access": null,
    "description": "to(url)",
    "lineNumber": 13
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe94.it95",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 16,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe94.it96",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 29,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe97",
    "access": null,
    "description": "to(url).withTimeout(duration)",
    "lineNumber": 35
  },
  {
    "__docId__": 724,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe97.it98",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 38,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe99",
    "access": null,
    "description": "back",
    "lineNumber": 44
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe99.it100",
    "access": null,
    "description": "allows the actor to navigate back in the browser history",
    "lineNumber": 47,
    "testTargets": [
      "Navigate.back"
    ]
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe99.it101",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 57,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe102",
    "access": null,
    "description": "forward",
    "lineNumber": 63
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe102.it103",
    "access": null,
    "description": "allows the actor to navigate forward in the browser history",
    "lineNumber": 66,
    "testTargets": [
      "Navigate.forward"
    ]
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe102.it104",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 77,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe105",
    "access": null,
    "description": "reloadPage",
    "lineNumber": 83
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe105.it106",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 85,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe93.describe105.it107",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 105,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 734,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Press.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by, Key } from 'protractor';\n\nimport { Navigate, Press, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Press', () => {\n\n    const Form = {\n        Text_Field:     Target.the('text field').located(by.name('text')),\n    };\n\n    // todo: add check.whether\n\n    const page = pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" name=\"text\" />\n                    </form>\n                </body>\n            </html>\n        `);\n\n    describe('single keys', () => {\n\n        /** @test {Press} */\n        /** @test {Press.the} */\n        it('allows the actor to enter keys individually into a field', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(page),\n\n            Press.the('a').in(Form.Text_Field),\n            Press.the('A').in(Form.Text_Field),\n\n            Ensure.that(Value.of(Form.Text_Field), equals('aA')),\n        ));\n\n    });\n\n    describe('keyboard shortcuts', function () {\n\n        /** @test {Press} */\n        /** @test {Press.the} */\n        it('allows the actor to use keyboard shortcuts', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(page),\n\n            Press.the(Key.SHIFT, 'a').in(Form.Text_Field),\n\n            Ensure.that(Value.of(Form.Text_Field), equals(`A`)),\n        ));\n\n    });\n\n    given([\n        {\n            description: 'single key',\n            interaction: Press.the('a').in(Form.Text_Field),\n            expected:   `#actor presses A in the text field`,\n        },\n        {\n            description: 'sequence of keys',\n            interaction: Press.the('a', 'b', 'c').in(Form.Text_Field),\n            expected:   `#actor presses A, B, C in the text field`,\n        },\n        {\n            description: 'keyboard shortcut',\n            interaction: Press.the(Key.CONTROL, 'a').in(Form.Text_Field),\n            expected:   `#actor presses Control-A in the text field`,\n        },\n        {\n            description: 'complex shortcut',\n            interaction: Press.the(Key.COMMAND, Key.ALT, 'a').in(Form.Text_Field),\n            expected:   `#actor presses Command-Alt-A in the text field`,\n        },\n    ]).\n    /** @test {Press#toString} */\n    it('provides a sensible description of the interaction being performed', ({ interaction, expected }) => {\n        expect(interaction.toString()).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Press.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "describe108",
    "testId": 108,
    "memberof": "spec/screenplay/interactions/Press.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe108",
    "access": null,
    "description": "Press",
    "lineNumber": 10
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe108",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe108.describe109",
    "access": null,
    "description": "single keys",
    "lineNumber": 28
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe108.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe108.describe109.it110",
    "access": null,
    "description": "allows the actor to enter keys individually into a field",
    "lineNumber": 32,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe108",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe108.describe111",
    "access": null,
    "description": "keyboard shortcuts",
    "lineNumber": 43
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe108.describe111",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe108.describe111.it112",
    "access": null,
    "description": "allows the actor to use keyboard shortcuts",
    "lineNumber": 47,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 740,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "content": "import { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Note, TakeNote } from '@serenity-js/core';\nimport { ResizeBrowserWindow, Window } from '../../../src';\n\ndescribe('ResizeBrowserWindow', () => {\n\n    /** @test {ResizeBrowserWindow} */\n    /** @test {ResizeBrowserWindow.to} */\n    it('allows the actor to change width and height of browser window', () => actorCalled('Nick').attemptsTo(\n        ResizeBrowserWindow.to(640, 480),\n        Ensure.that(Window.size(), equals({width: 640, height: 480})),\n        ResizeBrowserWindow.to(480, 640),\n        Ensure.that(Window.size(), equals({width: 480, height: 640})),\n    ));\n\n    /** @test {ResizeBrowserWindow.toMaximum} */\n    it('allows the actor to resize browser window to maximum', () => actorCalled('Nick').attemptsTo(\n        ResizeBrowserWindow.toMaximum(),\n        TakeNote.of(Window.size()),\n        ResizeBrowserWindow.to(480, 640),\n        ResizeBrowserWindow.toMaximum(),\n        Ensure.that(Note.of(Window.size()), equals(Window.size())),\n    ));\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe113",
    "access": null,
    "description": "ResizeBrowserWindow",
    "lineNumber": 5
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe113.it114",
    "access": null,
    "description": "allows the actor to change width and height of browser window",
    "lineNumber": 9,
    "testTargets": [
      "ResizeBrowserWindow.to"
    ]
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe113.it115",
    "access": null,
    "description": "allows the actor to resize browser window to maximum",
    "lineNumber": 17,
    "testTargets": [
      "ResizeBrowserWindow.toMaximum"
    ]
  },
  {
    "__docId__": 744,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Scroll.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, isGreaterThan, isLessThan } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { ExecuteScript, LastScriptExecution, Navigate, Scroll, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Scroll', function () {\n\n    const aLongSpell = pageFromTemplate(`\n        <html>\n            <body style=\"margin:0; padding:0 0 1024px 0;\">\n                <input type=\"submit\" value=\"Cast!\" id=\"cast\" style=\"margin-top:1024px;\" />\n            </body>\n        </html>\n    `);\n\n    const Page = {\n        Execute_Button: Target.the('\"Cast!\" button').located(by.id('cast')),\n    };\n\n    /** @test {Scroll} */\n    /** @test {Scroll.to} */\n    it('allows the actor to scroll to a given target so that it appears in the viewport', () => actorCalled('Gandalf').attemptsTo(\n        Navigate.to(aLongSpell),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isGreaterThan(1000)),\n\n        Scroll.to(Page.Execute_Button),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isLessThan(1000)),\n    ));\n\n    /** @test {Enter#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Scroll.to(Page.Execute_Button).toString())\n            .to.equal(`#actor scrolls to the \"Cast!\" button`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Scroll.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe116",
    "access": null,
    "description": "Scroll",
    "lineNumber": 9
  },
  {
    "__docId__": 746,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe116.it117",
    "access": null,
    "description": "allows the actor to scroll to a given target so that it appears in the viewport",
    "lineNumber": 25,
    "testTargets": [
      "Scroll.to"
    ]
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe116.it118",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 38,
    "testTargets": [
      "Enter#toString"
    ]
  },
  {
    "__docId__": 748,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "content": "import { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { actorCalled, configure } from '@serenity-js/core';\nimport { ActivityRelatedArtifactGenerated } from '@serenity-js/core/lib/events';\n\nimport { Navigate, TakeScreenshot } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('TakeScreenshot', () => {\n\n    let recorder: EventRecorder;\n\n    beforeEach(() => {\n        recorder = new EventRecorder();\n\n        configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n    });\n\n    const page = pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" name=\"text\" />\n                    </form>\n                </body>\n            </html>\n        `);\n\n    /** @test {TakeScreenshot} */\n    /** @test {TakeScreenshot.of} */\n    it('allows the actor to take a screenshot with an arbitrary name', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(page),\n        TakeScreenshot.of('the page'),\n    ).then(() => {\n        PickEvent.from(recorder.events)\n            .next(ActivityRelatedArtifactGenerated, (e: ActivityRelatedArtifactGenerated) => {\n                expect(e.name.value).to.equal('the page');\n            });\n    }));\n\n    /** @test {TakeScreenshot#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(TakeScreenshot.of('the page').toString()).to.equal(`#actor takes a screenshot of 'the page'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe119",
    "access": null,
    "description": "TakeScreenshot",
    "lineNumber": 9
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe119.it120",
    "access": null,
    "description": "allows the actor to take a screenshot with an arbitrary name",
    "lineNumber": 34,
    "testTargets": [
      "TakeScreenshot.of"
    ]
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe119.it121",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 45,
    "testTargets": [
      "TakeScreenshot#toString"
    ]
  },
  {
    "__docId__": 752,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/UseAngular.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals, isTrue } from '@serenity-js/assertions';\nimport { actorCalled, Question } from '@serenity-js/core';\n\nimport { protractor } from 'protractor';\nimport { UseAngular } from '../../../src';\nimport { promiseOf } from '../../../src/promiseOf';\n\ndescribe('UseAngular', function () {\n\n    describe('synchronisation', () => {\n\n        afterEach(() => protractor.browser.waitForAngularEnabled(false));    // same as protractor.conf.js\n\n        const IsSynchronisationEnabled = () => Question.about('angular synchronisation',\n                actor => promiseOf(protractor.browser.waitForAngularEnabled()),\n        );\n\n        describe('when enabled', () => {\n            beforeEach(() => promiseOf(protractor.browser.waitForAngularEnabled(true)));\n\n            /** @test {UseAngular} */\n            it('can be disabled', () => actorCalled('Bernie').attemptsTo(\n                UseAngular.disableSynchronisation(),\n                Ensure.that(IsSynchronisationEnabled(), equals(false)),\n            ));\n        });\n\n        describe('when disabled', () => {\n            beforeEach(() => promiseOf(protractor.browser.waitForAngularEnabled(false)));\n\n            /** @test {UseAngular} */\n            it('can be enabled', () => actorCalled('Bernie').attemptsTo(\n                UseAngular.enableSynchronisation(),\n                Ensure.that(IsSynchronisationEnabled(), isTrue()),\n            ));\n        });\n\n        /** @test {UseAngular} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(UseAngular.enableSynchronisation().toString())\n                .to.equal(`#actor enables synchronisation with Angular`);\n\n            expect(UseAngular.disableSynchronisation().toString())\n                .to.equal(`#actor disables synchronisation with Angular`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/UseAngular.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "describe122",
    "testId": 122,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122",
    "access": null,
    "description": "UseAngular",
    "lineNumber": 9
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123",
    "access": null,
    "description": "synchronisation",
    "lineNumber": 11
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe124",
    "access": null,
    "description": "when enabled",
    "lineNumber": 19
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe124",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe124.it125",
    "access": null,
    "description": "can be disabled",
    "lineNumber": 23,
    "testTargets": [
      "UseAngular"
    ]
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe126",
    "access": null,
    "description": "when disabled",
    "lineNumber": 29
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.describe126.it127",
    "access": null,
    "description": "can be enabled",
    "lineNumber": 33,
    "testTargets": [
      "UseAngular"
    ]
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe122.describe123.it128",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 40,
    "testTargets": [
      "UseAngular"
    ]
  },
  {
    "__docId__": 760,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Wait.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, Duration } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Text, Wait } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Wait', () => {\n\n    const Status = Target.the('header').located(by.id('status'));\n\n    const Test_Page = pageFromTemplate(`\n        <html>\n            <body>\n                <h1 id=\"status\">Loading...</h1>\n                <script>\n                    (function () {\n                        setTimeout(function () {\n                            document.getElementById('status').textContent = 'Ready!'\n                        }, 200);\n                    })();\n                </script>\n            </body>\n        </html>\n    `);\n\n    describe('for', () => {\n\n        /** @test {Wait} */\n        /** @test {Wait.for} */\n        it('pauses the actor flow for the length of an explicitly-set duration', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.for(Duration.ofMilliseconds(300)),\n\n            Ensure.that(Text.of(Status), equals('Ready!')),\n        ));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.for(Duration.ofMilliseconds(300)).toString())\n                .to.equal(`#actor waits for 300ms`);\n        });\n    });\n\n    describe('until', () => {\n\n        /** @test {Wait} */\n        /** @test {Wait.until} */\n        it('pauses the actor flow until the expectation is met', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.until(Text.of(Status), equals('Ready!')),\n\n            Ensure.that(Text.of(Status), equals('Ready!')),\n        ));\n\n        /** @test {Wait} */\n        /** @test {Wait.upTo} */\n        /** @test {Wait.until} */\n        it('fails the actor flow when the timeout expires', () => expect(actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(Status), equals('Ready!')),\n        )).to.be.rejected.then((error: AssertionError) => {\n            expect(error).to.be.instanceOf(AssertionError);\n            expect(error.message).to.be.equal(`Waited 10ms for the text of the header to equal 'Ready!'`);\n            expect(error.actual).to.be.equal('Loading...');\n            expect(error.expected).to.be.equal('Ready!');\n\n            expect(error.cause.name).to.equal('TimeoutError');\n            expect(error.cause.message).to.match(/^Wait timed out after.*/);\n        }));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(Status), equals('Ready!')).toString())\n                .to.equal(`#actor waits up to 10ms until the text of the header does equal 'Ready!'`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Wait.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129",
    "access": null,
    "description": "Wait",
    "lineNumber": 9
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe130",
    "access": null,
    "description": "for",
    "lineNumber": 28
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe130.it131",
    "access": null,
    "description": "pauses the actor flow for the length of an explicitly-set duration",
    "lineNumber": 32,
    "testTargets": [
      "Wait.for"
    ]
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe130.it132",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 41,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "describe133",
    "testId": 133,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133",
    "access": null,
    "description": "until",
    "lineNumber": 47
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133.it134",
    "access": null,
    "description": "pauses the actor flow until the expectation is met",
    "lineNumber": 51,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133.it135",
    "access": null,
    "description": "fails the actor flow when the timeout expires",
    "lineNumber": 62,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 768,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe129.describe133.it136",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 77,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 769,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "content": "import { EventRecorder, expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by } from 'protractor';\nimport { ExecuteScript, Navigate, Target, Value } from '../../../../src';\nimport { pageFromTemplate } from '../../../fixtures';\nimport { UIActors } from '../../../UIActors';\n\n/** @test {ExecuteAsynchronousScript} */\ndescribe('ExecuteAsynchronousScript', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = 'Joe';\n                callback();\n            }, 100);\n        `),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a static argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = name;\n                callback();\n            }, 100);\n        `).withArguments(actorCalled('Joe').name),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a promised argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = name;\n                callback();\n            }, 100);\n        `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a Target argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var field = arguments[1];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                field.value = name;\n                callback();\n            }, 100);\n        `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.async(`\n            arguments[arguments.length - 1]();\n        `).toString()).to.equal(`#actor executes an asynchronous script`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.async(`arguments[arguments.length - 1]();`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes an asynchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('complains if the script has failed', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var callback = arguments[arguments.length - 1];\n\n            throw new Error(\"something's not quite right here\");\n        `),\n    )).to.be.rejectedWith(Error, `something's not quite right here`));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.async(`arguments[arguments.length - 1]();`),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events).to.have.lengthOf(3);\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'arguments[arguments.length - 1]();',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "access": null,
    "description": "ExecuteAsynchronousScript",
    "lineNumber": 14,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it138",
    "access": null,
    "description": "allows the actor to execute an asynchronous script",
    "lineNumber": 50,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it139",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a static argument",
    "lineNumber": 67,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it140",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a promised argument",
    "lineNumber": 85,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it141",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a Target argument",
    "lineNumber": 103,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it142",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 123,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it143",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 131,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 777,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it144",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 141,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe137.it145",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 153,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 779,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Browser, ExecuteScript, Navigate, Target, Text } from '../../../../src';\n\n/** @test {ExecuteScriptFromUrl} */\ndescribe('ExecuteScriptFromUrl', function () {\n\n    const\n        pathToScript = `file://${ require.resolve('./resources/execute-script-sample.js') }`,\n        pathToPage = `file://${ require.resolve('./resources/execute-script-sandbox.html') }`;\n\n    class Sandbox {\n        static Result = Target.the('sandbox result').located(by.id('result'));\n    }\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('allows the actor to execute a script stored at a specific location', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript),\n\n        Ensure.that(Text.of(Sandbox.Result), equals('Script loaded successfully')),\n    ));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script could not be loaded', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript + '.invalid'),\n    )).to.be.rejectedWith(LogicError, `Couldn't load script from ${ pathToScript }.invalid`)\n        .then(() => actorCalled('Joe').attemptsTo(\n            Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('execute-script-sample.js.invalid - Failed to load resource')))),\n        )));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script has already been loaded', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript),\n        ExecuteScript.from(pathToScript),\n    )).to.be.rejectedWith(LogicError, `Script from ${ pathToScript } has already been loaded`));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(ExecuteScript.from(pathToScript).toString())\n            .to.equal(`#actor executes a script from ${ pathToScript }`);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 780,
    "kind": "test",
    "name": "describe146",
    "testId": 146,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146",
    "access": null,
    "description": "ExecuteScriptFromUrl",
    "lineNumber": 9,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146.it147",
    "access": null,
    "description": "allows the actor to execute a script stored at a specific location",
    "lineNumber": 39,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 782,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146.it148",
    "access": null,
    "description": "complains if the script could not be loaded",
    "lineNumber": 49,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146.it149",
    "access": null,
    "description": "complains if the script has already been loaded",
    "lineNumber": 60,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 784,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe146.it150",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 69,
    "testTargets": [
      "ExecuteScriptFromUrl#toString"
    ]
  },
  {
    "__docId__": 785,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "content": "import { EventRecorder, expect } from '@integration/testing-tools';\nimport { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by, error } from 'protractor';\nimport { Browser, ExecuteScript, Navigate, Target, Value } from '../../../../src';\nimport { pageFromTemplate } from '../../../fixtures';\nimport { UIActors } from '../../../UIActors';\n\n/** @test {ExecuteSynchronousScript} */\ndescribe('ExecuteSynchronousScript', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            document.getElementById('name').value = 'Joe';\n        `),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a static argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n\n            document.getElementById('name').value = name;\n        `).withArguments(actorCalled('Joe').name),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a promised argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n\n            document.getElementById('name').value = name;\n        `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a Target argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n            var field = arguments[1];\n\n            field.value = name;\n        `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.sync(`\n            console.log('hello world');\n        `).toString()).to.equal(`#actor executes a synchronous script`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.sync(`console.log('hello world');`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes a synchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {LastScriptExecution} */\n    it('complains if the script has failed', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n                throw new Error(\"something's not quite right here\");\n            `),\n    )).to.be.rejectedWith(error.JavascriptError, `javascript error: something's not quite right here`));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.sync(`console.log('hello world');`),\n            Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('hello world')))),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events).to.have.lengthOf(5);\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'console.log(\\'hello world\\');',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "access": null,
    "description": "ExecuteSynchronousScript",
    "lineNumber": 14,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it152",
    "access": null,
    "description": "allows the actor to execute a synchronous script",
    "lineNumber": 50,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 788,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it153",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a static argument",
    "lineNumber": 62,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 789,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it154",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a promised argument",
    "lineNumber": 76,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 790,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it155",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a Target argument",
    "lineNumber": 90,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it156",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 106,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 792,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it157",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 115,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 793,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it158",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 126,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 794,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe151.it159",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 136,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 795,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Attribute.spec.ts",
    "content": "import { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Attribute, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Attribute', () => {\n\n    /** @test {Attribute} */\n    it('allows the actor to read an attribute of a DOM element', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\" />\n        `)),\n\n        Ensure.that(Attribute.of(Target.the('DOM').located(by.tagName('html'))).called('lang'), equals('en')),\n    ));\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Attribute.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 796,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe160",
    "access": null,
    "description": "Attribute",
    "lineNumber": 8
  },
  {
    "__docId__": 797,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe160.it161",
    "access": null,
    "description": "allows the actor to read an attribute of a DOM element",
    "lineNumber": 11,
    "testTargets": [
      "Attribute"
    ]
  },
  {
    "__docId__": 798,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Browser.spec.ts",
    "content": "import { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Browser, Click, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Browser', () => {\n\n    /** @test {Browser.log} */\n    it('returns no entries if the console log is empty', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\" />\n        `)),\n\n        Ensure.that(Browser.log(), property('length', equals(0))),\n    ));\n\n    /** @test {Browser.log} */\n    it('allows the actor to read the browser log entries', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\">\n                <body>\n                    <script>\n                        console.log('Hello from the console!');\n                    </script>\n                </body>\n            </html>\n        `)),\n\n        Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('Hello from the console!')))),\n    ));\n\n    const Trigger = Target.the('trigger button').located(by.id('trigger'));\n\n    /** @test {Browser.log} */\n    it('clears the log upon invocation', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\">\n                <body>\n                    <button id=\"trigger\" onclick=\"console.log('new entry')\">Print to console</button>\n                </body>\n            </html>\n        `)),\n\n        Click.on(Trigger),\n        Ensure.that(Browser.log(), property('length', equals(1))),\n\n        Click.on(Trigger),\n        Ensure.that(Browser.log(), property('length', equals(1))),\n    ));\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Browser.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 799,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "spec/screenplay/questions/Browser.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe162",
    "access": null,
    "description": "Browser",
    "lineNumber": 8
  },
  {
    "__docId__": 800,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe162.it163",
    "access": null,
    "description": "returns no entries if the console log is empty",
    "lineNumber": 11,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 801,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe162.it164",
    "access": null,
    "description": "allows the actor to read the browser log entries",
    "lineNumber": 20,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 802,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe162.it165",
    "access": null,
    "description": "clears the log upon invocation",
    "lineNumber": 37,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 803,
    "kind": "testFile",
    "name": "spec/screenplay/questions/CSSClasses.spec.ts",
    "content": "import { contain, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by } from 'protractor';\n\nimport { CSSClasses, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('CSSClasses', () => {\n\n    const testPage = pageFromTemplate(`\n            <html>\n            <body>\n                <ul>\n                    <li id=\"no-class-attribute\"></li>\n                    <li id=\"empty-class-attribute\" class=\"\"></li>\n                    <li id=\"class-attribute-with-whitespace-only\" class=\"   \"></li>\n                    <li id=\"single-class\" class=\"pretty\"></li>\n                    <li id=\"several-classes\" class=\"pretty css classes\"></li>\n                    <li id=\"several-classes-with-whitespace\" class=\"  pretty   css  classes     \"></li>\n                </ul>\n            </body>\n            </html>\n        `);\n\n    /** @test {CSSClasses} */\n    /** @test {CSSClasses.of} */\n    describe('of', () => {\n\n        given([\n            { description: 'no-class-attribute',                    expected: []                            },\n            { description: 'no-class-attribute',                    expected: []                            },\n            { description: 'class-attribute-with-whitespace-only',  expected: []                            },\n            { description: 'single-class',                          expected: ['pretty']                    },\n            { description: 'several-classes',                       expected: ['pretty', 'css', 'classes']  },\n            { description: 'several-classes-with-whitespace',       expected: ['pretty', 'css', 'classes']  },\n        ]).\n        it('allows the actor to read the css classes of a DOM element matching the locator', ({ description, expected }) =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(testPage),\n\n                Ensure.that(\n                    CSSClasses.of(Target.the(`Element with ${ description }`).located(by.id(description))),\n                    equals(expected),\n                ),\n            ));\n\n        /** @test {CSSClasses} */\n        /** @test {CSSClasses#of} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(\n                CSSClasses.of(\n                    Target.the(`Element with single-class`).located(by.id('single-class')),\n                ).of(Target.the(`list`).located(by.tagName('ul'))),\n                contain('pretty'),\n            ),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/CSSClasses.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 804,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe166",
    "access": null,
    "description": "CSSClasses",
    "lineNumber": 9
  },
  {
    "__docId__": 805,
    "kind": "test",
    "name": "describe167",
    "testId": 167,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe166.describe167",
    "access": null,
    "description": "of",
    "lineNumber": 28,
    "testTargets": [
      "CSSClasses.of"
    ]
  },
  {
    "__docId__": 806,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe166.describe167.it168",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 50,
    "testTargets": [
      "CSSClasses#of"
    ]
  },
  {
    "__docId__": 807,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Cookie.spec.ts",
    "content": "import 'mocha';\n\nimport { certificates, expect } from '@integration/testing-tools';\nimport { Ensure, equals, isTrue } from '@serenity-js/assertions';\nimport { actorCalled, Question, Transform } from '@serenity-js/core';\nimport { LocalServer, ManageALocalServer, StartLocalServer, StopLocalServer } from '@serenity-js/local-server';\nimport express = require('express');\n\nimport { protractor } from 'protractor';\nimport { BrowseTheWeb, DeleteCookies, Navigate } from '../../../src';\nimport { Cookie } from '../../../src/screenplay';\n\ndescribe('Cookie', () => {\n\n    // a tiny express server, setting response cookies\n    const cookieCutterApp = express().\n        get('/cookie', (req: express.Request & { query: { [key: string]: string }}, res: express.Response) => {\n            res.cookie(req.query.name, req.query.value, {\n                path:       '/cookie',\n                domain:     req.query.domain,\n                httpOnly:   !! req.query.httpOnly,\n                secure:     !! req.query.secure,\n                expires:    req.query.expires && new Date(req.query.expires),\n                // https://www.chromestatus.com/feature/5633521622188032\n                // sameSite:   !! req.query.secure ? 'None' : undefined,\n            }).status(200).send();\n        });\n\n    function cookieCutterURLFor(path: string): Question<Promise<string>> {\n        return Transform.the(LocalServer.url(), url => `${ url }${ path }`);\n    }\n\n    describe('over HTTP', () => {\n\n        // Fun fact: Before Cookie Monster ate his first cookie, he believed his name was Sid. You're welcome.\n        const Sid = actorCalled('Sid').whoCan(\n            BrowseTheWeb.using(protractor.browser),\n            ManageALocalServer.runningAHttpListener(cookieCutterApp),\n        );\n\n        beforeEach(() => Sid.attemptsTo(StartLocalServer.onRandomPort()));\n        afterEach(() => Sid.attemptsTo(StopLocalServer.ifRunning()));\n        afterEach(() => Sid.attemptsTo(DeleteCookies.all()));\n\n        describe('when working with the value', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.valueOf('favourite'), equals('chocolate-chip')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.valueOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.valueOf('favourite').toString()).to.equal('the value of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with the path', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.pathOf('favourite'), equals('/cookie')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#pathOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.pathOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.pathOf('favourite').toString()).to.equal('the path of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with the domain', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.domainOf('favourite'), equals('127.0.0.1')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#domainOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.domainOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.domainOf('favourite').toString()).to.equal('the domain of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with http-only cookies', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#isHTTPOnly} */\n            it('allows the actor to confirm that a cookie is http-only', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.isHTTPOnly('favourite'), equals(false)),\n\n                Navigate.to(cookieCutterURLFor('/cookie?name=second_choice&value=shortbread&httpOnly=true')),\n                Ensure.that(Cookie.isHTTPOnly('second_choice'), isTrue()),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#isHTTPOnly} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.isHTTPOnly('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.isHTTPOnly('favourite').toString()).to.equal('the HTTP-only status of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with an expiry date', () => {\n\n            function tomorrow(): Date {\n                const now = new Date();\n                const nextDay = new Date(now);\n                nextDay.setDate(nextDay.getDate() + 1);\n\n                return nextDay;\n            }\n\n            const expectedExpiryDate = tomorrow();\n\n            /** @test {Cookie} */\n            /** @test {Cookie#expiryDateOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor(`/cookie?name=expiring&value=chocolate-chip&expires=${ expectedExpiryDate.toISOString() }`)),\n                Ensure.that(Transform.the(Cookie.expiryDateOf('expiring'), date => date.getDay()), equals(expectedExpiryDate.getDay())),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#expiryDateOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.expiryDateOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.expiryDateOf('favourite').toString()).to.equal('the expiry date of the \"favourite\" cookie');\n            });\n        });\n\n    });\n\n    describe('when working with secure cookies', () => {\n\n        const Sid = actorCalled('Secure Sid').whoCan(\n            BrowseTheWeb.using(protractor.browser),\n            ManageALocalServer.runningAHttpsListener(cookieCutterApp, {\n                cert:               certificates.cert,\n                key:                certificates.key,\n                requestCert:        true,\n                rejectUnauthorized: false,\n            }),\n        );\n\n        beforeEach(() => Sid.attemptsTo(StartLocalServer.onRandomPort()));\n        afterEach(() => Sid.attemptsTo(StopLocalServer.ifRunning()));\n        afterEach(() => Sid.attemptsTo(DeleteCookies.all()));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it('allows the actor to confirm that a cookie is not secure', () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n            Ensure.that(Cookie.isSecure('favourite'), equals(false)),\n        ));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it('allows the actor to confirm that a cookie is secure', () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip&secure=1')),\n            Ensure.that(Cookie.isSecure('favourite'), isTrue()),\n        ));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it(`returns an undefined when it can't retrieve it`, () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n            Ensure.that(Cookie.isSecure('not-so-favourite'), equals(undefined)),\n        ));\n\n        /** @test {Cookie} */\n        it('provides a sensible description of the question being asked', () => {\n            expect(Cookie.isSecure('favourite').toString()).to.equal('the \"secure\" status of the \"favourite\" cookie');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Cookie.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 808,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169",
    "access": null,
    "description": "Cookie",
    "lineNumber": 13
  },
  {
    "__docId__": 809,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "access": null,
    "description": "over HTTP",
    "lineNumber": 55
  },
  {
    "__docId__": 810,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171",
    "access": null,
    "description": "when working with the value",
    "lineNumber": 67
  },
  {
    "__docId__": 811,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171.it172",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 71,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 812,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171.it173",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 78,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 813,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe171.it174",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 84,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 814,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175",
    "access": null,
    "description": "when working with the path",
    "lineNumber": 89
  },
  {
    "__docId__": 815,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175.it176",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 93,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 816,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175.it177",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 100,
    "testTargets": [
      "Cookie#pathOf"
    ]
  },
  {
    "__docId__": 817,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe175.it178",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 106,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179",
    "access": null,
    "description": "when working with the domain",
    "lineNumber": 111
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179.it180",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 115,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179.it181",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 122,
    "testTargets": [
      "Cookie#domainOf"
    ]
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe179.it182",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 128,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183",
    "access": null,
    "description": "when working with http-only cookies",
    "lineNumber": 133
  },
  {
    "__docId__": 823,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183.it184",
    "access": null,
    "description": "allows the actor to confirm that a cookie is http-only",
    "lineNumber": 137,
    "testTargets": [
      "Cookie#isHTTPOnly"
    ]
  },
  {
    "__docId__": 824,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183.it185",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 147,
    "testTargets": [
      "Cookie#isHTTPOnly"
    ]
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe183.it186",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 153,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187",
    "access": null,
    "description": "when working with an expiry date",
    "lineNumber": 158
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187.it188",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 181,
    "testTargets": [
      "Cookie#expiryDateOf"
    ]
  },
  {
    "__docId__": 828,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187.it189",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 188,
    "testTargets": [
      "Cookie#expiryDateOf"
    ]
  },
  {
    "__docId__": 829,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe170.describe187.it190",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 194,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 830,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191",
    "access": null,
    "description": "when working with secure cookies",
    "lineNumber": 201
  },
  {
    "__docId__": 831,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191.it192",
    "access": null,
    "description": "allows the actor to confirm that a cookie is not secure",
    "lineNumber": 219,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 832,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191.it193",
    "access": null,
    "description": "allows the actor to confirm that a cookie is secure",
    "lineNumber": 226,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191.it194",
    "access": null,
    "lineNumber": 233,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 834,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe169.describe191.it195",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 239,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 835,
    "kind": "testFile",
    "name": "spec/screenplay/questions/LastScriptExecution.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\nimport { by } from 'protractor';\nimport { Enter, ExecuteScript, LastScriptExecution, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\n/** @test {LastScriptExecution} */\ndescribe('LastScriptExecution', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    describe('when used with ExecuteScript.sync', () => {\n\n        /** @test {ExecuteScript.sync} */\n        /** @test {ExecuteSynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('allows the actor to retrieve the result of the script execution', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            Enter.theValue(actorCalled('Joe').name).into(Sandbox.Input),\n\n            ExecuteScript.sync(`\n                var field = arguments[0];\n                return field.value;\n            `).withArguments(Sandbox.Input),\n\n            Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n        ));\n\n        /** @test {ExecuteScript.sync} */\n        /** @test {ExecuteSynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('returns null if the script did not return any result', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            ExecuteScript.sync(`\n                /* do nothing */\n            `),\n\n            Ensure.that(LastScriptExecution.result<null>(), equals(null)),\n        ));\n    });\n\n    describe('when used with ExecuteScript.async', () => {\n\n        /** @test {ExecuteScript.async} */\n        /** @test {ExecuteAsynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('allows the actor to retrieve the result of the script execution', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            Enter.theValue(actorCalled('Joe').name).into(Sandbox.Input),\n\n            ExecuteScript.async(`\n                var field = arguments[0];\n                var callback = arguments[arguments.length - 1];\n                callback(field.value);\n            `).withArguments(Sandbox.Input),\n\n            Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n        ));\n\n        /** @test {ExecuteScript.async} */\n        /** @test {ExecuteAsynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('returns null if the script did not return any result', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            ExecuteScript.async(`\n                var callback = arguments[arguments.length - 1];\n                callback();\n            `),\n\n            Ensure.that(LastScriptExecution.result<null>(), equals(null)),\n        ));\n    });\n\n    /** @test {ExecuteAsynchronousScript} */\n    /** @test {LastScriptExecution} */\n    it('complains if the script hasn\\'t been executed yet', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n    )).to.be.rejectedWith(LogicError, 'Make sure to execute a script before checking on the result'));\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/LastScriptExecution.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196",
    "access": null,
    "description": "LastScriptExecution",
    "lineNumber": 9,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "describe197",
    "testId": 197,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe197",
    "access": null,
    "description": "when used with ExecuteScript.sync",
    "lineNumber": 43
  },
  {
    "__docId__": 838,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe197.it198",
    "access": null,
    "description": "allows the actor to retrieve the result of the script execution",
    "lineNumber": 48,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 839,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe197.it199",
    "access": null,
    "description": "returns null if the script did not return any result",
    "lineNumber": 64,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe200",
    "access": null,
    "description": "when used with ExecuteScript.async",
    "lineNumber": 75
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe200.it201",
    "access": null,
    "description": "allows the actor to retrieve the result of the script execution",
    "lineNumber": 80,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.describe200.it202",
    "access": null,
    "description": "returns null if the script did not return any result",
    "lineNumber": 97,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe196.it203",
    "access": null,
    "description": "complains if the script hasn't been executed yet",
    "lineNumber": 111,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 844,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Pick.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { contain, Ensure, equals, startsWith } from '@serenity-js/assertions';\nimport { actorCalled, Question } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by, ElementArrayFinder, ElementFinder } from 'protractor';\nimport { Click, CSSClasses, Navigate, Pick, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Pick', () => {\n\n    const shoppingListPage = pageFromTemplate(`\n        <html>\n        <body>\n        <div id=\"shopping-list-app\">\n            <h1>Shopping list</h1>\n            <ul>\n                <li class=\"buy 1st\">\n                    <span class=\"item-name\">oats</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n                <li class=\"buy 2nd\">\n                    <span class=\"item-name\">coconut milk</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n                <li class=\"3rd\">\n                    <span class=\"item-name\">coffee</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n            </ul>\n        </div>\n        <script>\n            function toggle(event) {\n                event.parentNode.classList.toggle('buy');\n            }\n        </script>\n        </body>\n        </html>\n    `);\n\n    class ShoppingList {\n        static Items        = Target.all('shopping list items').located(by.css('li'));\n        static Item         = Target.the('shopping list item').located(by.css('li'));\n        static Titles       = Target.all('shopping list item titles').located(by.css('li span.item-name'));\n        static Item_Name    = Target.the('item name').located(by.tagName('span.item-name'));\n        static Item_Names   = Target.all('item names').located(by.tagName('span.item-name'));\n    }\n\n    describe('(when no filters are applied)', () => {\n\n        describe('lets the actor interact with the list of matching elements so that it', () => {\n\n            const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Titles);\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(3)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), equals('oats')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), equals('coffee')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(1)), equals('coconut milk')),\n            ));\n\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            const picked = Pick.from(ShoppingList.Items);\n\n            /** @test {Pick} */\n            it('returns the number of items', () =>\n                expect(picked.count().toString())\n                    .to.equal('the number of the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal('the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal('the first of the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal('the last of the shopping list items'));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString())\n                    .to.equal(`the ${ description } of the shopping list items`);\n            });\n        });\n    });\n\n    describe('(when a filter is applied)', () => {\n\n        const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items).where(CSSClasses, contain('buy'));\n\n        describe('lets the actor filter the list of matching elements so that it', () => {\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(2)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk x')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), startsWith('oats')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(1)), startsWith('coconut milk')),\n            ));\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            /** @test {Pick} */\n            it('returns the number of answers', () =>\n                expect(picked.count().toString())\n                    .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal(`the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString()).to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy'`);\n            });\n        });\n    });\n\n    describe('(when multiple filters are applied)', () => {\n\n        const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items).where(CSSClasses, contain('buy')).where(Text, startsWith('coconut'));\n\n        describe('lets the actor filter the list of matching elements so that it', () => {\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(1)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk x')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(0)), startsWith('coconut milk')),\n            ));\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            /** @test {Pick} */\n            it('returns the number of answers', () =>\n                expect(picked.count().toString())\n                    .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal(`the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString())\n                    .to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`);\n            });\n        });\n    });\n\n    describe('(when interacting with elements on screen)', () => {\n\n        const ItemCalled = (name: string) =>\n            Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items)\n                .where(Text.of(ShoppingList.Item_Name), equals(name)).first();\n\n        const ItemsLeftToBuy = () =>\n            Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items)\n                .where(CSSClasses, contain('buy'))\n                .all();\n\n        const LinkTo = (item: Question<ElementFinder> | ElementFinder) => Target.the('link to element').of(item).located(by.css('a'));\n\n        /** @test {Pick} */\n        it('makes it easy for an actor to pick the element of interest', () => actorCalled('Peter').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Click.on(LinkTo(ItemCalled('coffee'))),\n\n            Ensure.that(CSSClasses.of(ItemCalled('coffee')), contain('buy')),\n        ));\n\n        /** @test {Pick} */\n        it('makes it easy for an actor to pick all elements of interest', () => actorCalled('Peter').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Click.on(LinkTo(ItemCalled('coconut milk'))),\n            Click.on(LinkTo(ItemCalled('coffee'))),\n\n            Ensure.that(Text.ofAll(ItemsLeftToBuy()), equals([ 'oats x', 'coffee x' ])),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Pick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "spec/screenplay/questions/Pick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204",
    "access": null,
    "description": "Pick",
    "lineNumber": 11
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "describe205",
    "testId": 205,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205",
    "access": null,
    "description": "(when no filters are applied)",
    "lineNumber": 112
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "describe206",
    "testId": 206,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "access": null,
    "description": "lets the actor interact with the list of matching elements so that it",
    "lineNumber": 114
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206.it207",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 119,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206.it208",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 126,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206.it209",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 133,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206.it210",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 140,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe206.it211",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 147,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 155
  },
  {
    "__docId__": 854,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212.it213",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 160,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212.it214",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 165,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 856,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212.it215",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 170,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 857,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe205.describe212.it216",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 175,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 858,
    "kind": "test",
    "name": "describe217",
    "testId": 217,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217",
    "access": null,
    "description": "(when a filter is applied)",
    "lineNumber": 200
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 204
  },
  {
    "__docId__": 860,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218.it219",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 207,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 861,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218.it220",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 214,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 862,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218.it221",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 221,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 863,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218.it222",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 228,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe218.it223",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 235,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 865,
    "kind": "test",
    "name": "describe224",
    "testId": 224,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 242
  },
  {
    "__docId__": 866,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224.it225",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 245,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 867,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224.it226",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 250,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 868,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224.it227",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 255,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 869,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe217.describe224.it228",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 260,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "describe229",
    "testId": 229,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229",
    "access": null,
    "description": "(when multiple filters are applied)",
    "lineNumber": 283
  },
  {
    "__docId__": 871,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 287
  },
  {
    "__docId__": 872,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230.it231",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 290,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 873,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230.it232",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 297,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230.it233",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 304,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 875,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230.it234",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 311,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe230.it235",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 318,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 877,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 325
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236.it237",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 328,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 879,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236.it238",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 333,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236.it239",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 338,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 881,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe229.describe236.it240",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 343,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "describe241",
    "testId": 241,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe241",
    "access": null,
    "description": "(when interacting with elements on screen)",
    "lineNumber": 367
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe241.it242",
    "access": null,
    "description": "makes it easy for an actor to pick the element of interest",
    "lineNumber": 381,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 884,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe204.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe204.describe241.it243",
    "access": null,
    "description": "makes it easy for an actor to pick all elements of interest",
    "lineNumber": 390,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 885,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Target.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { contain, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\nimport { Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\n/** @test {Target} */\ndescribe('Target', () => {\n\n    const shoppingListPage = pageFromTemplate(`\n        <html>\n            <body>\n                <div id=\"shopping-list-app\">\n                    <h1>Shopping <span>list</span></h1>\n                    <h2 class=\"progress\"><span>2</span> out of 3</h2>\n                    <ul>\n                        <li class=\"buy\">oats</li>\n                        <li class=\"buy\">coconut milk</li>\n                        <li class=\"bought\">coffee</li>\n                    </ul>\n                </div>\n            </body>\n        </html>\n    `);\n\n    class ShoppingList {\n        static App                  = Target.the('shopping list app').located(by.id('shopping-list-app'));\n        static Progress             = Target.the('progress bar').located(by.css('.progress')).of(ShoppingList.App);\n        static Number_Of_Items_Left = Target.the('number of items left').of(ShoppingList.Progress).located(by.css('span'));\n\n        static Header       = Target.the('header').located(by.tagName('h1'));\n        static List         = Target.the('shopping list').located(by.tagName('ul'));\n        static Items        = Target.all('items').of(ShoppingList.App).located(by.tagName('li'));\n        static Bought_Items = Target.all('bought items').located(by.css('.bought')).of(ShoppingList.List);\n    }\n\n    describe('allows the actor to locate', () => {\n\n        /**\n         * @test {Target}\n         * @test {TargetElement}\n         */\n        it('a single web element matching the selector', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Ensure.that(Text.of(ShoppingList.Header), equals('Shopping list')),\n        ));\n\n        /**\n         * @test {Target}\n         * @test {TargetElements}\n         */\n        it('all web elements matching the selector', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Ensure.that(Text.ofAll(ShoppingList.Items), contain('oats')),\n        ));\n\n        /**\n         * @test {Target}\n         * @test {TargetNestedElement}\n         */\n        it('an element relative to another target', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Ensure.that(Text.of(ShoppingList.Number_Of_Items_Left), equals('2')),\n        ));\n\n        /**\n         * @test {Target}\n         * @test {TargetNestedElements}\n         */\n        it('all elements relative to another target', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Ensure.that(Text.ofAll(ShoppingList.Bought_Items), equals(['coffee'])),\n        ));\n    });\n\n    describe('provides a sensible description of', () => {\n\n        describe('an element that', () => {\n\n            /**\n             * @test {Target}\n             * @test {TargetElement}\n             */\n            it('is being targeted', () => {\n                expect(ShoppingList.Header.toString())\n                    .to.equal('the header');\n            });\n\n            /**\n             * @test {Target}\n             * @test {TargetElement}\n             */\n            it('has been located', () => {\n                expect(ShoppingList.Header.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the header');\n            });\n\n            /**\n             * @test {Target}\n             * @test {TargetNestedElement}\n             */\n            it('is nested', () =>\n                expect(ShoppingList.Number_Of_Items_Left.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the number of items left of the progress bar of the shopping list app'));\n        });\n\n        describe('elements that', () => {\n\n            /**\n             * @test {Target}\n             * @test {TargetElements}\n             */\n            it('are being targeted', () => {\n                expect(ShoppingList.Items.toString())\n                    .to.equal('the items of the shopping list app');\n            });\n\n            /**\n             * @test {Target}\n             * @test {TargetElements}\n             */\n            it('have been located', () =>\n                expect(ShoppingList.Items.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the items of the shopping list app'));\n\n            /**\n             * @test {Target}\n             * @test {TargetNestedElements}\n             */\n            it('are nested', () =>\n                expect(ShoppingList.Bought_Items.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the bought items of the shopping list'));\n        });\n    });\n\n    describe('when nesting targets', () => {\n        const pageWithNestedTargets = pageFromTemplate(`\n            <html>\n                <body>\n                    <article>\n                        <header>\n                            <h1>Title</h1>\n                        </header>\n                        <ul id=\"toc\">\n                            <li>topic 1</li>\n                            <li>topic 2</li>\n                            <li>topic 3</li>\n                        </ul>\n                    </article>\n                </body>\n            </html>\n        `);\n\n        class Page {\n            static Article = Target.the('article').located(by.css('article'));\n            static Header  = Target.the('header').located(by.css('header'));\n            static Title   = Target.the('title').located(by.css('h1'));\n            static TOC     = Target.the('table of contents').located(by.css('ul#toc'));\n            static Topics  = Target.all('topics').located(by.css('li'));\n        }\n\n        /**\n         * @test {Target}\n         * @test {TargetNestedElement}\n         */\n        it('allows for Target<ElementFinder> to be nested within another Target<ElementFinder>', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageWithNestedTargets),\n\n            Ensure.that(Text.of(Page.Header.of(Page.Article)), equals('Title')),\n            Ensure.that(Page.Header.of(Page.Article).toString(), equals('the header of the article')),\n        ));\n\n        /**\n         * @test {Target}\n         * @test {TargetNestedElement}\n         */\n        it('allows for Target<ElementFinder> to form a chain with other Target<ElementFinder>s', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageWithNestedTargets),\n\n            Ensure.that(Text.of(Page.Title.of(Page.Header).of(Page.Article)), equals('Title')),\n            Ensure.that(Page.Title.of(Page.Header.of(Page.Article)).toString(), equals('the title of the header of the article')),\n        ));\n\n        /**\n         * @test {Target}\n         * @test {TargetNestedElements}\n         */\n        it('allows for Target<ElementArrayFinder> to be nested within another Target<ElementFinder>', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageWithNestedTargets),\n\n            Ensure.that(Text.ofAll(Page.Topics.of(Page.TOC).of(Page.Article)), equals(['topic 1', 'topic 2', 'topic 3'])),\n            Ensure.that(Page.Topics.of(Page.TOC).of(Page.Article).toString(), equals('the topics of the table of contents of the article')),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Target.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "describe244",
    "testId": 244,
    "memberof": "spec/screenplay/questions/Target.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244",
    "access": null,
    "description": "Target",
    "lineNumber": 9,
    "testTargets": [
      "Target"
    ]
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "describe245",
    "testId": 245,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe245",
    "access": null,
    "description": "allows the actor to locate",
    "lineNumber": 122
  },
  {
    "__docId__": 888,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe245.it246",
    "access": null,
    "description": "a single web element matching the selector",
    "lineNumber": 128,
    "testTargets": [
      "Target",
      "TargetElement"
    ]
  },
  {
    "__docId__": 889,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe245.it247",
    "access": null,
    "description": "all web elements matching the selector",
    "lineNumber": 138,
    "testTargets": [
      "Target",
      "TargetElements"
    ]
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe245.it248",
    "access": null,
    "description": "an element relative to another target",
    "lineNumber": 148,
    "testTargets": [
      "Target",
      "TargetNestedElement"
    ]
  },
  {
    "__docId__": 891,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe245.it249",
    "access": null,
    "description": "all elements relative to another target",
    "lineNumber": 158,
    "testTargets": [
      "Target",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "describe250",
    "testId": 250,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250",
    "access": null,
    "description": "provides a sensible description of",
    "lineNumber": 165
  },
  {
    "__docId__": 893,
    "kind": "test",
    "name": "describe251",
    "testId": 251,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251",
    "access": null,
    "description": "an element that",
    "lineNumber": 167
  },
  {
    "__docId__": 894,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251.it252",
    "access": null,
    "description": "is being targeted",
    "lineNumber": 173,
    "testTargets": [
      "Target",
      "TargetElement"
    ]
  },
  {
    "__docId__": 895,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251.it253",
    "access": null,
    "description": "has been located",
    "lineNumber": 182,
    "testTargets": [
      "Target",
      "TargetElement"
    ]
  },
  {
    "__docId__": 896,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe251.it254",
    "access": null,
    "description": "is nested",
    "lineNumber": 191,
    "testTargets": [
      "Target",
      "TargetNestedElement"
    ]
  },
  {
    "__docId__": 897,
    "kind": "test",
    "name": "describe255",
    "testId": 255,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255",
    "access": null,
    "description": "elements that",
    "lineNumber": 196
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255.it256",
    "access": null,
    "description": "are being targeted",
    "lineNumber": 202,
    "testTargets": [
      "Target",
      "TargetElements"
    ]
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255.it257",
    "access": null,
    "description": "have been located",
    "lineNumber": 211,
    "testTargets": [
      "Target",
      "TargetElements"
    ]
  },
  {
    "__docId__": 900,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe250.describe255.it258",
    "access": null,
    "description": "are nested",
    "lineNumber": 219,
    "testTargets": [
      "Target",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "describe259",
    "testId": 259,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe259",
    "access": null,
    "description": "when nesting targets",
    "lineNumber": 225
  },
  {
    "__docId__": 902,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe259",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe259.it260",
    "access": null,
    "description": "allows for Target<ElementFinder> to be nested within another Target<ElementFinder>",
    "lineNumber": 317,
    "testTargets": [
      "Target",
      "TargetNestedElement"
    ]
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe259",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe259.it261",
    "access": null,
    "description": "allows for Target<ElementFinder> to form a chain with other Target<ElementFinder>s",
    "lineNumber": 328,
    "testTargets": [
      "Target",
      "TargetNestedElement"
    ]
  },
  {
    "__docId__": 904,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe244.describe259",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe244.describe259.it262",
    "access": null,
    "description": "allows for Target<ElementArrayFinder> to be nested within another Target<ElementFinder>",
    "lineNumber": 339,
    "testTargets": [
      "Target",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 905,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Text.spec.ts",
    "content": "import { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Text', () => {\n\n    describe('of', () => {\n\n        const Header = Target.the('header').located(by.tagName('h1'));\n\n        /** @test {Text} */\n        /** @test {Text.of} */\n        it('allows the actor to read the text of the DOM element matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <h1>Hello World!</h1>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(Text.of(Header), equals('Hello World!')),\n        ));\n\n        it('produces a sensible description of the question being asked', () => {\n            expect(Text.of(Target.the('header').located(by.tagName('h1'))).toString())\n                .to.equal('the text of the header');\n        });\n    });\n\n    describe('ofAll', () => {\n\n        const Shopping_List_Items = Target.all('shopping list items').located(by.css('li'));\n\n        const testPage = pageFromTemplate(`\n                <html>\n                <body>\n                    <h1>Shopping list</h1>\n                    <ul>\n                        <li>milk</li>\n                        <li>oats</li>\n                    </ul>\n                </body>\n                </html>\n            `);\n\n        /** @test {Text} */\n        /** @test {Text.ofAll} */\n        it('allows the actor to read the text of all DOM elements matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(Text.ofAll(Shopping_List_Items), equals(['milk', 'oats'])),\n        ));\n\n        /** @test {Text} */\n        /** @test {Text.ofAll} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(Text.ofAll(Shopping_List_Items).of(Target.the('body').located(by.tagName('body'))), equals(['milk', 'oats'])),\n        ));\n\n        /** @test {Text} */\n        /** @test {Text.ofAll} */\n        /** @test {Text#toString} */\n        it('produces sensible description of the question being asked', () => {\n            expect(Text.ofAll(Shopping_List_Items).toString())\n                .to.equal('the text of the shopping list items');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Text.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 906,
    "kind": "test",
    "name": "describe263",
    "testId": 263,
    "memberof": "spec/screenplay/questions/Text.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263",
    "access": null,
    "description": "Text",
    "lineNumber": 9
  },
  {
    "__docId__": 907,
    "kind": "test",
    "name": "describe264",
    "testId": 264,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe264",
    "access": null,
    "description": "of",
    "lineNumber": 11
  },
  {
    "__docId__": 908,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe264.it265",
    "access": null,
    "description": "allows the actor to read the text of the DOM element matching the locator",
    "lineNumber": 17,
    "testTargets": [
      "Text.of"
    ]
  },
  {
    "__docId__": 909,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe264.it266",
    "access": null,
    "description": "produces a sensible description of the question being asked",
    "lineNumber": 29
  },
  {
    "__docId__": 910,
    "kind": "test",
    "name": "describe267",
    "testId": 267,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe267",
    "access": null,
    "description": "ofAll",
    "lineNumber": 35
  },
  {
    "__docId__": 911,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe267.it268",
    "access": null,
    "description": "allows the actor to read the text of all DOM elements matching the locator",
    "lineNumber": 53,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 912,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe267.it269",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 61,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 913,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe263.describe267",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe263.describe267.it270",
    "access": null,
    "description": "produces sensible description of the question being asked",
    "lineNumber": 70,
    "testTargets": [
      "Text#toString"
    ]
  },
  {
    "__docId__": 914,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Value.spec.ts",
    "content": "import { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Value', () => {\n\n    describe('of', () => {\n\n        /** @test {Text} */\n        /** @test {Text.of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n        ));\n\n        /** @test {Text} */\n        /** @test {Text#of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n        ));\n\n        /** @test {CSSClasses} */\n        /** @test {CSSClasses#of} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(\n                Value.of(Target.the('username field').located(by.tagName('input')))\n                    .of(Target.the(`form`).located(by.tagName('form'))),\n                equals('jan-molak'),\n            ),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Value.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 915,
    "kind": "test",
    "name": "describe271",
    "testId": 271,
    "memberof": "spec/screenplay/questions/Value.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe271",
    "access": null,
    "description": "Value",
    "lineNumber": 8
  },
  {
    "__docId__": 916,
    "kind": "test",
    "name": "describe272",
    "testId": 272,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe271.describe272",
    "access": null,
    "description": "of",
    "lineNumber": 10
  },
  {
    "__docId__": 917,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe271.describe272",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe271.describe272.it273",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 14,
    "testTargets": [
      "Text.of"
    ]
  },
  {
    "__docId__": 918,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe271.describe272",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe271.describe272.it274",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 30,
    "testTargets": [
      "Text#of"
    ]
  },
  {
    "__docId__": 919,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe271.describe272",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe271.describe272.it275",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 46,
    "testTargets": [
      "CSSClasses#of"
    ]
  },
  {
    "__docId__": 920,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Website.spec.ts",
    "content": "import { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { Navigate, Website } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\ndescribe('Website', () => {\n\n    describe('title', () => {\n        /** @test {Website} */\n        it('allows the actor to read the title of the website', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                    <head>\n                        <title>Hello World</title>\n                    </head>\n                </html>\n            `)),\n\n            Ensure.that(Website.title(), equals(`Hello World`)),\n        ));\n    });\n\n    describe('url', () => {\n\n        /** @test {Website} */\n        it('allows the actor to read the URL of the website', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://accessibility/`),\n\n            Ensure.that(Website.url(), equals(`chrome://accessibility/`)),\n        ));\n\n        /**\n         *  @test {Website}\n         *  @see https://github.com/serenity-js/serenity-js/issues/273\n         */\n        it(`correctly represents the URL containing special characters`, () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://accessibility/fr/noworries/#`),\n\n            Ensure.that(Website.url(), equals(`chrome://accessibility/fr/noworries/#`)),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Website.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 921,
    "kind": "test",
    "name": "describe276",
    "testId": 276,
    "memberof": "spec/screenplay/questions/Website.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276",
    "access": null,
    "description": "Website",
    "lineNumber": 7
  },
  {
    "__docId__": 922,
    "kind": "test",
    "name": "describe277",
    "testId": 277,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276.describe277",
    "access": null,
    "description": "title",
    "lineNumber": 9
  },
  {
    "__docId__": 923,
    "kind": "test",
    "name": "it278",
    "testId": 278,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe276.describe277",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276.describe277.it278",
    "access": null,
    "description": "allows the actor to read the title of the website",
    "lineNumber": 11,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 924,
    "kind": "test",
    "name": "describe279",
    "testId": 279,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276.describe279",
    "access": null,
    "description": "url",
    "lineNumber": 24
  },
  {
    "__docId__": 925,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe276.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276.describe279.it280",
    "access": null,
    "description": "allows the actor to read the URL of the website",
    "lineNumber": 27,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 926,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe276.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe276.describe279.it281",
    "access": null,
    "see": [
      "https://github.com/serenity-js/serenity-js/issues/273"
    ],
    "lineNumber": 37,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 927,
    "kind": "testFile",
    "name": "spec/setup.spec.ts",
    "content": "import 'mocha';\n\nimport { configure } from '@serenity-js/core';\nimport { UIActors } from './UIActors';\n\nbeforeEach(() => {\n    configure({ actors: new UIActors() });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/setup.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 928,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/Photographer.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, givenFollowingEvents } from '@integration/testing-tools';\nimport { AssertionError, ImplementationPendingError, LogicError } from '@serenity-js/core';\nimport { SceneFinished, SceneStarts, TaskFinished, TaskStarts, TestRunFinished } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    ActivityDetails,\n    Category,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Name,\n    Outcome,\n    ScenarioDetails,\n} from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\nimport { Photographer, TakePhotosOfFailures } from '../../../../src/stage';\nimport { create } from './create';\n\ndescribe('Photographer', () => {\n\n    const\n        defaultCardScenario = new ScenarioDetails(\n            new Name('Paying with a default card'),\n            new Category('Online Checkout'),\n            new FileSystemLocation(\n                new Path(`payments/checkout.feature`),\n            ),\n        ),\n        pickACard = new ActivityDetails(new Name('Pick the default credit card'));\n\n    it('complains when sent DomainEvents before getting assigned to a Stage', () => {\n        const photographer = new Photographer(new TakePhotosOfFailures());\n        expect(() => photographer.notifyOf(new SceneStarts(defaultCardScenario)))\n            .to.throw(LogicError, `Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n    });\n\n    describe(`when there's no actor in the spotlight`, () => {\n\n        given(\n            new ExecutionSkipped(),\n            new ExecutionSuccessful(),\n        ).\n        it('doesn\\'t take a picture if everything goes well', (outcome: Outcome) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(defaultCardScenario),\n                new TaskStarts(pickACard),\n                new TaskFinished(pickACard, outcome),\n                new SceneFinished(defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n\n        given(\n            { description: 'compromised',               outcome: new ExecutionCompromised(new Error('Database is down'))                                                },\n            { description: 'error',                     outcome: new ExecutionFailedWithError(new TypeError())                                                          },\n            { description: 'assertion error',           outcome: new ExecutionFailedWithAssertionError(new AssertionError(`expected false to equal true`, false, true)) },\n            { description: 'implementation pending',    outcome: new ImplementationPending(new ImplementationPendingError('method missing'))                            },\n            { description: 'ignored',                   outcome: new ExecutionIgnored(new Error('Failed, retrying'))                                                    },\n        ).\n        it('does nothing, even when a problem occurs', ({ outcome }) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(defaultCardScenario),\n                new SceneFinished(defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/Photographer.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 929,
    "kind": "test",
    "name": "describe282",
    "testId": 282,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe282",
    "access": null,
    "description": "Photographer",
    "lineNumber": 25
  },
  {
    "__docId__": 930,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe282",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe282.it283",
    "access": null,
    "description": "complains when sent DomainEvents before getting assigned to a Stage",
    "lineNumber": 37
  },
  {
    "__docId__": 931,
    "kind": "test",
    "name": "describe284",
    "testId": 284,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe282",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe282.describe284",
    "access": null,
    "lineNumber": 43
  },
  {
    "__docId__": 932,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { Duration } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated, DomainEvent } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosBeforeAndAfterInteractions } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', function () {\n\n    this.timeout(5000);\n\n    describe('when instructed to take photos before and after all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create(Duration.ofSeconds(3));\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosBeforeAndAfterInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a before and after photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes a photo before and after Interaction, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes two photos per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                let cid1: CorrelationId,\n                    cid2: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => { cid1 = event.value.correlationId; })\n                    .next(ActivityStarts, event => { cid2 = event.value.correlationId; });\n\n                const\n                    firstActivityEvents  = recorder.events.filter(withCorrelationIdOf(cid1)),\n                    secondActivityEvents = recorder.events.filter(withCorrelationIdOf(cid2));\n\n                expect(firstActivityEvents).to.have.lengthOf(4);\n                expect(secondActivityEvents).to.have.lengthOf(4);\n\n                PickEvent.from(firstActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n\n                PickEvent.from(secondActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Before Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-After Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        function withCorrelationIdOf(cid: CorrelationId) {\n            return (event: DomainEvent) => {\n                const details = (event as ActivityRelatedArtifactGenerated).details || (event as ActivityStarts | ActivityFinished).value;\n\n                return details && cid.equals(details.correlationId);\n            };\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 933,
    "kind": "test",
    "name": "describe285",
    "testId": 285,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285",
    "access": null,
    "description": "Photographer",
    "lineNumber": 14
  },
  {
    "__docId__": 934,
    "kind": "test",
    "name": "describe286",
    "testId": 286,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "access": null,
    "description": "when instructed to take photos before and after all interactions",
    "lineNumber": 18
  },
  {
    "__docId__": 935,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286.it287",
    "access": null,
    "description": "takes a before and after photo when the interaction goes well",
    "lineNumber": 33
  },
  {
    "__docId__": 936,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286.it288",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 49
  },
  {
    "__docId__": 937,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286.it289",
    "access": null,
    "description": "takes a photo before and after Interaction, even though nested tasks might all be marked as failing",
    "lineNumber": 65
  },
  {
    "__docId__": 938,
    "kind": "test",
    "name": "it290",
    "testId": 290,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286.it290",
    "access": null,
    "description": "takes two photos per interaction",
    "lineNumber": 85
  },
  {
    "__docId__": 939,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe285.describe286.it291",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 126
  },
  {
    "__docId__": 940,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosOfFailures } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of failed interactions,', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const sut = create();\n            stage = sut.stage;\n            recorder = sut.recorder;\n\n            photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n        });\n\n        it('does nothing if everything goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(2);    // Interaction starts and finishes\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it is concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let correlationId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        correlationId = event.value.correlationId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.details.correlationId).to.equal(correlationId);\n                    });\n            })));\n\n        it('takes only one picture, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`includes the browser context in the name of the emitted artifact`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Betty fails due to Error`,\n                        );\n                    });\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 941,
    "kind": "test",
    "name": "describe292",
    "testId": 292,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292",
    "access": null,
    "description": "Photographer",
    "lineNumber": 13
  },
  {
    "__docId__": 942,
    "kind": "test",
    "name": "describe293",
    "testId": 293,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "access": null,
    "description": "when instructed to take a photo of failed interactions,",
    "lineNumber": 15
  },
  {
    "__docId__": 943,
    "kind": "test",
    "name": "it294",
    "testId": 294,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293.it294",
    "access": null,
    "description": "does nothing if everything goes well",
    "lineNumber": 30
  },
  {
    "__docId__": 944,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293.it295",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 37
  },
  {
    "__docId__": 945,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293.it296",
    "access": null,
    "lineNumber": 49
  },
  {
    "__docId__": 946,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293.it297",
    "access": null,
    "description": "takes only one picture, even though nested tasks might all be marked as failing",
    "lineNumber": 65
  },
  {
    "__docId__": 947,
    "kind": "test",
    "name": "it298",
    "testId": 298,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe292.describe293.it298",
    "access": null,
    "lineNumber": 81
  },
  {
    "__docId__": 948,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosOfInteractions } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create();\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosOfInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it's concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let correlationId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        correlationId = event.value.correlationId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.details.correlationId).to.equal(correlationId);\n                    });\n            })));\n\n        it('takes only one photo, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes one photo per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Betty succeeds (#1)`,\n                        );\n                    });\n            })));\n\n        it(`does not attempt to take a photo if the actor in the spotlight can't BrowseTheWeb`, () =>\n            expect(stage.theActorCalled('Adam').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                expect(recorder.events.length).to.equal(2);\n                expect(recorder.events[0]).to.be.instanceOf(InteractionStarts);\n                expect(recorder.events[1]).to.be.instanceOf(InteractionFinished);\n\n                // no artifacts generated for an actor with no ability to BrowseTheWeb\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 949,
    "kind": "test",
    "name": "describe299",
    "testId": 299,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299",
    "access": null,
    "description": "Photographer",
    "lineNumber": 13
  },
  {
    "__docId__": 950,
    "kind": "test",
    "name": "describe300",
    "testId": 300,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "access": null,
    "description": "when instructed to take a photo of all interactions",
    "lineNumber": 15
  },
  {
    "__docId__": 951,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it301",
    "access": null,
    "description": "takes a photo when the interaction goes well",
    "lineNumber": 30
  },
  {
    "__docId__": 952,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it302",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 42
  },
  {
    "__docId__": 953,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it303",
    "access": null,
    "lineNumber": 54
  },
  {
    "__docId__": 954,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it304",
    "access": null,
    "description": "takes only one photo, even though nested tasks might all be marked as failing",
    "lineNumber": 70
  },
  {
    "__docId__": 955,
    "kind": "test",
    "name": "it305",
    "testId": 305,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it305",
    "access": null,
    "description": "takes one photo per interaction",
    "lineNumber": 86
  },
  {
    "__docId__": 956,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it306",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 103
  },
  {
    "__docId__": 957,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe299.describe300.it307",
    "access": null,
    "lineNumber": 118
  }
]